<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataManagementEngine</name>
    </assembly>
    <members>
        <member name="T:TheTechIdea.Beep.Caching.CacheConfiguration">
            <summary>
            Configuration settings for cache providers and the cache manager.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheConfiguration.DefaultExpiry">
            <summary>Gets or sets the default expiration time for cached items.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheConfiguration.MaxItems">
            <summary>Gets or sets the maximum number of items in the cache (for in-memory providers).</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheConfiguration.CleanupInterval">
            <summary>Gets or sets the cleanup interval for expired items.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheConfiguration.EnableStatistics">
            <summary>Gets or sets whether to enable cache statistics.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheConfiguration.KeyPrefix">
            <summary>Gets or sets the cache key prefix.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheConfiguration.EnableCompression">
            <summary>Gets or sets whether to compress cached values.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheConfiguration.CompressionThreshold">
            <summary>Gets or sets the compression threshold (in bytes).</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheConfiguration.SerializationFormat">
            <summary>Gets or sets the serialization format.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheConfiguration.Redis">
            <summary>Gets or sets Redis-specific configuration.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheConfiguration.MemoryCache">
            <summary>Gets or sets MemoryCache-specific configuration.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.RedisConfiguration">
            <summary>
            Redis-specific configuration settings.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.RedisConfiguration.ConnectionString">
            <summary>Gets or sets the Redis connection string.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.RedisConfiguration.Database">
            <summary>Gets or sets the Redis database number.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.RedisConfiguration.ConnectTimeout">
            <summary>Gets or sets the connection timeout.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.RedisConfiguration.UseConnectionMultiplexing">
            <summary>Gets or sets whether to use connection multiplexing.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.RedisConfiguration.RetryPolicy">
            <summary>Gets or sets the retry policy configuration.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.MemoryCacheConfiguration">
            <summary>
            MemoryCache-specific configuration settings.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.MemoryCacheConfiguration.SizeLimit">
            <summary>Gets or sets the size limit for the memory cache.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.MemoryCacheConfiguration.CompactionPercentage">
            <summary>Gets or sets the compaction percentage.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.MemoryCacheConfiguration.ExpirationScanFrequency">
            <summary>Gets or sets the expiration scan frequency.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.RetryPolicyConfiguration">
            <summary>
            Retry policy configuration for cache operations.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.RetryPolicyConfiguration.MaxRetries">
            <summary>Gets or sets the maximum number of retry attempts.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.RetryPolicyConfiguration.BaseDelay">
            <summary>Gets or sets the base delay between retries.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.RetryPolicyConfiguration.MaxDelay">
            <summary>Gets or sets the maximum delay between retries.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.RetryPolicyConfiguration.UseExponentialBackoff">
            <summary>Gets or sets whether to use exponential backoff.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.CacheStatistics">
            <summary>
            Cache statistics for monitoring and diagnostics.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheStatistics.Hits">
            <summary>Gets or sets the total number of cache hits.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheStatistics.Misses">
            <summary>Gets or sets the total number of cache misses.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheStatistics.ItemCount">
            <summary>Gets or sets the total number of items currently in cache.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheStatistics.MemoryUsage">
            <summary>Gets or sets the total memory used by the cache (in bytes).</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheStatistics.ExpiredItems">
            <summary>Gets or sets the number of expired items removed.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheStatistics.EvictedItems">
            <summary>Gets or sets the number of evicted items (due to size limits).</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheStatistics.HitRatio">
            <summary>Gets the cache hit ratio as a percentage.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheStatistics.LastUpdated">
            <summary>Gets or sets the last update time of these statistics.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.SerializationFormat">
            <summary>
            Enumeration of supported serialization formats.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.SerializationFormat.Json">
            <summary>JSON serialization (default).</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.SerializationFormat.Binary">
            <summary>Binary serialization.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.SerializationFormat.MessagePack">
            <summary>MessagePack serialization.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.SerializationFormat.Protobuf">
            <summary>Protocol Buffers serialization.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.CacheProviderType">
            <summary>
            Cache provider types supported by the cache manager.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.CacheProviderType.InMemory">
            <summary>In-memory cache provider (default).</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.CacheProviderType.MemoryCache">
            <summary>Microsoft MemoryCache provider.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.CacheProviderType.Redis">
            <summary>Redis cache provider.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.CacheProviderType.Distributed">
            <summary>Distributed cache provider.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.CacheProviderType.Hybrid">
            <summary>Hybrid cache provider (combination of multiple providers).</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.CacheManager">
            <summary>
            Advanced cache manager with pluggable providers, retry logic, and comprehensive monitoring.
            Supports multiple cache backends including In-Memory, MemoryCache, Redis, and custom providers.
            </summary>
            <summary>
            Extension methods for cache operations to provide additional functionality.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.Initialize(TheTechIdea.Beep.Caching.CacheConfiguration,TheTechIdea.Beep.Caching.CacheProviderType,System.Nullable{TheTechIdea.Beep.Caching.CacheProviderType})">
            <summary>
            Initializes the cache manager with the specified configuration.
            </summary>
            <param name="configuration">Cache configuration settings.</param>
            <param name="primaryProviderType">The primary cache provider type.</param>
            <param name="fallbackProviderType">The fallback cache provider type (optional).</param>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.SetProvider(TheTechIdea.Beep.Caching.ICacheProvider,TheTechIdea.Beep.Caching.ICacheProvider)">
            <summary>
            Sets a custom cache provider as the primary provider.
            </summary>
            <param name="provider">The custom cache provider.</param>
            <param name="fallbackProvider">Optional fallback provider.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.GetOrCreateAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Gets a cached value or creates it using the provided factory function.
            </summary>
            <typeparam name="T">The type of the cached value.</typeparam>
            <param name="key">The cache key.</param>
            <param name="factory">Factory function to create the value if not cached.</param>
            <param name="expiry">Optional expiration time.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The cached or newly created value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.GetOrCreate``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            Gets a cached value or creates it using the provided factory function (synchronous version).
            </summary>
            <typeparam name="T">The type of the cached value.</typeparam>
            <param name="key">The cache key.</param>
            <param name="factory">Factory function to create the value if not cached.</param>
            <param name="expiry">Optional expiration time.</param>
            <returns>The cached or newly created value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a cached value by key.
            </summary>
            <typeparam name="T">The type of the cached value.</typeparam>
            <param name="key">The cache key.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The cached value or default(T) if not found.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Sets a value in the cache.
            </summary>
            <typeparam name="T">The type of the value to cache.</typeparam>
            <param name="key">The cache key.</param>
            <param name="value">The value to cache.</param>
            <param name="expiry">Optional expiration time.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the value was cached successfully.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a value from the cache.
            </summary>
            <param name="key">The cache key.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the value was removed from at least one provider.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a key exists in the cache.
            </summary>
            <param name="key">The cache key.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the key exists in at least one provider.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.ClearAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Clears the cache or removes keys matching a pattern.
            </summary>
            <param name="pattern">Optional pattern to match keys.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The total number of keys removed from all providers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.GetManyAsync``1(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets multiple values from the cache.
            </summary>
            <typeparam name="T">The type of the cached values.</typeparam>
            <param name="keys">The cache keys.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Dictionary with found values.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.SetManyAsync``1(System.Collections.Generic.Dictionary{System.String,``0},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Sets multiple values in the cache.
            </summary>
            <typeparam name="T">The type of the values to cache.</typeparam>
            <param name="values">Dictionary of key-value pairs to cache.</param>
            <param name="expiry">Optional expiration time for all values.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The number of values successfully cached.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.Get``1(System.String)">
            <summary>
            Gets a cached value by key (synchronous version).
            </summary>
            <typeparam name="T">The type of the cached value.</typeparam>
            <param name="key">The cache key.</param>
            <returns>The cached value or default(T) if not found.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.Set``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Sets a value in the cache (synchronous version).
            </summary>
            <typeparam name="T">The type of the value to cache.</typeparam>
            <param name="key">The cache key.</param>
            <param name="value">The value to cache.</param>
            <param name="expiry">Optional expiration time.</param>
            <returns>True if the value was cached successfully.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.Remove(System.String)">
            <summary>
            Removes a value from the cache (synchronous version).
            </summary>
            <param name="key">The cache key.</param>
            <returns>True if the value was removed.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.Contains(System.String)">
            <summary>
            Checks if a key exists in the cache (synchronous version).
            </summary>
            <param name="key">The cache key.</param>
            <returns>True if the key exists.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.InvalidateCache(System.String)">
            <summary>
            Invalidates cache entries (synchronous version).
            </summary>
            <param name="pattern">Pattern to match keys for removal.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.GetStatistics">
            <summary>
            Gets comprehensive cache statistics from all providers.
            </summary>
            <returns>Combined cache statistics.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.GetConfiguration">
            <summary>
            Gets the current cache configuration.
            </summary>
            <returns>The cache configuration.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.RefreshProviders">
            <summary>
            Forces a refresh of the cache providers (reconnects if needed).
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.GetPrimaryProvider">
            <summary>
            Gets the primary cache provider.
            </summary>
            <returns>The primary cache provider instance.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.GetFallbackProvider">
            <summary>
            Gets the fallback cache provider.
            </summary>
            <returns>The fallback cache provider instance.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.SetWithTagsAsync``1(System.String,``0,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Sets a value in the cache with associated tags for grouped operations.
            </summary>
            <typeparam name="T">The type of the value to cache.</typeparam>
            <param name="key">The cache key.</param>
            <param name="value">The value to cache.</param>
            <param name="tags">Tags associated with this cache entry.</param>
            <param name="expiry">Optional expiration time.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the value was cached successfully.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.RemoveByTagAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes all cache entries associated with the specified tag.
            </summary>
            <param name="tag">The tag to remove.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The number of entries removed.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.SetIfNotExistsAsync``1(System.String,``0,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Sets a value in the cache only if the key doesn't already exist.
            </summary>
            <typeparam name="T">The type of the value to cache.</typeparam>
            <param name="key">The cache key.</param>
            <param name="value">The value to cache.</param>
            <param name="expiry">Optional expiration time.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the value was cached (key didn't exist).</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.GetAndRemoveAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a value from cache and removes it atomically.
            </summary>
            <typeparam name="T">The type of the cached value.</typeparam>
            <param name="key">The cache key.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The cached value or default(T) if not found.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.RefreshAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Refreshes the expiration time of a cached item.
            </summary>
            <param name="key">The cache key.</param>
            <param name="expiry">The new expiration time.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the expiration was refreshed.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.WarmCacheAsync``1(System.Collections.Generic.Dictionary{System.String,System.Func{System.Threading.Tasks.Task{``0}}},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Warms the cache by pre-loading values using the provided factory functions.
            </summary>
            <typeparam name="T">The type of the values to cache.</typeparam>
            <param name="warmupItems">Dictionary of key-factory pairs for warming up the cache.</param>
            <param name="expiry">Optional expiration time for warmed items.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The number of items successfully warmed.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.TryAcquireLockAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to acquire a distributed lock using the cache.
            </summary>
            <param name="lockKey">The lock key.</param>
            <param name="lockValue">The lock value (usually a unique identifier).</param>
            <param name="expiry">Lock expiration time.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the lock was acquired.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.ReleaseLockAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Releases a distributed lock.
            </summary>
            <param name="lockKey">The lock key.</param>
            <param name="lockValue">The lock value to verify ownership.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the lock was released.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.ExecuteWithLockAsync(System.String,System.Func{System.Threading.Tasks.Task},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Executes an action while holding a distributed lock.
            </summary>
            <param name="lockKey">The lock key.</param>
            <param name="action">The action to execute.</param>
            <param name="lockTimeout">Lock timeout.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the action was executed successfully.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.CacheManager.CheckHealthAsync(System.Threading.CancellationToken)">
            <summary>
            Performs a health check on all cache providers.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Health check results.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.CacheHealthStatus">
            <summary>
            Cache health status information.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheHealthStatus.CheckTime">
            <summary>Gets or sets the time when the health check was performed.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheHealthStatus.OverallHealth">
            <summary>Gets or sets the overall health status.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheHealthStatus.PrimaryProviderHealth">
            <summary>Gets or sets the primary provider health status.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheHealthStatus.FallbackProviderHealth">
            <summary>Gets or sets the fallback provider health status.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.ProviderHealthStatus">
            <summary>
            Individual provider health status.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.ProviderHealthStatus.ProviderName">
            <summary>Gets or sets the provider name.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.ProviderHealthStatus.IsAvailable">
            <summary>Gets or sets whether the provider is available.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.ProviderHealthStatus.IsHealthy">
            <summary>Gets or sets whether the provider is healthy.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.ProviderHealthStatus.ResponseTime">
            <summary>Gets or sets the response time for health check operations.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.ProviderHealthStatus.ErrorMessage">
            <summary>Gets or sets any error message from health check.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.CacheManagerStatistics">
            <summary>
            Comprehensive statistics for the cache manager including all providers.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.PrimaryProvider">
            <summary>Gets or sets the primary provider statistics.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.FallbackProvider">
            <summary>Gets or sets the fallback provider statistics.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.PrimaryProviderName">
            <summary>Gets or sets the primary provider name.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.FallbackProviderName">
            <summary>Gets or sets the fallback provider name.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.PrimaryProviderAvailable">
            <summary>Gets or sets whether the primary provider is available.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.FallbackProviderAvailable">
            <summary>Gets or sets whether the fallback provider is available.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.Configuration">
            <summary>Gets or sets the cache configuration.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.CombinedHitRatio">
            <summary>Gets the combined hit ratio across all providers.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.TotalItemCount">
            <summary>Gets the total item count across all providers.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.TotalMemoryUsage">
            <summary>Gets the total memory usage across all providers.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.TotalExpiredItems">
            <summary>Gets the total expired items across all providers.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.CacheManagerStatistics.TotalEvictedItems">
            <summary>Gets the total evicted items across all providers.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.CachedMemoryDataSource">
            <summary>
            Cached Memory Data Source - uses Microsoft MemoryCache as a data storage backend.
            Provides CRUD operations on cached data with optional expiration and size limits.
            Uses MemoryCache Provider (MemoryCacheProvider) for structured caching with policies.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.InMemoryCacheDataSource">
            <summary>
            In-Memory Cache Data Source - uses simple in-memory cache as a data storage backend.
            Provides fast CRUD operations on cached data with no persistence.
            Uses InMemory Provider (SimpleCacheProvider) for lightweight caching.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.DataSources.MemoryCacheConnection">
            <summary>
            Simple memory cache connection implementation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample">
            <summary>
            Comprehensive example demonstrating the usage of Cache Connection Helpers in the Beep Data Management Engine.
            
            This class provides complete examples of:
            - Registering cache connection configurations
            - Creating cache data source connections
            - Working with different cache types (in-memory, distributed, hybrid)
            - Configuring connection properties for various cache systems
            - Best practices for cache configuration and usage
            
            The Cache Connection Helpers support various caching technologies including:
            - Built-in Beep InMemoryCache
            - Microsoft Extensions Memory Cache
            - Redis distributed cache
            - Hazelcast in-memory data grid
            - Apache Ignite cache
            - Hybrid and multi-level caching systems
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Logger.IDMLogger)">
            <summary>
            Initializes a new instance of the CacheConnectionHelperExample class.
            </summary>
            <param name="dmeEditor">The data management editor instance</param>
            <param name="logger">The logger instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.DemonstrateAllCacheConfigurations">
            <summary>
            Demonstrates all available cache connection configurations.
            This method shows how to retrieve and register all cache configurations supported by Beep.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.DemonstrateInMemoryCacheUsage">
            <summary>
            Demonstrates InMemoryCache configuration and usage.
            Shows how to set up and use the built-in Beep InMemoryCache data source.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.DemonstrateRedisCacheUsage">
            <summary>
            Demonstrates Redis cache configuration and connection setup.
            Shows how to configure Redis as a distributed cache data source.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.DemonstrateMemoryCacheUsage">
            <summary>
            Demonstrates Microsoft Memory Cache configuration.
            Shows how to set up Microsoft Extensions Memory Cache as a data source.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.DemonstrateHybridCacheUsage">
            <summary>
            Demonstrates Hybrid Cache configuration.
            Shows how to set up a multi-level cache system with L1 and L2 caches.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.DemonstrateDistributedCacheConfigurations">
            <summary>
            Demonstrates all distributed cache configurations.
            Shows configurations for Redis, Hazelcast, Apache Ignite, and other distributed caches.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.DemonstrateCacheConfigurationValidation">
            <summary>
            Demonstrates cache configuration validation and best practices.
            Shows how to validate cache configurations and connection strings.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.RunAllDemonstrations">
            <summary>
            Runs all cache connection helper demonstrations.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.RegisterAllCacheConfigurations(System.Collections.Generic.List{TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig})">
            <summary>
            Registers all cache configurations with the DME Editor.
            </summary>
            <param name="cacheConfigs">List of cache configurations to register</param>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.TestCacheConnection(System.String)">
            <summary>
            Tests cache connection creation (mock test since actual data sources may not be available).
            </summary>
            <param name="connectionName">Name of the connection to test</param>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExample.ExtractConnectionStringParameters(System.String)">
            <summary>
            Extracts parameter names from a connection string template.
            </summary>
            <param name="connectionStringTemplate">Connection string template with {Parameter} placeholders</param>
            <returns>List of parameter names</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExampleRunner">
            <summary>
            Static helper class for running cache connection helper examples.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExampleRunner.RunExample(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Logger.IDMLogger)">
            <summary>
            Runs the cache connection helper example with a provided DME Editor and Logger.
            </summary>
            <param name="dmeEditor">The DME Editor instance</param>
            <param name="logger">The Logger instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheConnectionHelperExampleRunner.RunSpecificDemo(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Logger.IDMLogger,System.String)">
            <summary>
            Runs a specific cache demonstration.
            </summary>
            <param name="dmeEditor">The DME Editor instance</param>
            <param name="logger">The Logger instance</param>
            <param name="demonstrationType">The type of demonstration to run</param>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.Examples.CacheManagerExamples">
            <summary>
            Example usage of the optimized CacheManager with multiple providers.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheManagerExamples.BasicUsageExample">
            <summary>
            Basic usage example of the cache manager.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheManagerExamples.AdvancedUsageExample">
            <summary>
            Advanced usage with custom configuration and multiple providers.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheManagerExamples.SynchronousUsageExample">
            <summary>
            Synchronous usage example (backward compatibility).
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample">
            <summary>
            Comprehensive example demonstrating the InMemoryCacheDataSource functionality.
            
            This class provides complete examples of:
            - Initializing and configuring InMemoryCacheDataSource for in-memory data operations
            - Creating and managing entities with automatic schema discovery
            - Performing full CRUD operations (Create, Read, Update, Delete) on cached data
            - Advanced filtering and querying with multiple operators (equals, contains, greater than, etc.)
            - Paging support for large datasets with configurable page sizes
            - Entity structure management including custom entity creation
            - Integration with CacheManager for advanced caching scenarios
            - Performance testing and benchmarking of cache operations
            - Statistics collection and monitoring of cache performance
            - Proper resource cleanup and disposal patterns
            
            The InMemoryCacheDataSource serves as a high-performance, thread-safe in-memory data store
            that implements the full IDataSource interface, making it compatible with the entire
            Beep data management ecosystem while providing microsecond-level response times.
            
            Key Features Demonstrated:
            - Thread-safe concurrent operations using ConcurrentDictionary
            - Automatic entity structure inference from data objects
            - Support for complex filtering with multiple conditions
            - Integration with external cache providers for persistence
            - Memory-efficient data storage and retrieval
            - Comprehensive error handling and logging
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample._cacheDataSource">
            <summary>
            The main InMemoryCacheDataSource instance used for all demonstration operations.
            Provides in-memory data storage with full IDataSource interface compatibility.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample._dmeEditor">
            <summary>
            Data Management Editor interface providing access to configuration, logging,
            and other core Beep framework functionality.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample._logger">
            <summary>
            Logger interface for recording operations, errors, and performance metrics
            throughout the example execution.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Logger.IDMLogger)">
            <summary>
            Initializes a new instance of the CacheMemoryDataSourceExample class.
            
            Sets up the example environment with the provided editor and logger instances,
            preparing for demonstration of InMemoryCacheDataSource capabilities.
            </summary>
            <param name="dmeEditor">The data management editor for framework integration</param>
            <param name="logger">The logger for recording operations and events</param>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.RunBasicExample">
            <summary>
            Runs a comprehensive basic example demonstrating core InMemoryCacheDataSource functionality.
            
            This method orchestrates a complete demonstration including:
            1. Data source initialization and connection establishment
            2. Sample data creation with multiple entity types (Users, Products)
            3. Full CRUD operations with error handling and validation
            4. Advanced filtering and querying capabilities
            5. Entity management and structure discovery
            6. Proper resource cleanup and disposal
            
            The example uses realistic business data (users, products, orders) to show
            practical usage patterns and best practices for the InMemoryCacheDataSource.
            </summary>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.InitializeCacheDataSource">
            <summary>
            Initializes and configures the InMemoryCacheDataSource for demonstration.
            
            This method:
            - Creates a new InMemoryCacheDataSource instance with proper configuration
            - Sets up error handling and logging integration
            - Establishes the connection to the in-memory cache
            - Validates the connection status and reports results
            
            The data source is configured for in-memory cache operations with
            automatic entity discovery and thread-safe concurrent access.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.CreateSampleData">
            <summary>
            Creates comprehensive sample data to demonstrate various data operations.
            
            This method populates the cache with:
            - User entities with diverse attributes (name, email, age, department)
            - Product entities with pricing and inventory information
            - Realistic business data for testing filtering and querying
            
            Each insert operation is validated and logged, demonstrating proper
            error handling and success verification patterns.
            </summary>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.DemonstrateCrudOperations">
            <summary>
            Demonstrates comprehensive CRUD (Create, Read, Update, Delete) operations.
            
            This method showcases:
            - Reading all entities from a collection
            - Updating existing entities with new information
            - Deleting entities by primary key
            - Verifying changes with subsequent read operations
            - Proper error handling and status validation
            
            Each operation is logged and verified to ensure data integrity
            and demonstrate proper usage patterns for the InMemoryCacheDataSource.
            </summary>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.DemonstrateQuerying">
            <summary>
            Demonstrates advanced filtering and querying capabilities.
            
            This method showcases:
            - Single-condition filtering (department equals "Engineering")
            - Multi-condition filtering (category and price range)
            - Various filter operators (equals, less than, contains, etc.)
            - Paged result retrieval with configurable page sizes
            - Complex query patterns for business scenarios
            
            The filtering system supports all standard comparison operators
            and can handle multiple conditions with implicit AND logic.
            </summary>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.DemonstrateEntityManagement">
            <summary>
            Demonstrates entity management and structure discovery capabilities.
            
            This method showcases:
            - Listing all available entities in the data source
            - Inspecting entity structures and field definitions
            - Creating custom entity structures programmatically
            - Setting primary keys and field properties
            - Adding data to newly created entities
            
            The entity management system supports automatic schema discovery
            from data objects as well as explicit entity structure definition.
            </summary>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.Cleanup">
            <summary>
            Performs proper cleanup and resource disposal.
            
            This method demonstrates:
            - Proper connection closure
            - Resource disposal patterns
            - Exception handling during cleanup
            - Logging of cleanup operations
            
            Following proper cleanup patterns is essential for memory management
            and preventing resource leaks in production applications.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.RunAdvancedExample">
            <summary>
            Demonstrates advanced cache operations with external cache provider integration.
            
            This method showcases:
            - Custom cache configuration with specific settings
            - Integration with CacheManager for advanced scenarios
            - Direct cache provider access and manipulation
            - Performance testing and benchmarking
            - Statistics collection and analysis
            - Memory usage optimization techniques
            
            The advanced example shows how to leverage the full power of the caching
            system for high-performance, production-ready applications.
            </summary>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.DemonstrateCacheIntegration">
            <summary>
            Demonstrates integration between InMemoryCacheDataSource and CacheManager.
            
            This method shows:
            - Dual access to cached data through different interfaces
            - Cache key naming conventions and patterns
            - Cross-system data accessibility
            - Integration verification and validation
            
            The integration allows data stored through InMemoryCacheDataSource
            to be accessible through the CacheManager API and vice versa.
            </summary>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.Examples.CacheMemoryDataSourceExample.PerformanceTest">
            <summary>
            Performs comprehensive performance testing and benchmarking.
            
            This method:
            - Measures insert performance for large datasets (1000+ records)
            - Tests filtering performance with complex conditions
            - Collects and reports cache statistics
            - Analyzes hit/miss ratios and memory usage
            - Provides performance metrics for optimization
            
            Performance testing is essential for understanding the scalability
            and efficiency characteristics of the caching system.
            </summary>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.ICacheProvider">
            <summary>
            Interface for cache providers that can be used with the CacheManager.
            Supports various caching backends like In-Memory, Redis, MemoryCache, etc.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.ICacheProvider.Name">
            <summary>Gets the name of the cache provider.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.ICacheProvider.IsAvailable">
            <summary>Gets a value indicating whether the provider is available.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Caching.ICacheProvider.Statistics">
            <summary>Gets cache statistics.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.ICacheProvider.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>Gets a cached value by key.</summary>
            <typeparam name="T">The type of the cached value.</typeparam>
            <param name="key">The cache key.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The cached value or default(T) if not found.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.ICacheProvider.SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>Sets a value in the cache.</summary>
            <typeparam name="T">The type of the value to cache.</typeparam>
            <param name="key">The cache key.</param>
            <param name="value">The value to cache.</param>
            <param name="expiry">The expiration time.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the value was cached successfully.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.ICacheProvider.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>Removes a value from the cache.</summary>
            <param name="key">The cache key.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the value was removed.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.ICacheProvider.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>Checks if a key exists in the cache.</summary>
            <param name="key">The cache key.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the key exists and is not expired.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.ICacheProvider.ClearAsync(System.String,System.Threading.CancellationToken)">
            <summary>Clears the entire cache or keys matching a pattern.</summary>
            <param name="pattern">The pattern to match keys (optional).</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The number of keys removed.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.ICacheProvider.GetManyAsync``1(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Gets multiple values from the cache.</summary>
            <typeparam name="T">The type of the cached values.</typeparam>
            <param name="keys">The cache keys.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Dictionary with found values.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.ICacheProvider.SetManyAsync``1(System.Collections.Generic.Dictionary{System.String,``0},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>Sets multiple values in the cache.</summary>
            <typeparam name="T">The type of the values to cache.</typeparam>
            <param name="values">Dictionary of key-value pairs to cache.</param>
            <param name="expiry">The expiration time for all values.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The number of values successfully cached.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Caching.ICacheProvider.RefreshAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Refreshes the expiration time of a cached item.</summary>
            <param name="key">The cache key.</param>
            <param name="expiry">The new expiration time.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if the expiration was refreshed.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TheTechIdea.Beep.Caching.Providers.HybridCacheProvider" -->
        <member name="M:TheTechIdea.Beep.Caching.Providers.HybridCacheProvider.#ctor(TheTechIdea.Beep.Caching.ICacheProvider,TheTechIdea.Beep.Caching.ICacheProvider,TheTechIdea.Beep.Caching.CacheConfiguration)">
            <summary>
            Initializes a new instance of the HybridCacheProvider class.
            </summary>
            <param name="l1Cache">Fast local cache provider.</param>
            <param name="l2Cache">Distributed cache provider.</param>
            <param name="configuration">Cache configuration settings.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TheTechIdea.Beep.Caching.Providers.InMemoryCacheProvider" -->
        <member name="M:TheTechIdea.Beep.Caching.Providers.InMemoryCacheProvider.#ctor(TheTechIdea.Beep.Caching.CacheConfiguration)">
            <summary>
            Initializes a new instance of the InMemoryCacheProvider class.
            </summary>
            <param name="configuration">Cache configuration settings.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TheTechIdea.Beep.Caching.Providers.MemoryCacheProvider" -->
        <member name="M:TheTechIdea.Beep.Caching.Providers.MemoryCacheProvider.#ctor(TheTechIdea.Beep.Caching.CacheConfiguration)">
            <summary>
            Initializes a new instance of the MemoryCacheProvider class.
            </summary>
            <param name="configuration">Cache configuration settings.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TheTechIdea.Beep.Caching.Providers.RedisCacheProvider" -->
        <member name="M:TheTechIdea.Beep.Caching.Providers.RedisCacheProvider.#ctor(TheTechIdea.Beep.Caching.CacheConfiguration)">
            <summary>
            Initializes a new instance of the RedisCacheProvider class.
            </summary>
            <param name="configuration">Cache configuration settings.</param>
        </member>
        <member name="T:TheTechIdea.Beep.Caching.Providers.SimpleCacheProvider">
            <summary>
            Simple, working in-memory cache provider optimized for .NET 8/9.
            
            This provider serves as the foundational, lightweight caching solution with essential features:
            
            **Core Capabilities:**
            - Thread-safe operations using ConcurrentDictionary for high concurrency
            - Automatic expiration with configurable TTL (Time To Live) settings
            - JSON-based serialization for universal data type support
            - Background cleanup timer for expired item removal
            - Comprehensive statistics tracking (hits, misses, memory usage)
            - Simple LRU (Least Recently Used) eviction when capacity limits are reached
            
            **Performance Characteristics:**
            - Optimized for moderate-scale applications (up to ~10,000 items)
            - Low memory overhead with efficient data structures
            - Fast access times for cached items (microsecond range)
            - Minimal CPU overhead for background maintenance
            
            **Use Cases:**
            - Development and testing environments
            - Small to medium applications with basic caching needs
            - Fallback provider for more complex caching scenarios
            - Applications requiring simple, reliable caching without external dependencies
            - Microservices with lightweight caching requirements
            
            **Configuration Options:**
            - Default expiry time for cached items
            - Maximum item count before eviction
            - Cleanup interval for expired item removal
            - Key prefix for namespacing
            - Statistics collection enable/disable
            
            **Thread Safety:**
            All operations are thread-safe and can handle high concurrency scenarios
            without requiring external synchronization mechanisms.
            
            **Memory Management:**
            Uses efficient memory allocation patterns and provides automatic cleanup
            of expired items to prevent memory leaks in long-running applications.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.ConfigEditor">
            <summary>
            Refactored ConfigEditor with specialized managers for different responsibilities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.ConfigEditor.#ctor(TheTechIdea.Beep.Logger.IDMLogger,TheTechIdea.Beep.ConfigUtil.IErrorsInfo,TheTechIdea.Beep.ConfigUtil.IJsonLoader,System.String,System.String,TheTechIdea.Beep.Utilities.BeepConfigType)">
            <summary>Initializes a new instance of the ConfigEditor class.</summary>
            <param name="logger">The logger object used for logging.</param>
            <param name="per">The object used for error handling and reporting.</param>
            <param name="jsonloader">The object used for loading JSON data.</param>
            <param name="folderpath">The path to the folder containing the configuration files. If null or empty, uses platform-appropriate application data folder.</param>
            <param name="containerfolder">The name of the container folder within the folder path. If null or empty, uses the folder path directly.</param>
            <param name="configType">The type of configuration being edited.</param>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.ConfigType">
            <summary>Gets or sets the configuration type for the beep.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.IsLoaded">
            <summary>Checks if the location is loaded.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.ContainerName">
            <summary>Gets or sets the name of the container.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.ErrorObject">
            <summary>Gets or sets the error object.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.JsonLoader">
            <summary>Gets or sets the JSON loader.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.Config">
            <summary>Gets or sets the configuration and settings object.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.Logger">
            <summary>Gets or sets the logger used for logging.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.Databasetypes">
            <summary>Gets or sets the list of database types.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.QueryList">
            <summary>Gets or sets the list of QuerySqlRepo objects.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.DataConnections">
            <summary>Gets or sets the list of data connections.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.WorkFlows">
            <summary>Gets or sets the list of workflows.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.CategoryFolders">
            <summary>Gets or sets the list of category folders.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.DataDriversClasses">
            <summary>Gets or sets the list of connection driver configurations.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.Projects">
            <summary>Gets or sets the list of root folders representing projects.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.Reportslist">
            <summary>Gets or sets the list of reports.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.ReportsDefinition">
            <summary>Gets or sets the list of app templates for generating reports.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.AIScriptslist">
            <summary>Gets or sets the list of AIScripts.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager">
            <summary>
            Manages drivers, workflows, reports, and other configuration components
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.AddDriver(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig)">
            <summary>
            Adds a driver to the connection drivers configuration.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.LoadConnectionDriversConfigValues">
            <summary>
            Loads connection drivers configuration values from JSON file and syncs with in-memory list.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveConnectionDriversConfigValues">
            <summary>
            Saves the configuration values of connection drivers to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.UpdateConfig(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig,TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig)">
            <summary>
            Helper method to update existing config.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.CreateFileExtensionString">
            <summary>
            Creates a string representing file extensions.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.ReadWorkFlows(System.String)">
            <summary>
            Reads workflow data from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveWorkFlows(System.String)">
            <summary>
            Saves workflows to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveReportsValues">
            <summary>
            Saves the values of the reports list to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.LoadReportsValues">
            <summary>
            Loads the values of reports from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveReportDefinitionsValues">
            <summary>
            Saves the values of report definitions to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.LoadReportsDefinitionValues">
            <summary>
            Loads the values of the reports definition from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveAIScriptsValues">
            <summary>
            Saves the values of AI scripts to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.LoadAIScriptsValues">
            <summary>
            Loads the values of AI scripts from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.ReadProjects">
            <summary>
            Reads projects from JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveProjects">
            <summary>
            Saves projects to JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.AddFolderCategory(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a folder category to the collection.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.RemoveFolderCategory(System.String,System.String,System.String)">
            <summary>
            Removes a folder category.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.LoadCategoryFoldersValues">
            <summary>
            Loads category folders from JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveCategoryFoldersValues">
            <summary>
            Saves category folders to JSON file.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager">
            <summary>
            Manages configuration paths with cross-platform compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.ResolveCrossPlatformPath(System.String,System.String)">
            <summary>
            Resolves the configuration path in a cross-platform compatible manner.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.GetDefaultApplicationDataPath">
            <summary>
            Gets the platform-appropriate application data directory.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.GetAssemblyLocationFallback">
            <summary>
            Attempts to get a path based on assembly location as a last resort.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.HasWriteAccess(System.String)">
            <summary>
            Checks if the current process has write access to the specified directory.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.SanitizeFolderName(System.String)">
            <summary>
            Sanitizes folder names for cross-platform compatibility.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.CreateDir(System.String)">
            <summary>
            Creates a directory at the specified path if it doesn't already exist.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.CreateDirConfig(System.String,TheTechIdea.Beep.Utilities.FolderFileTypes,TheTechIdea.Beep.ConfigUtil.ConfigandSettings)">
            <summary>
            Creates a directory configuration.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager">
            <summary>
            Manages data connections persistence and operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.DataConnectionExist(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Checks if a data connection exists.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.DataConnectionExist(System.String)">
            <summary>
            Checks if a data connection with the specified name exists.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.DataConnectionGuidExist(System.String)">
            <summary>
            Checks if a data connection with the specified GUID exists.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.AddDataConnection(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Adds a data connection to the list.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.UpdateDataConnection(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,System.String)">
            <summary>
            Updates an existing data connection.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.RemoveDataConnection(System.String)">
            <summary>
            Removes a connection by name.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.RemoveConnByGuidID(System.String)">
            <summary>
            Removes a connection by GUID.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.RemoveConnByID(System.Int32)">
            <summary>
            Removes a connection by ID.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.RemoveConnByName(System.String)">
            <summary>
            Removes a connection by name (simple version).
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.SaveDataConnectionsValues">
            <summary>
            Saves data connections to JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.LoadDataConnectionsValues">
            <summary>
            Loads data connections from JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.CopyConnectionProperties(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Copies properties from source to target connection.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager">
            <summary>
            Manages entity structures and mapping operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.EntityStructureExist(System.String,System.String,System.String)">
            <summary>
            Checks if the entity structure file exists.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.SaveEntityStructure(System.String,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Saves the structure of an entity to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.LoadEntityStructure(System.String,System.String,System.String)">
            <summary>
            Loads an entity structure from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.LoadDataSourceEntitiesValues(System.String)">
            <summary>
            Loads the values of a data source's entities from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.SaveDataSourceEntitiesValues(TheTechIdea.Beep.ConfigUtil.DatasourceEntities)">
            <summary>
            Saves the values of a DataSourceEntities object to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.RemoveDataSourceEntitiesValues(System.String)">
            <summary>
            Removes the values of a data source's entities.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.SaveMappingSchemaValue(System.String,TheTechIdea.Beep.Workflow.Map_Schema)">
            <summary>
            Saves a mapping schema value to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.LoadMappingSchema(System.String)">
            <summary>
            Loads a mapping schema from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.SaveMappingValues(System.String,System.String,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap)">
            <summary>
            Saves the mapping values for a specific entity.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.LoadMappingValues(System.String,System.String)">
            <summary>
            Loads the mapping values for a given entity from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.LoadTablesEntities">
            <summary>
            Loads the entities and their structures from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.SaveTablesEntities(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>
            Saves the table entities to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.WriteDataTypeFile(System.Collections.Generic.List{TheTechIdea.Beep.DriversConfigurations.DatatypeMapping},System.String)">
            <summary>
            Writes the data type mapping to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.ReadDataTypeFile(System.String)">
            <summary>
            Reads a JSON file containing datatype mappings and returns a list of DatatypeMapping objects.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager">
            <summary>
            Manages SQL queries and query repositories with enhanced capabilities through RDBMSHelper integration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetSql(TheTechIdea.Beep.Utilities.Sqlcommandtype,System.String,System.String,System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Generates a SQL query based on the specified parameters using RDBMSHelper for enhanced query generation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetSqlList(TheTechIdea.Beep.Utilities.Sqlcommandtype,System.String,System.String,System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Retrieves a list of SQL queries based on the specified parameters.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetSqlFromCustomQuery(TheTechIdea.Beep.Utilities.Sqlcommandtype,System.String,System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets the SQL statement from a custom query.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetSchemaOrDatabasesQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Gets the query for fetching schemas or databases that the specified user has access to using RDBMSHelper
            </summary>
            <param name="databaseType">The type of database system</param>
            <param name="userName">The username to check privileges for</param>
            <returns>A SQL query string to retrieve accessible schemas or databases</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetSchemaOrDatabasesQuerySafe(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Boolean)">
            <summary>
            Gets the query for fetching schemas or databases with built-in error handling using RDBMSHelper
            </summary>
            <param name="databaseType">The type of database system</param>
            <param name="userName">The username to check privileges for</param>
            <param name="throwOnError">Whether to throw exceptions for errors</param>
            <returns>A tuple containing the query string and success information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.ValidateSchemaQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Validates a database schema query using RDBMSHelper
            </summary>
            <param name="databaseType">Database type for the query</param>
            <param name="userName">Username used in the query</param>
            <param name="query">The query string to validate</param>
            <returns>A QueryValidationResult containing validation status and details</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GeneratePrimaryKeyQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates a SQL query to add a primary key to a table using RDBMSHelper
            </summary>
            <param name="databaseType">The type of RDBMS</param>
            <param name="tableName">The name of the table</param>
            <param name="primaryKey">The name of the primary key column</param>
            <param name="type">The data type of the primary key column</param>
            <returns>A SQL query to add a primary key</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateNextSequenceValueQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates a query to fetch the next value from a sequence using RDBMSHelper
            </summary>
            <param name="databaseType">The type of the database</param>
            <param name="sequenceName">The name of the sequence</param>
            <returns>A query string to fetch the next value from the sequence</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateLastIdentityQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates a query to fetch the last inserted identity value using RDBMSHelper
            </summary>
            <param name="databaseType">The type of RDBMS</param>
            <param name="sequenceName">The name of the sequence or generator</param>
            <returns>A query string to fetch the last inserted identity value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetPagingSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.Int32,System.Int32)">
            <summary>
            Gets the SQL syntax for paging results using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="pageNumber">Page number (1-based)</param>
            <param name="pageSize">Number of records per page</param>
            <returns>SQL paging syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetDropEntityQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates SQL to drop an entity using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="entityName">Name of the entity to drop</param>
            <returns>SQL statement to drop the entity</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateCreateIndexQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a query to create an index using RDBMSHelper
            </summary>
            <param name="databaseType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="indexName">Name of the index</param>
            <param name="columns">Array of column names</param>
            <param name="options">Optional index creation options</param>
            <returns>SQL statement to create the index</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetTransactionStatement(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.RDBMSHelpers.TransactionOperation)">
            <summary>
            Generates SQL statements for transaction operations using RDBMSHelper
            </summary>
            <param name="databaseType">Database type</param>
            <param name="operation">Transaction operation (Begin, Commit, Rollback)</param>
            <returns>SQL statement for the transaction operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.SafeQuoteValue(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Safely quotes a value for SQL queries using RDBMSHelper
            </summary>
            <param name="value">Value to quote</param>
            <param name="dataSourceType">Database type</param>
            <returns>Safely quoted value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.SupportsFeature(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature)">
            <summary>
            Determines if the database type supports specific features using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="feature">Feature to check</param>
            <returns>True if the feature is supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateCreateTableSQL(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates SQL to create a table based on an EntityStructure using RDBMSHelper
            </summary>
            <param name="entity">The EntityStructure containing entity definition</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateInsertSQL(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to insert records into an entity using RDBMSHelper
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="fieldValues">Dictionary containing field values to insert</param>
            <returns>A tuple containing the SQL statement, parameters, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateUpdateSQL(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to update records in an entity using RDBMSHelper
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="fieldValues">Dictionary containing field values to update</param>
            <param name="whereValues">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateUpdateSQLInternal(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Internal method to generate update SQL
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateDeleteSQL(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to delete records from an entity using RDBMSHelper
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="whereValues">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates an entity structure using RDBMSHelper
            </summary>
            <param name="entity">The EntityStructure to validate</param>
            <returns>Validation result with errors if any were found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.InitQueryList">
            <summary>
            Initializes the query list with enhanced queries from RDBMSHelper.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.MergeRDBMSHelperQueries">
            <summary>
            Merges additional queries from RDBMSHelper into the current QueryList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.SaveQueryFile">
            <summary>
            Saves the query list to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.LoadQueryFile">
            <summary>
            Loads a query file and returns a list of QuerySqlRepo objects.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.InitQueryDefaultValues">
            <summary>
            Initializes a list of default query values using RDBMSHelper for comprehensive coverage.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetFallbackQueries">
            <summary>
            Fallback method that returns the original hardcoded queries
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetTableExistsQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to check if a table exists using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table to check</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to check table existence</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetColumnInfoQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to get column information for a table using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to get column information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetRecordCountQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates SQL to get the count of records in a table using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <param name="whereClause">Optional WHERE clause</param>
            <returns>SQL statement to count records</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetTruncateTableQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to truncate a table using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table to truncate</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to truncate the table</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Utilities.DMTypeBuilder">
            <summary>
            A utility class for building and manipulating dynamic types.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Utilities.DMTypeBuilder.DMEEditor">
            <summary>Gets or sets the DMEEditor instance.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Utilities.DMTypeBuilder.typeCache">
            <summary>Caches generated types to improve performance.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Utilities.DMTypeBuilder.DataSourceNameSpace">
            <summary>Maintains namespace mappings for types.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.CreateNewObject(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityField})">
            <summary>
            Creates a new dynamic object based on the specified parameters.
            </summary>
            <param name="editor">The IDMEEditor instance.</param>
            <param name="classNamespace">The namespace for the class.</param>
            <param name="dataSourceName">The data source name to build namespace.</param>
            <param name="typeName">The name of the type.</param>
            <param name="fields">List of fields defining the type structure.</param>
            <returns>A new dynamic object of the generated type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.CreateNewObject(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityField})">
            <summary>
            Creates a new dynamic object based on the specified parameters.
            </summary>
            <param name="editor">The IDMEEditor instance.</param>
            <param name="classNamespace">The namespace for the class. Defaults to "TheTechIdea.Classes" if null.</param>
            <param name="typeName">The name of the type.</param>
            <param name="fields">List of fields defining the type structure.</param>
            <returns>A new dynamic object of the generated type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.GetOrCreateNamespace(System.String,System.String)">
            <summary>Generates or retrieves a namespace for a type.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.CompileResultType(System.String,System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityField})">
            <summary>Compiles a dynamic type with the specified fields.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.GetTypeBuilder(System.String,System.String,System.String)">
            <summary>Defines a dynamic TypeBuilder.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.CreateProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>Creates a property dynamically.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.ConvertPOCOClassToEntity(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>Converts a POCO class definition into an entity class.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.ResolveType(System.String)">
            <summary>Resolves .NET type names into actual `Type` objects.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.SanitizeFieldName(System.String)">
            <summary>Sanitizes field names to ensure they are valid .NET identifiers.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.LogError(System.String,System.Exception)">
            <summary>Logs errors safely in a thread-safe manner.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.CSVAnalyser">
            <summary>
            Analyzes CSV files for structure and optimization opportunities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVAnalyser.AnalyzeCSVFile(System.String,System.Char)">
            <summary>
            Analyzes a CSV file and returns detailed information and suggestions
            </summary>
            <param name="filePath">Path to the CSV file</param>
            <param name="delimiter">CSV delimiter character</param>
            <returns>CSV analysis results</returns>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.CSVAnalysisResult">
            <summary>
            Results of CSV file analysis
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.RowCount">
            <summary>
            Number of rows in the CSV file
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.ColumnCount">
            <summary>
            Number of columns in the CSV file
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.EstimatedSizeKB">
            <summary>
            File size in kilobytes
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.HasInconsistentColumnCount">
            <summary>
            Whether file has rows with inconsistent column counts
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.MaxColumns">
            <summary>
            Maximum number of columns in any row
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.MinColumns">
            <summary>
            Minimum number of columns in any row
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.LargeTextFieldCount">
            <summary>
            Count of very large text fields
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.HasQuotingIssues">
            <summary>
            Whether file has quoting issues
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.Errors">
            <summary>
            List of errors encountered during analysis
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.Suggestions">
            <summary>
            List of suggestions for optimization
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.ColumnAnalysis">
            <summary>
            Analysis results by column
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.ColumnAnalysis">
            <summary>
            Analysis data for a single column
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.Index">
            <summary>
            Column's position in the CSV file
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.DataType">
            <summary>
            Detected data type
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.NullPercentage">
            <summary>
            Percentage of rows where this column is null
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.MinLength">
            <summary>
            Minimum value length
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.MaxLength">
            <summary>
            Maximum value length
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.UniqueValueCount">
            <summary>
            Number of unique values (capped at 100)
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.ColumnStats">
            <summary>
            Column statistics used during analysis
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.DataType">
            <summary>
            Data types detected in CSV columns
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.Unknown">
            <summary>
            Unknown data type
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.String">
            <summary>
            String data type
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.Integer">
            <summary>
            Integer data type
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.Decimal">
            <summary>
            Decimal data type
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.Boolean">
            <summary>
            Boolean data type
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.DateTime">
            <summary>
            DateTime data type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVDataSource.CreateEntityAs(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Creates a new entity or updates an existing one based on the provided structure.
            If the entity already exists, its fields will be updated (added, removed) to match the new structure.
            </summary>
            <param name="entity">The structure of the entity to create or update</param>
            <returns>True if creation or update is successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Retrieves data from a CSV file with optional filtering
            </summary>
            <param name="EntityName">Name of the entity (CSV file) to query</param>
            <param name="filter">List of filters to apply to the data</param>
            <returns>An ObservableBindingList containing the filtered data</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVDataSource.DetectEncoding(System.String)">
            <summary>
            Sanitizes column names according to configured rules
            </summary>
            <summary>
            Detects file encoding from a CSV file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVDataSource.ValidateRow(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Validates a data row against the entity structure
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVDataSource.GetDataReader(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns a DataReader-like interface for efficiently working with large CSV files
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.CSVTypeMapper">
            <summary>
            Provides type conversion utilities for CSV data
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVTypeMapper.MapToCSVType(System.Type)">
            <summary>
            Maps a .NET type to a CSV field type string
            </summary>
            <param name="dotNetType">The .NET type to map</param>
            <returns>CSV type string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVTypeMapper.MapToNetType(System.String)">
            <summary>
            Maps a CSV field type string to a .NET type
            </summary>
            <param name="csvType">CSV type string</param>
            <returns>.NET type</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVTypeMapper.ConvertValue(System.String,System.Type)">
            <summary>
            Converts a string value to the appropriate .NET type
            </summary>
            <param name="value">String value to convert</param>
            <param name="targetType">Target .NET type</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVTypeMapper.FormatValueForCSV(System.Object,System.Type)">
            <summary>
            Formats a value for CSV output
            </summary>
            <param name="value">The value to format</param>
            <param name="sourceType">The source type</param>
            <returns>Formatted string value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVTypeMapper.GetCSharpTypeName(System.String)">
            <summary>
            Returns the appropriate C# type name for a given CSV field type
            </summary>
            <param name="csvType">CSV field type</param>
            <returns>C# type name</returns>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.ICSVDataReader">
            <summary>
            Interface for CSV data reader to provide streaming access to CSV files
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.Read">
            <summary>
            Advances the reader to the next record
            </summary>
            <returns>True if there are more records, false if at the end</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value at the specified column ordinal
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value as an object</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.GetValue(System.String)">
            <summary>
            Gets the value for the specified column name
            </summary>
            <param name="columnName">The column name</param>
            <returns>The value as an object</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.IsDBNull(System.Int32)">
            <summary>
            Determines if the column contains null value
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>True if null, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.IsDBNull(System.String)">
            <summary>
            Determines if the column contains null value
            </summary>
            <param name="columnName">The column name</param>
            <returns>True if null, false otherwise</returns>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ICSVDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the column at the specified ordinal
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The column name</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the ordinal of the specified column name
            </summary>
            <param name="name">The column name</param>
            <returns>The zero-based column ordinal</returns>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.CSVDataReader">
            <summary>
            Implementation of CSV data reader for streaming large files
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.IO.Stream)">
            <summary>
            Constructs a parser from the specified input stream.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructs a parser from the specified input stream with the specified encoding.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructs a parser from the specified input stream with the specified encoding and byte order mark detection option.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Constructs a parser from the specified input stream with the specified encoding and byte order mark detection option, and optionally leaves the stream open.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.String)">
            <summary>
            Constructs a parser from the specified input file path.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Constructs a parser from the specified input file path with the specified encoding.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructs a parser from the specified input file path with the specified encoding and byte order mark detection option.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.IO.TextReader)">
            <summary>
            Constructs a parser from the specified input text reader.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.WriteEntityStructureToFile(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.Object)" -->
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.EndOfData">
            <summary>
            True if there are non-empty lines between the current cursor position and the end of the file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ReadFields">
            <summary>
            Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.
            </summary>
            <returns>An array of strings that contains field values for the current line, or null if <see cref="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.EndOfData"/> is true.</returns>
            <exception cref="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException">if the parse of the current line failed</exception>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.LineNumber">
            <summary>
            The number of the line that will be returned by <see cref="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ReadFields"/> (starting at 1), or -1 if there are no more lines.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.Close">
            <summary>
            Closes the current <see cref="T:TheTechIdea.Beep.FileManager.CsvTextFieldParser"/> object.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.Dispose">
            <summary>
            Closes and disposes the current <see cref="T:TheTechIdea.Beep.FileManager.CsvTextFieldParser"/> object.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.Dispose(System.Boolean)">
            <summary>
            Disposes of the current <see cref="T:TheTechIdea.Beep.FileManager.CsvTextFieldParser"/> object.
            </summary>
            <param name="disposing">true if called from <see cref="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.Dispose"/>, or false if called from a finalizer</param>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ErrorLine">
            <summary>
            The line that caused the most recent <see cref="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException"/>.
            </summary>
            <remarks>
            If no <see cref="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException"/> exceptions have been thrown, an empty string is returned.
            The <see cref="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ErrorLineNumber"/> property can be used to display the number of the line that caused the exception.
            </remarks>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ErrorLineNumber">
            <summary>
            Returns the number of the line that caused the most recent <see cref="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException"/> exception.
            </summary>
            <remarks>
            If no <see cref="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException"/> exceptions have been thrown, -1 is returned.
            The <see cref="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ErrorLine"/> property can be used to display the number of the line that caused the exception.
            Blank lines and comments are not ignored when determining the line number.
            </remarks>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.CompatibilityMode">
            <summary>
            True if this parser should exactly reproduce the behavior of the <code>Microsoft.VisualBasic.FileIO.TextFieldParser</code>.
            Defaults to <code>false</code>.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.Delimiters">
            <summary>
            Defines the delimiters for a text file.
            Default is a comma.
            </summary>
            <remarks>
            This is defined as an array of strings for compatibility with <code>Microsoft.VisualBasic.FileIO.TextFieldParser</code>,
            but this parser only supports one single-character delimiter.
            </remarks>
            <exception cref="T:System.ArgumentException">A delimiter value is set to a newline character, an empty string, or null.</exception>
            <exception cref="T:System.NotSupportedException">The delimiters are set to an array that does not contain exactly one element with exactly one character.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.SetDelimiter(System.Char)">
            <summary>
            Sets the delimiter character used by this parser.
            Default is a comma.
            </summary>
            <exception cref="T:System.ArgumentException">The delimiter character is set to a newline character.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.SetQuoteCharacter(System.Char)">
            <summary>
            Sets the quote character used by this parser, and also sets the quote escape character to match if it previously matched.
            Default is a double quote character.
            </summary>
            <exception cref="T:System.ArgumentException">The quote character is set to a newline character.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.SetQuoteEscapeCharacter(System.Char)">
            <summary>
            Sets the quote escape character used by this parser.
            Default is the same as the quote character, a double quote character.
            </summary>
            <exception cref="T:System.ArgumentException">The quote escape character is set to a newline character.</exception>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.HasFieldsEnclosedInQuotes">
            <summary>
            Denotes whether fields are enclosed in quotation marks when a CSV file is being parsed.
            Defaults to <code>true</code>.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.TrimWhiteSpace">
            <summary>
            Indicates whether leading and trailing white space should be trimmed from field values.
            Defaults to <code>false</code>.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException">
            <summary>
            An exception that is thrown when the <see cref="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ReadFields"/> method cannot parse a row using the specified format.
            </summary>
            <remarks>
            Based on <code>Microsoft.VisualBasic.FileIO.MalformedLineException.MalformedLineException</code>.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvMalformedLineException.#ctor(System.String,System.Int64)">
            <summary>
            Constructs an exception with a specified message and a line number.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvMalformedLineException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
            Constructs an exception with a specified message, a line number, and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvMalformedLineException.LineNumber">
            <summary>
            The line number of the malformed line.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.DataView.DataViewConnection">
            <summary>
            Represents a connection to a data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.InMemory">
            <summary>
            Gets or sets a value indicating whether the connection is in memory.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.ConnectionProp">
            <summary>Gets or sets the connection properties.</summary>
            <value>The connection properties.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.DataSourceDriver">
            <summary>Gets or sets the configuration for the data source driver.</summary>
            <value>The configuration for the data source driver.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.ConnectionStatus">
            <summary>Gets or sets the current connection status.</summary>
            <value>The current connection status.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.DMEEditor">
            <summary>Gets or sets the DME editor.</summary>
            <value>The DME editor.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.ID">
            <summary>Gets or sets the ID.</summary>
            <value>The ID.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.GuidID">
            <summary>Gets or sets the GUID ID.</summary>
            <value>The GUID ID.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.Logger">
            <summary>Gets or sets the logger for the current object.</summary>
            <value>The logger.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.ErrorObject">
            <summary>Gets or sets the error object.</summary>
            <value>The error object.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.DbConn">
            <summary>Gets or sets the database connection.</summary>
            <value>The database connection.</value>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.OpenConnection">
            <summary>Opens a connection to a database.</summary>
            <returns>The state of the connection after opening.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.ReplaceValueFromConnectionString">
            <summary>Replaces a specific value in a connection string.</summary>
            <returns>The modified connection string.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.OpenConn">
            <summary>Opens a connection to the database.</summary>
            <returns>The connection state after opening the connection.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.OpenConnection(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>Opens a connection to a database.</summary>
            <param name="dbtype">The type of the database.</param>
            <param name="host">The host name or IP address of the database server.</param>
            <param name="port">The port number of the database server.</param>
            <param name="database">The name of the database.</param>
            <param name="userid">The user ID for authentication.</param>
            <param name="password">The password for authentication.</param>
            <param name="parameters">Additional parameters for the connection.</param>
            <returns>The connection state after opening the connection.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.OpenConnection(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>Opens a connection to a database.</summary>
            <param name="dbtype">The type of the database.</param>
            <param name="connectionstring">The connection string for the database.</param>
            <returns>The state of the connection.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.CloseConn">
            <summary>Closes the connection to the database.</summary>
            <returns>The current state of the connection after closing.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.DataView.DataViewDataSource">
            <summary>
            Represents a data source for a data view.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.DataView.DataViewDataSource.PassEvent">
            <summary>
            Event that is raised when a specific event is passed.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.DatasourceType">
            <summary>Gets or sets the type of the data source.</summary>
            <value>The type of the data source.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Category">
            <summary>Gets or sets the category of the datasource.</summary>
            <value>The category of the datasource.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Dataconnection">
            <summary>Gets or sets the data connection.</summary>
            <value>The data connection.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.DatasourceName">
            <summary>Gets or sets the name of the data source.</summary>
            <value>The name of the data source.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ErrorObject">
            <summary>Gets or sets the error object.</summary>
            <value>The error object.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Id">
            <summary>Gets or sets the ID.</summary>
            <value>The ID.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ID">
            <summary>Gets or sets the ID.</summary>
            <value>The ID.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.GuidID">
            <summary>Gets or sets the GUID ID.</summary>
            <value>The GUID ID.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Logger">
            <summary>Gets or sets the logger for the current object.</summary>
            <value>The logger.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.EntitiesNames">
            <summary>Gets or sets the list of entity names.</summary>
            <value>The list of entity names.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.DMEEditor">
            <summary>Gets or sets the DME editor.</summary>
            <value>The DME editor.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ConnectionStatus">
            <summary>Gets or sets the current connection status.</summary>
            <value>The current connection status.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.SourceEntityData">
            <summary>Gets or sets the source entity data.</summary>
            <value>The source entity data.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.DataView">
            <summary>Gets or sets the data view for the IDM.</summary>
            <value>The data view for the IDM.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ColumnDelimiter">
            <summary>Gets or sets the column delimiter used in data processing.</summary>
            <value>The column delimiter.</value>
            <remarks>The default value is "''".</remarks>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ParameterDelimiter">
            <summary>Gets or sets the delimiter used for separating parameters.</summary>
            <value>The parameter delimiter.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Entities">
            <summary>Gets or sets the list of entity structures.</summary>
            <value>The list of entity structures.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ViewName">
            <summary>Gets or sets the name of the view.</summary>
            <value>The name of the view.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ViewID">
            <summary>Gets or sets the ID of the view.</summary>
            <value>The ID of the view.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Viewtype">
            <summary>The type of view.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Editable">
            <summary>Gets or sets a value indicating whether the object is editable.</summary>
            <value><c>true</c> if the object is editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.EntityDataSourceID">
            <summary>Gets or sets the ID of the entity data source.</summary>
            <value>The ID of the entity data source.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.CompositeLayerDataSourceID">
            <summary>Gets or sets the ID of the composite layer data source.</summary>
            <value>The ID of the composite layer data source.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.DataViewDataSourceID">
            <summary>Gets or sets the ID of the data source for the DataView.</summary>
            <value>The ID of the data source.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.VID">
            <summary>The Vendor ID (VID) of a device.</summary>
            <remarks>
            The Vendor ID (VID) is a unique identifier assigned to a device manufacturer by the USB Implementers Forum (USB-IF).
            It is used to identify the manufacturer of a USB device.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.#ctor(System.String,TheTechIdea.Beep.Logger.IDMLogger,TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.ConfigUtil.IErrorsInfo)">
            <summary>
            Initializes a new instance of the DataViewDataSource class.
            </summary>
            <param name="datasourcename">The name of the data source.</param>
            <param name="logger">The logger object used for logging.</param>
            <param name="pDMEEditor">The DME editor object.</param>
            <param name="pDatasourceType">The type of the data source.</param>
            <param name="per">The error information object.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.BeginTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Begins a transaction with the specified arguments.
            </summary>
            <param name="args">The arguments passed to the transaction.</param>
            <returns>An object that provides information about any errors that occurred during the transaction.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.EndTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>Ends a transaction and returns information about any errors that occurred.</summary>
            <param name="args">The arguments passed to the transaction.</param>
            <returns>An object containing information about any errors that occurred during the transaction.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.Commit(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>Commits the changes made with the provided arguments.</summary>
            <param name="args">The arguments containing the changes to be committed.</param>
            <returns>An object implementing the IErrorsInfo interface that provides information about any errors that occurred during the commit process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntitesList">
            <summary>Returns a list of entities.</summary>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetScalarAsync(System.String)">
            <summary>Retrieves a scalar value asynchronously based on the provided query.</summary>
            <param name="query">The query used to retrieve the scalar value.</param>
            <returns>A task representing the asynchronous operation. The task result is the scalar value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetScalar(System.String)">
            <summary>Gets the scalar value from a given query.</summary>
            <param name="query">The query to retrieve the scalar value.</param>
            <returns>The scalar value obtained from the query.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>Retrieves an entity based on the specified entity name and filter.</summary>
            <param name="EntityName">The name of the entity to retrieve.</param>
            <param name="filter">A list of filters to apply to the entity.</param>
            <returns>The retrieved entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter},System.Int32,System.Int32)">
            <summary>Retrieves an entity based on the specified entity name and filter.</summary>
            <param name="EntityName">The name of the entity to retrieve.</param>
            <param name="filter">A list of filters to apply to the entity.</param>
            <returns>The retrieved entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.EntityListIndex(System.Int32)">
            <summary>Returns the index of an entity in the entity list.</summary>
            <param name="entityid">The ID of the entity.</param>
            <returns>The index of the entity in the entity list.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.EntityListIndex(System.String)">
            <summary>Returns the index of an entity in the entity list.</summary>
            <param name="entityname">The name of the entity.</param>
            <returns>The index of the entity in the entity list.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityStructure(System.String,System.Boolean)">
            <summary>Retrieves the structure of an entity.</summary>
            <param name="EntityName">The name of the entity.</param>
            <param name="refresh">Optional. Specifies whether to refresh the structure. Default is false.</param>
            <returns>The structure of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityType(System.String)">
            <summary>Gets the type of an entity based on its name.</summary>
            <param name="entityname">The name of the entity.</param>
            <returns>The type of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetChildTablesList(System.String,System.String,System.String)">
            <summary>Retrieves a list of child tables for a given parent table.</summary>
            <param name="tablename">The name of the parent table.</param>
            <param name="SchemaName">The name of the schema containing the parent table.</param>
            <param name="Filterparamters">Additional filter parameters to refine the search.</param>
            <returns>A list of ChildRelation objects representing the child tables.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityforeignkeys(System.String,System.String)">
            <summary>Retrieves the foreign keys of an entity.</summary>
            <param name="entityname">The name of the entity.</param>
            <param name="SchemaName">The name of the schema.</param>
            <returns>A list of RelationShipKeys representing the foreign keys of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.ExecuteSql(System.String)">
            <summary>Executes the given SQL statement.</summary>
            <param name="sql">The SQL statement to execute.</param>
            <returns>An object containing information about any errors that occurred during execution.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.CreateEntityAs(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Creates an entity using the provided entity structure.</summary>
            <param name="entity">The structure of the entity to be created.</param>
            <returns>True if the entity was successfully created, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.CheckEntityExist(System.String)">
            <summary>Checks if an entity with the given name exists.</summary>
            <param name="entityname">The name of the entity to check.</param>
            <returns>True if the entity exists, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetDataSourceObject(System.String)">
            <summary>Gets the data source object for a given entity name.</summary>
            <param name="entityname">The name of the entity.</param>
            <returns>The data source object associated with the given entity name.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.Openconnection">
            <summary>Opens a connection to a database.</summary>
            <returns>The state of the connection.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.Closeconnection">
            <summary>Closes the connection and returns the current state of the connection.</summary>
            <returns>The current state of the connection after closing.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.RunQuery(System.String)">
            <summary>Executes a query and returns the result.</summary>
            <param name="qrystr">The query string to execute.</param>
            <returns>The result of the query execution.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.UpdateEntities(System.String,System.Object,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>Updates entities in the system.</summary>
            <param name="EntityName">The name of the entity to update.</param>
            <param name="UploadData">The data to upload for updating the entities.</param>
            <param name="progress">An object used to report progress during the update process.</param>
            <returns>An object containing information about any errors that occurred during the update.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.UpdateEntity(System.String,System.Object)">
            <summary>Updates an entity with the provided data.</summary>
            <param name="EntityName">The name of the entity to update.</param>
            <param name="UploadDataRow">The data to update the entity with.</param>
            <returns>An object containing information about any errors that occurred during the update.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.DeleteEntity(System.String,System.Object)">
            <summary>Deletes an entity from the specified entity name and data row.</summary>
            <param name="EntityName">The name of the entity to delete.</param>
            <param name="DeletedDataRow">The data row representing the entity to delete.</param>
            <returns>An object containing information about any errors that occurred during the deletion process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure,System.Boolean)">
            <summary>Gets the structure of an entity.</summary>
            <param name="fnd">The entity structure to retrieve.</param>
            <param name="refresh">Optional. Specifies whether to refresh the entity structure.</param>
            <returns>The structure of the specified entity.</returns>
            <remarks>
            If the entity structure is of type Table, it retrieves the entity structure from the data source object.
            If the entity structure is of type Query, Code, File, or Url, it returns the entity structure from the Entities collection.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.RunScript(TheTechIdea.Beep.Editor.ETLScriptDet)">
            <summary>Runs an ETL script.</summary>
            <param name="dDLScripts">The ETL script to run.</param>
            <returns>An object containing information about any errors that occurred during script execution.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.CreateEntities(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>Creates entities based on the provided list of entity structures.</summary>
            <param name="entities">A list of entity structures.</param>
            <returns>An object that contains information about any errors that occurred during the creation process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetCreateEntityScript(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>Generates a list of ETL script details for creating entities.</summary>
            <param name="entities">Optional. A list of entity structures. If provided, the script details will be generated for these entities only. If not provided, script details will be generated for all entities.</param>
            <returns>A list of ETL script details for creating entities.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.InsertEntity(System.String,System.Object)">
            <summary>Inserts an entity into the database.</summary>
            <param name="EntityName">The name of the entity.</param>
            <param name="InsertedData">The data to be inserted.</param>
            <returns>An object containing information about any errors that occurred during the insertion process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityAsync(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>Retrieves an entity asynchronously.</summary>
            <param name="EntityName">The name of the entity to retrieve.</param>
            <param name="Filter">A list of filters to apply to the entity.</param>
            <returns>A task representing the asynchronous operation. The result is the retrieved entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.RemoveEntity(System.Int32)">
            <summary>Removes an entity with the specified ID.</summary>
            <param name="EntityID">The ID of the entity to remove.</param>
            <returns>An object containing information about any errors that occurred during the removal process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.RemoveChildEntities(System.Int32)">
            <summary>Removes child entities associated with a parent entity.</summary>
            <param name="EntityID">The ID of the parent entity.</param>
            <returns>An object containing information about any errors that occurred during the removal process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GenerateViewFromTable(System.String,TheTechIdea.Beep.IDataSource,System.String,System.String,System.String)">
            <summary>
            Generates a view from a table using the specified parameters.
            </summary>
            <param name="viewname">The name of the view to be generated.</param>
            <param name="SourceConnection">The data source connection object.</param>
            <param name="tablename">The name of the table to generate the view from.</param>
            <param name="SchemaName">The name of the schema containing the table.</param>
            <param name="Filterparamters">The filter parameters to be applied to the view.</param>
            <returns>The number of rows affected by the view generation process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GenerateDataView(TheTechIdea.Beep.IDataSource,System.String,System.String,System.String)">
            <summary>
            Generates a data view based on the provided data source, table name, schema name, and filter parameters.
            </summary>
            <param name="conn">The data source to generate the data view from.</param>
            <param name="tablename">The name of the table to generate the data view for.</param>
            <param name="SchemaName">The name of the schema to generate the data view for.</param>
            <param name="Filterparamters">The filter parameters to apply to the data view.</param>
            <returns>An integer representing the result of the data view generation.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GenerateView(System.String,System.String)">
            <summary>Generates a data view based on the specified view name and connection name.</summary>
            <param name="ViewName">The name of the view.</param>
            <param name="ConnectionName">The name of the connection.</param>
            <returns>The generated data view.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GenerateDataViewForChildNode(TheTechIdea.Beep.IDataSource,System.Int32,System.String,System.String,System.String)">
            <summary>
            Generates a data view for a child node based on the provided parameters.
            </summary>
            <param name="conn">The data source connection.</param>
            <param name="pid">The parent ID.</param>
            <param name="tablename">The name of the table.</param>
            <param name="SchemaName">The name of the schema.</param>
            <param name="Filterparamters">The filter parameters.</param>
            <returns>An object representing the generated data view.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.AddEntityAsChild(TheTechIdea.Beep.IDataSource,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds an entity as a child to a specified parent table.</summary>
            <param name="conn">The data source connection.</param>
            <param name="tablename">The name of the table to add the entity to.</param>
            <param name="SchemaName">The schema name of the table.</param>
            <param name="Filterparamters">The filter parameters to apply.</param>
            <param name="viewindex">The index of the view.</param>
            <param name="ParentTableIndex">The index of the parent table.</param>
            <returns>The index of the added entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.AddEntitytoDataView(TheTechIdea.Beep.IDataSource,System.String,System.String,System.String)">
            <summary>Adds an entity to a data view.</summary>
            <param name="conn">The data source connection.</param>
            <param name="tablename">The name of the table.</param>
            <param name="SchemaName">The name of the schema.</param>
            <param name="Filterparamters">The filter parameters.</param>
            <returns>The number of entities added to the data view.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.AddEntitytoDataView(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Adds an entity to the data view.</summary>
            <param name="maintab">The entity structure to add.</param>
            <returns>The index of the added entity in the data view.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GeticonForViewType(TheTechIdea.Beep.Utilities.ViewType)">
            <summary>Returns the icon associated with a specific view type.</summary>
            <param name="v">The view type.</param>
            <returns>The icon associated with the view type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.SetupEntityInView(TheTechIdea.Beep.DataBase.IDMDataView,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Sets up the entity structure in a data view.
            </summary>
            <param name="v">The data view.</param>
            <param name="Rootnamespacelist">The list of root namespaces.</param>
            <param name="childtable">The name of the child table.</param>
            <param name="parenttable">The name of the parent table.</param>
            <param name="childcolumn">The name of the child column.</param>
            <param name="parentcolumn">The name of the parent column.</param>
            <param name="pid">The parent ID.</param>
            <param name="Datasourcename">The name of the data source.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntity(System.String)">
            <summary>Retrieves the structure of an entity.</summary>
            <param name="entityname">The name of the entity.</param>
            <returns>The structure of the specified entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.NextHearId">
            <summary>Generates the next unique hear ID.</summary>
            <returns>An integer representing the next hear ID.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetDataSetForView(System.String)">
            <summary>Retrieves a list of data sets for a given view.</summary>
            <param name="viewname">The name of the view.</param>
            <returns>A list of data sets associated with the specified view.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.CreateTableFromEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Creates a DataTable from an EntityStructure.</summary>
            <param name="e">The EntityStructure object.</param>
            <returns>A DataTable representing the structure of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetChildTablesForDataset(TheTechIdea.Beep.IDataSource,System.Data.DataSet@,TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.Int32)">
            <summary>
            Retrieves the child tables for a given dataset and parent table.
            </summary>
            <param name="ds">The data source.</param>
            <param name="dataset">The dataset to retrieve child tables for.</param>
            <param name="parenttb">The parent table.</param>
            <param name="ls">The list of child tables.</param>
            <param name="parentid">The ID of the parent table.</param>
            <returns>An instance of IErrorsInfo representing the child tables.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.WriteDataViewFile(System.String)">
            <summary>Writes the content of a DataView to a file.</summary>
            <param name="filename">The name of the file to write to.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.WriteDataViewFile(System.String,System.String)">
            <summary>Writes a DataView file to the specified path and filename.</summary>
            <param name="path">The path where the file will be written.</param>
            <param name="filename">The name of the file.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.ReadDataViewFile(System.String)">
            <summary>Reads a data view file from the specified path and filename.</summary>
            <param name="pathandfilename">The path and filename of the data view file.</param>
            <returns>The IDMDataView object representing the data view file.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.LoadView">
            <summary>Loads a view and returns information about any errors that occurred.</summary>
            <returns>An object containing information about any errors that occurred during the view loading process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityIdx(System.String)">
            <summary>Returns the index of the specified entity.</summary>
            <param name="entityName">The name of the entity.</param>
            <returns>The index of the entity.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager">
            <summary>
            BeepSyncManager - A clean, modern sync manager based on best practices
            Consolidates functionality from DataSyncManager and DataSyncService with helper-based architecture
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.Editor">
            <summary>
            DME Editor instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SyncSchemas">
            <summary>
            Collection of sync schemas
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.IsPaused">
            <summary>
            Indicates if sync operations are currently paused
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.IsCancelled">
            <summary>
            Indicates if sync operations have been cancelled
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.ApplyDefaultsOnSync">
            <summary>
            Enable automatic application of default values during sync operations
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.ApplyDefaultsOnlyToEmptyFields">
            <summary>
            Apply defaults only to empty/null fields (true) or overwrite existing values (false)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.AutoCreateAuditDefaults">
            <summary>
            Enable automatic creation of audit field defaults for sync operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initialize BeepSyncManager with editor and create helper instances
            </summary>
            <param name="editor">DME Editor instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.InitializeDefaultsManager">
            <summary>
            Initialize DefaultsManager and configure sync-specific defaults
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.LogExistingDefaults">
            <summary>
            Log information about existing defaults across all data sources
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SyncDataAsync(TheTechIdea.Beep.Editor.DataSyncSchema,System.Threading.CancellationToken,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Synchronize data based on schema - async version with full error handling and progress reporting
            </summary>
            <param name="schema">Sync schema to execute</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="progress">Progress reporter</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SyncData(TheTechIdea.Beep.Editor.DataSyncSchema,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Synchronize data - synchronous version
            </summary>
            <param name="schema">Sync schema to execute</param>
            <param name="progress">Progress reporter</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SyncAllSchemasAsync(System.Threading.CancellationToken,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Synchronize all schemas
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <param name="progress">Progress reporter</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.AddSyncSchema(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Add sync schema to collection
            </summary>
            <param name="schema">Schema to add</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.RemoveSyncSchema(System.String)">
            <summary>
            Remove sync schema from collection
            </summary>
            <param name="schemaId">ID of schema to remove</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.UpdateSyncSchema(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Update existing sync schema
            </summary>
            <param name="schema">Updated schema</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.GetSchema(System.String)">
            <summary>
            Get schema by ID
            </summary>
            <param name="schemaId">Schema ID</param>
            <returns>Schema or null if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.ValidateSchema(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Validate schema using validation helper
            </summary>
            <param name="schema">Schema to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SaveSchemasAsync">
            <summary>
            Save all schemas to storage
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.LoadSchemasAsync">
            <summary>
            Load schemas from storage
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SaveSchemas">
            <summary>
            Save schemas synchronously
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.LoadSchemas">
            <summary>
            Load schemas synchronously
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.PauseSync">
            <summary>
            Pause sync operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.ResumeSync">
            <summary>
            Resume sync operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.CancelSync">
            <summary>
            Cancel all sync operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.ProcessSingleRecordAsync(TheTechIdea.Beep.Editor.DataSyncSchema,System.Object,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>
            Process a single record through the sync pipeline
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.ApplyDefaultsToRecord(System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Apply default values to a record during sync operations
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity</param>
            <param name="record">Record to apply defaults to</param>
            <param name="context">Additional context for rule resolution</param>
            <returns>Record with defaults applied</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.HasDefaultsForDataSource(System.String)">
            <summary>
            Check if there are any defaults configured for the specified data source
            </summary>
            <param name="dataSourceName">Name of the data source to check</param>
            <returns>True if defaults exist, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.HasDefaultsConfigured(System.String,System.String)">
            <summary>
            Check if there are defaults configured for a specific data source and entity
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity (optional, for logging purposes)</param>
            <returns>True if defaults exist, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.GetSyncKeyValue(System.Object,System.String)">
            <summary>
            Get sync key value from source record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.NormalizeToEnumerable(System.Object)">
            <summary>
            Normalize data to enumerable for consistent processing
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.CreateErrorResult(System.String)">
            <summary>
            Create error result
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.CreateSuccessResult(System.String)">
            <summary>
            Create success result
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.Dispose(System.Boolean)">
            <summary>
            Dispose managed resources
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.Dispose">
            <summary>
            Dispose the manager and clean up resources
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SyncData(System.String)">
            <summary>
            Synchronize data by schema ID - backward compatibility
            </summary>
            <param name="schemaId">Schema ID</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SyncData(System.String,System.String,System.String)">
            <summary>
            Synchronize data with parameters - backward compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SyncData(System.String,System.String,System.String,System.String)">
            <summary>
            Synchronize data with sync field parameters - backward compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SyncData(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Synchronize data with full parameters - backward compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.AddFilter(System.String,TheTechIdea.Beep.Report.AppFilter)">
            <summary>
            Add filter to schema - backward compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.RemoveFilter(System.String,System.String)">
            <summary>
            Remove filter from schema - backward compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.AddFieldMapping(System.String,TheTechIdea.Beep.Editor.FieldSyncData)">
            <summary>
            Add field mapping to schema - backward compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SyncAllData">
            <summary>
            Synchronize all schemas - backward compatibility (sync version)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.GetRecordsFromSourceData(TheTechIdea.Beep.Editor.DataSyncSchema,System.String)" -->
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.GetNewRecordsFromSourceData(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Get new records since last sync - enhanced version from DataSyncManager
            </summary>
            <param name="schema">Sync schema</param>
            <returns>New records</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.GetUpdatedRecordsFromSourceData(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Get updated records since last sync - enhanced version from DataSyncManager
            </summary>
            <param name="schema">Sync schema</param>
            <returns>Updated records</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.BulkSyncAsync(TheTechIdea.Beep.Editor.DataSyncSchema,System.Int32,System.Threading.CancellationToken,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Bulk synchronize multiple records with enhanced error handling and metrics
            </summary>
            <param name="schema">Sync schema</param>
            <param name="batchSize">Number of records to process in each batch</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="progress">Progress reporter</param>
            <returns>Sync metrics and results</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.ProcessBatchAsync(TheTechIdea.Beep.Editor.DataSyncSchema,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
            Process a batch of records
            </summary>
            <param name="schema">Sync schema</param>
            <param name="records">Records to process</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Tuple with success count and error count</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.ConfigureSyncDefaults(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.String,System.Boolean}})">
            <summary>
            Configure default values for a data source used in sync operations
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity</param>
            <param name="defaults">Dictionary of field names and default configurations</param>
            <returns>Configuration result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.SetupAuditDefaults(System.String,System.String)">
            <summary>
            Set up standard audit defaults for sync operations
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity</param>
            <returns>Configuration result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.GetEntityDefaults(System.String,System.String)">
            <summary>
            Get configured default values for an entity
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity</param>
            <returns>Dictionary of configured defaults</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.AutoConfigureSchemaDefaults(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Auto-configure defaults for a sync schema
            </summary>
            <param name="schema">Sync schema to configure defaults for</param>
            <returns>Configuration result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.BeepSyncManager.ValidateSchemaDefaults(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Validate that defaults are properly configured for a sync schema
            </summary>
            <param name="schema">Sync schema to validate</param>
            <returns>Validation result with details about defaults configuration</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.Helpers.DataSourceHelper">
            <summary>
            Helper class for data source operations in sync processes
            Based on patterns from DataSyncManager and DataSyncService
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.DataSourceHelper.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes a new instance of the DataSourceHelper class
            </summary>
            <param name="editor">The DME editor instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.DataSourceHelper.GetDataSource(System.String)">
            <summary>
            Get data source by name with validation and error logging
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <returns>IDataSource instance or null if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.DataSourceHelper.ValidateDataSourceConnection(System.String)">
            <summary>
            Validate that a data source exists and is accessible
            </summary>
            <param name="dataSourceName">Name of the data source to validate</param>
            <returns>True if data source is valid and accessible</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.DataSourceHelper.GetEntityDataAsync(System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Get entity data from source with filters - async version
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity</param>
            <param name="filters">Optional filters to apply</param>
            <returns>Entity data or null if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.DataSourceHelper.InsertEntityAsync(System.String,System.String,System.Object)">
            <summary>
            Insert entity data into destination - async version
            </summary>
            <param name="dataSourceName">Name of the destination data source</param>
            <param name="entityName">Name of the entity</param>
            <param name="entity">Entity data to insert</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.DataSourceHelper.UpdateEntityAsync(System.String,System.String,System.Object)">
            <summary>
            Update entity data in destination - async version
            </summary>
            <param name="dataSourceName">Name of the destination data source</param>
            <param name="entityName">Name of the entity</param>
            <param name="entity">Entity data to update</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.DataSourceHelper.EntityExistsAsync(System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Check if entity exists in destination based on filters
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity</param>
            <param name="filters">Filters to identify the entity</param>
            <returns>True if entity exists</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.DataSourceHelper.CreateErrorResult(System.String)">
            <summary>
            Create error result for failed operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.DataSourceHelper.CreateSuccessResult(System.String)">
            <summary>
            Create success result for successful operations
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.Helpers.FieldMappingHelper">
            <summary>
            Helper class for field mapping operations
            Based on mapping patterns from DataSyncManager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.FieldMappingHelper.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Editor.BeepSync.Interfaces.IDataSourceHelper)">
            <summary>
            Initializes a new instance of the FieldMappingHelper class
            </summary>
            <param name="editor">The DME editor instance</param>
            <param name="dataSourceHelper">The data source helper instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.FieldMappingHelper.MapFields(System.Object,System.Object,System.Collections.Generic.IEnumerable{TheTechIdea.Beep.Editor.FieldSyncData})">
            <summary>
            Map fields from source to destination object using field mappings
            Based on the MapFields method from DataSyncManager
            </summary>
            <param name="source">Source object</param>
            <param name="destination">Destination object</param>
            <param name="mappedFields">Field mapping definitions</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.FieldMappingHelper.CreateDestinationEntity(System.String,System.String)">
            <summary>
            Create destination entity instance
            Based on CreateDestinationEntity pattern from DataSyncManager
            </summary>
            <param name="dataSourceName">Name of the destination data source</param>
            <param name="entityName">Name of the entity</param>
            <returns>New entity instance</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.FieldMappingHelper.AutoMapFields(System.String,System.String,System.String,System.String)">
            <summary>
            Auto-map fields based on name matching between source and destination
            </summary>
            <param name="sourceDataSource">Source data source name</param>
            <param name="sourceEntity">Source entity name</param>
            <param name="destDataSource">Destination data source name</param>
            <param name="destEntity">Destination entity name</param>
            <returns>List of auto-generated field mappings</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.FieldMappingHelper.ValidateFieldMappings(System.Collections.Generic.IEnumerable{TheTechIdea.Beep.Editor.FieldSyncData})">
            <summary>
            Validate field mappings for correctness
            </summary>
            <param name="mappedFields">Field mappings to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.FieldMappingHelper.ConvertValue(System.Object,System.Type,TheTechIdea.Beep.Editor.FieldSyncData)">
            <summary>
            Convert value from source type to destination type with error handling
            </summary>
            <param name="value">Source value</param>
            <param name="targetType">Target type</param>
            <param name="field">Field mapping info for error reporting</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.Helpers.SchemaPersistenceHelper">
            <summary>
            Helper class for sync schema persistence operations
            Based on persistence patterns from DataSyncManager.SaveSchemas and LoadSchemas
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SchemaPersistenceHelper.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initialize the schema persistence helper with editor and file paths
            </summary>
            <param name="editor">DME Editor instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SchemaPersistenceHelper.SaveSchemasAsync(System.Collections.Generic.IEnumerable{TheTechIdea.Beep.Editor.DataSyncSchema})">
            <summary>
            Save sync schemas to storage asynchronously
            Based on DataSyncManager.SaveSchemas method
            </summary>
            <param name="schemas">Collection of schemas to save</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SchemaPersistenceHelper.LoadSchemasAsync">
            <summary>
            Load sync schemas from storage asynchronously
            Based on DataSyncManager.LoadSchemas method
            </summary>
            <returns>Observable collection of loaded schemas</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SchemaPersistenceHelper.SaveSchemaAsync(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Save a single schema to storage
            </summary>
            <param name="schema">Schema to save</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SchemaPersistenceHelper.DeleteSchemaAsync(System.String)">
            <summary>
            Delete schema from storage
            </summary>
            <param name="schemaId">ID of schema to delete</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SchemaPersistenceHelper.CreateBackupAsync">
            <summary>
            Create backup of current schemas
            </summary>
            <returns>True if backup was successful</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SchemaPersistenceHelper.GetSchemasFilePath">
            <summary>
            Get file path where schemas are stored
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SchemaPersistenceHelper.SchemasFileExists">
            <summary>
            Check if schemas file exists
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SchemaPersistenceHelper.EnsureDirectoryExists">
            <summary>
            Ensure the directory exists for storing schemas
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncProgressHelper">
            <summary>
            Helper class for sync progress reporting and logging operations
            Based on progress patterns from DataSyncManager.SendMessage and LogSyncRun
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncProgressHelper.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes a new instance of the SyncProgressHelper class
            </summary>
            <param name="editor">The DME editor instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncProgressHelper.ReportProgress(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.String,System.Int32,System.Int32)">
            <summary>
            Report progress with message and optional progress counters
            Based on DataSyncManager.SendMessage pattern
            </summary>
            <param name="progress">Progress reporter</param>
            <param name="message">Progress message</param>
            <param name="current">Current progress count</param>
            <param name="total">Total progress count</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncProgressHelper.LogMessage(System.String,TheTechIdea.Beep.ConfigUtil.Errors)">
            <summary>
            Log sync operation message with specified error level
            </summary>
            <param name="message">Message to log</param>
            <param name="errorLevel">Error level (Ok, Failed, etc.)</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncProgressHelper.LogSyncRun(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Log sync run details and update schema status
            Based on DataSyncManager.LogSyncRun method
            </summary>
            <param name="schema">The sync schema to log</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncProgressHelper.LogError(TheTechIdea.Beep.Editor.DataSyncSchema,System.String,System.Exception)">
            <summary>
            Handle and log sync errors with detailed information
            </summary>
            <param name="schema">The sync schema where error occurred</param>
            <param name="message">Error message</param>
            <param name="ex">Optional exception for detailed error information</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncProgressHelper.LogSuccess(TheTechIdea.Beep.Editor.DataSyncSchema,System.Int32,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Report successful sync completion
            </summary>
            <param name="schema">The sync schema that completed successfully</param>
            <param name="recordsProcessed">Number of records processed</param>
            <param name="progress">Optional progress reporter</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncProgressHelper.LogCancellation(TheTechIdea.Beep.Editor.DataSyncSchema,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Report sync cancellation
            </summary>
            <param name="schema">The sync schema that was cancelled</param>
            <param name="progress">Optional progress reporter</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncValidationHelper">
            <summary>
            Helper class for sync validation operations
            Based on validation patterns from DataSyncManager.ValidateSchema
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncValidationHelper.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Editor.BeepSync.Interfaces.IDataSourceHelper)">
            <summary>
            Initializes a new instance of the SyncValidationHelper class
            </summary>
            <param name="editor">The DME editor instance</param>
            <param name="dataSourceHelper">The data source helper instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncValidationHelper.ValidateSchema(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Validate complete sync schema for all required fields and configurations
            Based on DataSyncManager.ValidateSchema method
            </summary>
            <param name="schema">The sync schema to validate</param>
            <returns>Validation result with detailed error information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncValidationHelper.ValidateDataSource(System.String)">
            <summary>
            Validate that a data source exists and is accessible
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncValidationHelper.ValidateEntity(System.String,System.String)">
            <summary>
            Validate that an entity exists in the specified data source
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncValidationHelper.ValidateSyncOperation(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Validate sync operation before execution - comprehensive pre-sync validation
            </summary>
            <param name="schema">The sync schema to validate for operation</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Helpers.SyncValidationHelper.ValidateRequiredField(System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.ErrorsInfo})">
            <summary>
            Helper method to validate required fields
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IDataSourceHelper">
            <summary>
            Interface for data source operations in sync processes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IDataSourceHelper.GetDataSource(System.String)">
            <summary>
            Get data source by name with validation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IDataSourceHelper.ValidateDataSourceConnection(System.String)">
            <summary>
            Validate that a data source exists and is accessible
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IDataSourceHelper.GetEntityDataAsync(System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Get entity data from source with filters
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IDataSourceHelper.InsertEntityAsync(System.String,System.String,System.Object)">
            <summary>
            Insert entity data into destination
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IDataSourceHelper.UpdateEntityAsync(System.String,System.String,System.Object)">
            <summary>
            Update entity data in destination
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IDataSourceHelper.EntityExistsAsync(System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Check if entity exists in destination
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IFieldMappingHelper">
            <summary>
            Interface for field mapping operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IFieldMappingHelper.MapFields(System.Object,System.Object,System.Collections.Generic.IEnumerable{TheTechIdea.Beep.Editor.FieldSyncData})">
            <summary>
            Map fields from source to destination object
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IFieldMappingHelper.CreateDestinationEntity(System.String,System.String)">
            <summary>
            Create destination entity instance
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IFieldMappingHelper.AutoMapFields(System.String,System.String,System.String,System.String)">
            <summary>
            Auto-map fields based on name matching
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.IFieldMappingHelper.ValidateFieldMappings(System.Collections.Generic.IEnumerable{TheTechIdea.Beep.Editor.FieldSyncData})">
            <summary>
            Validate field mappings
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncValidationHelper">
            <summary>
            Interface for sync validation operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncValidationHelper.ValidateSchema(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Validate complete sync schema
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncValidationHelper.ValidateDataSource(System.String)">
            <summary>
            Validate data source configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncValidationHelper.ValidateEntity(System.String,System.String)">
            <summary>
            Validate entity exists in data source
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncValidationHelper.ValidateSyncOperation(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Validate sync operation before execution
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncProgressHelper">
            <summary>
            Interface for sync progress and logging
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncProgressHelper.ReportProgress(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.String,System.Int32,System.Int32)">
            <summary>
            Report progress with message
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncProgressHelper.LogMessage(System.String,TheTechIdea.Beep.ConfigUtil.Errors)">
            <summary>
            Log sync operation message
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncProgressHelper.LogSyncRun(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Log sync run details
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncProgressHelper.LogError(TheTechIdea.Beep.Editor.DataSyncSchema,System.String,System.Exception)">
            <summary>
            Handle and log sync errors
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncProgressHelper.LogCancellation(TheTechIdea.Beep.Editor.DataSyncSchema,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Log cancellation of sync operation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISyncProgressHelper.LogSuccess(TheTechIdea.Beep.Editor.DataSyncSchema,System.Int32,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Log successful completion of sync operation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISchemaPersistenceHelper">
            <summary>
            Interface for sync schema persistence
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISchemaPersistenceHelper.SaveSchemasAsync(System.Collections.Generic.IEnumerable{TheTechIdea.Beep.Editor.DataSyncSchema})">
            <summary>
            Save sync schemas to storage
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISchemaPersistenceHelper.LoadSchemasAsync">
            <summary>
            Load sync schemas from storage
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISchemaPersistenceHelper.SaveSchemaAsync(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Save single schema
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BeepSync.Interfaces.ISchemaPersistenceHelper.DeleteSchemaAsync(System.String)">
            <summary>
            Delete schema from storage
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics">
            <summary>
            Represents synchronization metrics for monitoring sync operations
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.SchemaID">
            <summary>
            Unique identifier for the sync schema
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.SyncDate">
            <summary>
            Date and time when the sync operation started
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.TotalRecords">
            <summary>
            Total number of records to be synchronized
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.SuccessfulRecords">
            <summary>
            Number of records successfully synchronized
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.FailedRecords">
            <summary>
            Number of records that failed to synchronize
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.SkippedRecords">
            <summary>
            Number of records that were skipped during synchronization
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.Duration">
            <summary>
            Duration of the sync operation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.AverageRecordProcessingTime">
            <summary>
            Average processing time per record
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.SuccessRate">
            <summary>
            Success rate as a percentage
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.IsSuccessful">
            <summary>
            Indicates if the sync operation completed successfully (no failures)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.ErrorMessages">
            <summary>
            Error messages collected during synchronization
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.BeepSync.SyncMetrics.Metadata">
            <summary>
            Additional metadata about the sync operation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.DefaultsManager">
            <summary>
            Enhanced DefaultsManager with helper-based architecture and extensible resolvers
            Supports setting default values for entity columns with simple logic formulas
            </summary>
            <summary>
            Extended functionality for DefaultsManager
            </summary>
            <summary>
            Template creation methods for DefaultsManager
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.DefaultValueHelper">
            <summary>
            Gets the default value helper instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ResolverManager">
            <summary>
            Gets the resolver manager instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ValidationHelper">
            <summary>
            Gets the validation helper instance
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.Initialize(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes the DefaultsManager with helper instances
            </summary>
            <param name="editor">The DME Editor instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.EnsureInitialized(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Ensures the manager is initialized
            </summary>
            <param name="editor">The DME Editor instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.GetDefaults(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Retrieves the default values for a specified data source.
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">The name of the data source.</param>
            <returns>A list of DefaultValue objects.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ResolveDefaultValue(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.ConfigUtil.DefaultValue,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Resolves the default value for a specific DefaultValue object using enhanced resolver system.
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="defaultValue">The DefaultValue object containing the rule or static value.</param>
            <param name="parameters">The parameters to pass to the rule, if applicable.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ResolveDefaultValue(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Resolves the default value for a given data source and field name.
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">The name of the data source.</param>
            <param name="fieldName">The name of the field to find the default for.</param>
            <param name="parameters">The parameters to pass to the rule, if applicable.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.SaveDefaults(TheTechIdea.Beep.Editor.IDMEEditor,System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.DefaultValue},System.String)">
            <summary>
            Saves the default values for a specified data source.
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="defaults">The default values to save.</param>
            <param name="dataSourceName">The name of the data source.</param>
            <returns>Error information.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateDefaultValue(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String)">
            <summary>
            Creates a new default value with validation
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="fieldName">Name of the field</param>
            <param name="value">Default value (can be null if rule is provided)</param>
            <param name="rule">Optional rule for dynamic value generation</param>
            <returns>Validation result and created default value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ValidateDefaultValue(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.ConfigUtil.DefaultValue)">
            <summary>
            Validates a default value configuration
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="defaultValue">Default value to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ValidateRule(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Validates a rule syntax
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="rule">Rule to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.TestRule(TheTechIdea.Beep.Editor.IDMEEditor,System.String,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Tests a rule without applying it to data
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="rule">Rule to test</param>
            <param name="parameters">Optional parameters for testing</param>
            <returns>Test result with resolved value or error information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.RegisterCustomResolver(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolver)">
            <summary>
            Registers a custom resolver for default value rules
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="resolver">Custom resolver to register</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.GetAvailableResolvers(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Gets all available resolvers and their capabilities
            </summary>
            <param name="editor">The DME Editor instance</param>
            <returns>Dictionary of resolver names and their supported rule types</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.GetResolverExamples(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Gets examples for all available resolvers
            </summary>
            <param name="editor">The DME Editor instance</param>
            <returns>Dictionary of resolver names and their examples</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateDefaultValueTemplate(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Creates a default value template based on the specified template name
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="templateName">Name of the template to create (Audit, UserManagement, etc.)</param>
            <returns>List of default values based on the template</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateErrorsInfo(TheTechIdea.Beep.ConfigUtil.Errors,System.String)">
            <summary>
            Creates an IErrorsInfo object with the specified flag and message
            </summary>
            <param name="flag">The error flag</param>
            <param name="message">The error message</param>
            <returns>IErrorsInfo object</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ConvertValue(System.Object,System.Type)">
            <summary>
            Converts a value to the target type
            </summary>
            <param name="value">Value to convert</param>
            <param name="targetType">Target type</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.Dispose">
            <summary>
            Disposes resources used by the DefaultsManager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.Dispose(System.Boolean)">
            <summary>
            Disposes managed resources
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.SetColumnDefault(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets a default value for a specific column in an entity
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity/table</param>
            <param name="columnName">Name of the column</param>
            <param name="defaultValue">Default value or rule</param>
            <param name="isRule">True if defaultValue is a rule, false if static value</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.GetColumnDefault(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Gets the default value for a specific column in an entity
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity/table</param>
            <param name="columnName">Name of the column</param>
            <param name="parameters">Optional parameters for rule resolution</param>
            <returns>Resolved default value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.RemoveColumnDefault(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String)">
            <summary>
            Removes the default value for a specific column in an entity
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity/table</param>
            <param name="columnName">Name of the column</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.GetEntityDefaults(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Gets all column defaults for a specific entity
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity/table</param>
            <returns>Dictionary of column names and their default values</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.SetMultipleColumnDefaults(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.String,System.Boolean}})">
            <summary>
            Sets multiple column defaults at once
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity/table</param>
            <param name="columnDefaults">Dictionary of column names and their default configurations</param>
            <returns>Operation result with details of successes and failures</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ApplyDefaultsToRecord(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.Object,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Applies default values to a data record
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entityName">Name of the entity</param>
            <param name="record">Record to apply defaults to</param>
            <param name="parameters">Optional parameters for rule resolution</param>
            <returns>Updated record with default values applied</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateDefaultValueTemplate(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Editor.Defaults.DefaultValueTemplateType)">
            <summary>
            Creates a template for common default value patterns
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="templateType">Type of template to create</param>
            <returns>List of default value templates</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ExportDefaults(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Exports defaults configuration for a data source to JSON
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">Name of the data source</param>
            <returns>JSON representation of defaults or null if error</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ExportDefaultsWithResult(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Exports defaults configuration with enhanced result information
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">Name of the data source</param>
            <returns>Tuple with operation result and JSON data</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.ImportDefaults(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.Boolean)">
            <summary>
            Imports default value configurations from a serialized format
            </summary>
            <param name="editor">The DME Editor instance</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="serializedDefaults">Serialized default values configuration</param>
            <param name="replaceExisting">Whether to replace existing defaults</param>
            <returns>Import operation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.IsDefaultValue(System.Object,System.Type)">
            <summary>
            Checks if a value is considered a default/empty value for its type
            </summary>
            <param name="value">Value to check</param>
            <param name="type">Type of the value</param>
            <returns>True if value is considered default/empty</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateError(System.String)">
            <summary>
            Creates an error result
            </summary>
            <param name="message">Error message</param>
            <returns>Error information object</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateAuditTemplate">
            <summary>
            Creates audit template with common audit fields
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateUserManagementTemplate">
            <summary>
            Creates user management template
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateOrderProcessingTemplate">
            <summary>
            Creates order processing template
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateCustomerManagementTemplate">
            <summary>
            Creates customer management template
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateProductCatalogTemplate">
            <summary>
            Creates product catalog template
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateFinancialTemplate">
            <summary>
            Creates financial template
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateInventoryTemplate">
            <summary>
            Creates inventory template
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateBasicTemplate">
            <summary>
            Creates basic template with minimal fields
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.CreateIntelligentTemplate(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a custom template based on entity structure analysis
            </summary>
            <param name="entityName">Name of the entity</param>
            <param name="includeAudit">Whether to include audit fields</param>
            <param name="includeWorkflow">Whether to include workflow fields</param>
            <returns>List of intelligent default values</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.GetAvailableTemplateNames">
            <summary>
            Gets all available template names
            </summary>
            <returns>List of available template names</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.DefaultsManager.GetTemplateDescription(System.String)">
            <summary>
            Gets template description for a given template name
            </summary>
            <param name="templateName">Name of the template</param>
            <returns>Description of what the template provides</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.DefaultValueTemplateType">
            <summary>
            Types of default value templates
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.Defaults.DefaultValueTemplateType.AuditFields">
            <summary>
            Audit fields (CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.Defaults.DefaultValueTemplateType.SystemFields">
            <summary>
            System fields (ID, Version, MachineName)
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.Defaults.DefaultValueTemplateType.CommonDefaults">
            <summary>
            Common default fields (IsActive, SortOrder, Status)
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples">
            <summary>
            Comprehensive examples of using the Enhanced DefaultsManager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.BasicUsageExamples(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Basic usage examples
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.AdvancedRuleExamples(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Advanced rule examples
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.BulkOperationsExamples(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Bulk operations examples
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.TemplateExamples(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Template examples
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.CustomResolverExample(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Custom resolver example
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.ValidationExamples(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Validation examples
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.ImportExportExamples(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Import/Export examples
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.TestAndSetRule(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String)">
            <summary>
            Helper method to test and set a rule
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.TestRule(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Helper method to test a rule
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.ShowAvailableResolvers(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Display available resolvers and their capabilities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Examples.DefaultsManagerExamples.RunAllExamples(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Run all examples
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Examples.SampleOrder">
            <summary>
            Sample order class for examples
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Examples.BusinessLogicResolver">
            <summary>
            Custom business logic resolver example
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueHelper">
            <summary>
            Helper class for managing default value operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueHelper.DetermineRuleType(System.String)">
            <summary>
            Determines the appropriate DefaultValueType based on the rule content
            </summary>
            <param name="rule">The rule string to analyze</param>
            <returns>The appropriate DefaultValueType</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueHelper.ContainsExpression(System.String)">
            <summary>
            Checks if the rule contains mathematical or logical expressions
            </summary>
            <param name="rule">The rule to check</param>
            <returns>True if it contains expression patterns</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueHelper.ValidateRule(System.String,TheTechIdea.Beep.Utilities.DefaultValueType)">
            <summary>
            Validates a rule string for syntax and structure
            </summary>
            <param name="rule">The rule to validate</param>
            <param name="ruleType">The expected rule type</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueHelper.IsEmptyValue(System.Object)">
            <summary>
            Checks if a value is considered empty for its type
            </summary>
            <param name="value">Value to check</param>
            <returns>True if the value is considered empty</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueHelper.CreateDefaultValue(System.String,System.Object,System.String,System.String)">
            <summary>
            Creates a default value with enhanced type detection and validation
            </summary>
            <param name="fieldName">Name of the field</param>
            <param name="value">Static value (can be any type)</param>
            <param name="rule">Rule string</param>
            <param name="description">Optional description</param>
            <returns>Configured DefaultValue instance</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueHelper.GetMultipleDefaults(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all defaults for multiple data sources
            </summary>
            <param name="dataSourceNames">Names of data sources</param>
            <returns>Dictionary mapping data source names to their defaults</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueHelper.FindDefaultsByPropertyName(System.String)">
            <summary>
            Searches for defaults by property name across all data sources
            </summary>
            <param name="propertyName">Name of the property to search for</param>
            <returns>Dictionary mapping data source names to matching defaults</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueValidationHelper">
            <summary>
            Helper for validating default value configurations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueValidationHelper.ValidatePropertyTypeConsistency(TheTechIdea.Beep.ConfigUtil.DefaultValue)">
            <summary>
            Validates consistency between property type and the actual configuration
            </summary>
            <param name="defaultValue">The default value to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Helpers.DefaultValueValidationHelper.IsEmptyValue(System.Object)">
            <summary>
            Checks if a value is considered empty
            </summary>
            <param name="value">Value to check</param>
            <returns>True if the value is considered empty</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolver">
            <summary>
            Interface for resolving default values using rules and formulas
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolver.ResolverName">
            <summary>
            Gets the name of the resolver
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolver.SupportedRuleTypes">
            <summary>
            Gets the supported rule types for this resolver
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolver.ResolveValue(System.String,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Resolves a default value based on the rule and parameters
            </summary>
            <param name="rule">The rule string to resolve</param>
            <param name="parameters">Parameters for rule resolution</param>
            <returns>The resolved value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolver.CanHandle(System.String)">
            <summary>
            Validates if the rule can be handled by this resolver
            </summary>
            <param name="rule">The rule string to validate</param>
            <returns>True if the rule can be handled</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolver.GetExamples">
            <summary>
            Gets example usage for this resolver
            </summary>
            <returns>List of example rule strings</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueHelper">
            <summary>
            Interface for managing default value operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueHelper.GetDefaults(System.String)">
            <summary>
            Gets default values for a data source
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <returns>List of default values</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueHelper.SaveDefaults(System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.DefaultValue},System.String)">
            <summary>
            Saves default values for a data source
            </summary>
            <param name="defaults">Default values to save</param>
            <param name="dataSourceName">Name of the data source</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueHelper.GetDefaultForField(System.String,System.String)">
            <summary>
            Gets a specific default value by field name
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <param name="fieldName">Name of the field</param>
            <returns>Default value or null if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueHelper.CreateDefaultValue(System.String,System.String,System.String)">
            <summary>
            Creates a new default value entry
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Default value</param>
            <param name="rule">Optional rule</param>
            <returns>New default value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueHelper.ValidateDefaultValue(TheTechIdea.Beep.ConfigUtil.DefaultValue)">
            <summary>
            Validates a default value configuration
            </summary>
            <param name="defaultValue">Default value to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolverManager">
            <summary>
            Interface for resolving default value rules
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolverManager.RegisterResolver(TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolver)">
            <summary>
            Registers a resolver
            </summary>
            <param name="resolver">Resolver to register</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolverManager.UnregisterResolver(System.String)">
            <summary>
            Unregisters a resolver
            </summary>
            <param name="resolverName">Name of resolver to unregister</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolverManager.ResolveValue(System.String,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Resolves a value using the appropriate resolver
            </summary>
            <param name="rule">Rule to resolve</param>
            <param name="parameters">Parameters for resolution</param>
            <returns>Resolved value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolverManager.GetResolvers">
            <summary>
            Gets all registered resolvers
            </summary>
            <returns>Dictionary of resolvers by name</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueResolverManager.GetResolverForRule(System.String)">
            <summary>
            Gets resolver for a specific rule
            </summary>
            <param name="rule">Rule to find resolver for</param>
            <returns>Resolver or null if not found</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueValidationHelper">
            <summary>
            Interface for validation operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueValidationHelper.ValidateDefaultValue(TheTechIdea.Beep.ConfigUtil.DefaultValue)">
            <summary>
            Validates a default value configuration
            </summary>
            <param name="defaultValue">Default value to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueValidationHelper.ValidateRule(System.String)">
            <summary>
            Validates a rule syntax
            </summary>
            <param name="rule">Rule to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Interfaces.IDefaultValueValidationHelper.ValidateFieldName(System.String,System.String)">
            <summary>
            Validates field name for data source
            </summary>
            <param name="dataSourceName">Data source name</param>
            <param name="fieldName">Field name</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver">
            <summary>
            Base resolver class for common functionality across all default value resolvers
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.LogError(System.String,System.Exception)">
            <summary>
            Logs an error message with the resolver context
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Optional exception</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.LogInfo(System.String)">
            <summary>
            Logs an informational message with the resolver context
            </summary>
            <param name="message">Info message</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.LogWarning(System.String)">
            <summary>
            Logs a warning message with the resolver context
            </summary>
            <param name="message">Warning message</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.GetParameterValue``1(TheTechIdea.Beep.Addin.IPassedArgs,System.String,``0)">
            <summary>
            Safely extracts a parameter value from IPassedArgs
            </summary>
            <typeparam name="T">Type to cast to</typeparam>
            <param name="parameters">Parameters object</param>
            <param name="propertyName">Property name to extract</param>
            <param name="defaultValue">Default value if not found</param>
            <returns>Extracted value or default</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.ExtractParenthesesContent(System.String)">
            <summary>
            Extracts content from parentheses in a rule (e.g., "FUNCTION(content)" -> "content")
            </summary>
            <param name="rule">Rule string</param>
            <returns>Content inside parentheses or empty string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.SplitParameters(System.String)">
            <summary>
            Splits comma-separated parameters, respecting quoted strings
            </summary>
            <param name="parameterString">Parameter string to split</param>
            <returns>Array of parameter strings</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.RemoveQuotes(System.String)">
            <summary>
            Removes quotes from a string if present
            </summary>
            <param name="value">String value</param>
            <returns>Unquoted string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.TryConvert``1(System.String,``0@)">
            <summary>
            Tries to convert a string value to the specified type
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="value">String value to convert</param>
            <param name="result">Converted result</param>
            <returns>True if conversion succeeded</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.ValidateFunctionFormat(System.String,System.String)">
            <summary>
            Validates that a rule has the expected function format (e.g., "FUNCTION(params)")
            </summary>
            <param name="rule">Rule to validate</param>
            <param name="functionName">Expected function name</param>
            <returns>True if rule has correct format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.GetDataSource(TheTechIdea.Beep.Addin.IPassedArgs,System.String)">
            <summary>
            Gets a data source from parameters
            </summary>
            <param name="parameters">Parameters object</param>
            <param name="dataSourceName">Optional specific data source name</param>
            <returns>IDataSource instance or null</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.BaseDefaultValueResolver.GetObjectFromParameters(TheTechIdea.Beep.Addin.IPassedArgs,System.String)">
            <summary>
            Gets an object from parameters by property name
            </summary>
            <param name="parameters">Parameters object</param>
            <param name="propertyName">Property name to look for</param>
            <returns>Object value or null</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.ConfigurationResolver">
            <summary>
            Resolver for configuration values from app settings, config files, etc.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.DataSourceResolver">
            <summary>
            Resolver for getting values from data sources using GetEntity and GetScalar operations
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.DateTimeResolver">
            <summary>
            Resolver for date/time related default values with enhanced functionality
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.DefaultValueResolverManager">
            <summary>
            Manager for default value resolvers with extensible resolver registration
            Enhanced to support Dictionary parameters and better resolver management
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.DefaultValueResolverManager.ResolveValue(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Enhanced ResolveValue method that accepts Dictionary parameters for better flexibility
            </summary>
            <param name="rule">Rule to resolve</param>
            <param name="parameters">Dictionary of parameters</param>
            <returns>Resolved value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.DefaultValueResolverManager.ConvertToPassedArgs(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts Dictionary parameters to IPassedArgs for backward compatibility
            </summary>
            <param name="parameters">Dictionary parameters</param>
            <returns>IPassedArgs instance</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.DefaultValueResolverManager.GetResolverStatistics">
            <summary>
            Gets resolver statistics and health information
            </summary>
            <returns>Dictionary with resolver statistics</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.DefaultValueResolverManager.CanResolveRule(System.String)">
            <summary>
            Tests if a rule can be resolved without actually resolving it
            </summary>
            <param name="rule">Rule to test</param>
            <returns>True if the rule can be handled</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.DefaultValueResolverManager.GetAllExamples">
            <summary>
            Gets all examples from all registered resolvers
            </summary>
            <returns>Dictionary mapping resolver names to their examples</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.DefaultValueResolverManager.ValidateResolvers">
            <summary>
            Validates that all registered resolvers are functioning correctly
            </summary>
            <returns>Validation results</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.EnvironmentResolver">
            <summary>
            Resolver for environment variables and system environment settings
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Defaults.Resolvers.EnvironmentResolver.GetAllEnvironmentVariables(System.EnvironmentVariableTarget)">
            <summary>
            Gets all environment variables for debugging/inspection purposes
            </summary>
            <param name="target">Target scope</param>
            <returns>Dictionary of all environment variables</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.ExpressionResolver">
            <summary>
            Resolver for expression evaluation and complex logic operations
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.FormulaResolver">
            <summary>
            Resolver for mathematical formulas and expressions
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.GuidResolver">
            <summary>
            Resolver for GUID generation with various format options
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.ObjectPropertyResolver">
            <summary>
            Resolver for extracting values from passed objects using property/field names
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.SystemInfoResolver">
            <summary>
            Resolver for system information with enhanced system data access
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Defaults.Resolvers.UserContextResolver">
            <summary>
            Resolver for user context information with enhanced user data access
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.CopyEntityDataAsync(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL,System.Func{System.Object,System.Object},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Copies data from a source entity to a destination entity asynchronously with batch processing and optional parallelism.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.FetchSourceDataAsync(TheTechIdea.Beep.IDataSource,System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches data from the source entity.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.TransformData(System.Object,System.String,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL,System.Func{System.Object,System.Object})">
            <summary>
            Transforms data based on mapping and/or custom transformation logic.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.ParallelInsertDataAsync(TheTechIdea.Beep.IDataSource,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Int32)">
            <summary>
            Inserts data into the destination in parallel batches.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.BatchInsertDataAsync(TheTechIdea.Beep.IDataSource,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Int32)">
            <summary>
            Inserts data into the destination in sequential batches.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.InsertBatchAsync(TheTechIdea.Beep.IDataSource,System.String,System.Collections.Generic.IEnumerable{System.Object},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Int32)">
            <summary>
            Inserts a single batch of data with retries for failed records.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.ETL.ETLEditor">
            <summary>
            Represents an Extract, Transform, Load (ETL) process.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes a new instance of the ETL class.
            </summary>
            <param name="_DMEEditor">The DME editor to use for the ETL process.</param>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.ETL.ETLEditor.PassEvent">
            <summary>
            Event that is raised when a process is passed.
            </summary>
            
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETL.ETLEditor.DMEEditor">
            <summary>Gets or sets the DMEEditor instance.</summary>
            <value>The DMEEditor instance.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETL.ETLEditor.RulesEngine">
            <summary>Gets or sets the rules editor.</summary>
            <value>The rules editor.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETL.ETLEditor.Passedargs">
            <summary>Gets or sets the PassedArgs object.</summary>
            <value>The PassedArgs object.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETL.ETLEditor.ScriptCount">
            <summary>Gets or sets the count of scripts.</summary>
            <value>The count of scripts.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETL.ETLEditor.CurrentScriptRecord">
            <summary>Gets or sets the current script record.</summary>
            <value>The current script record.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETL.ETLEditor.StopErrorCount">
            <summary>Gets or sets the stop error count.</summary>
            <value>The stop error count.</value>
            <remarks>
            The stop error count determines the maximum number of errors allowed before a process is stopped.
            The default value is 10.
            </remarks>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETL.ETLEditor.LoadDataLogs">
            <summary>Gets or sets the list of loaded data logs.</summary>
            <value>The list of loaded data logs.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETL.ETLEditor.Script">
            <summary>Gets or sets the ETL script for HDR processing.</summary>
            <value>The ETL script for HDR processing.</value>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.CreateScriptHeader(TheTechIdea.Beep.IDataSource,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>Creates the header of an ETL script.</summary>
            <param name="Srcds">The data source object.</param>
            <param name="progress">The progress object to report progress.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when Srcds is null.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.GetCreateEntityScript(TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{System.String},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean)">
            <summary>Generates a list of ETL script details for creating entities from a data source.</summary>
            <param name="ds">The data source to retrieve entities from.</param>
            <param name="entities">The list of entities to create scripts for.</param>
            <param name="progress">An object to report progress during the script generation.</param>
            <param name="token">A cancellation token to cancel the script generation.</param>
            <returns>A list of ETL script details for creating entities.</returns>
            <remarks>If an error occurs during the process, a log message will be added and an empty list will be returned.</remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.GenerateScript(TheTechIdea.Beep.DataBase.EntityStructure,System.String,TheTechIdea.Beep.Editor.DDLScriptType)">
            <summary>Generates an ETL script detail object based on the provided parameters.</summary>
            <param name="item">The entity structure object representing the source entity.</param>
            <param name="destSource">The name of the destination data source.</param>
            <param name="scriptType">The type of DDL script.</param>
            <returns>An ETLScriptDet object representing the generated script.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.GetCreateEntityScript(TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean)">
            <summary>Generates a list of ETL script details for creating entities.</summary>
            <param name="Dest">The destination data source.</param>
            <param name="entities">The list of entity structures.</param>
            <param name="progress">An object for reporting progress.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A list of ETL script details for creating entities.</returns>
            <remarks>
            This method generates ETL script details for creating entities based on the provided destination data source and entity structures.
            It reports progress using the provided progress object and can be cancelled using the cancellation token.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.GetCopyDataEntityScript(TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>Generates a script for copying data entities.</summary>
            <param name="Dest">The destination data source.</param>
            <param name="entities">The list of entity structures.</param>
            <param name="progress">An object to report progress.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A list of ETLScriptDet objects representing the generated script.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETL.ETLEditor.CopyEntitiesStructure(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{System.String},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETL.ETLEditor.CopyEntityStructure(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETL.ETLEditor.CopyDatasourceData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETL.ETLEditor.CopyEntitiesData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{System.String},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)" -->
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.CopyEntityData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)">
            <summary>Copies entity data from a source data source to a destination data source.</summary>
            <param name="sourceds">The source data source.</param>
            <param name="destds">The destination data source.</param>
            <param name="srcentity">The name of the source entity.</param>
            <param name="destentity">The name of the destination entity.</param>
            <param name="progress">An object to report progress during the copy operation.</param>
            <param name="token">A cancellation token to cancel the copy operation.</param>
            <param name="CreateMissingEntity">A flag indicating whether to create the destination entity if it doesn't exist.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETL.ETLEditor.CopyEntitiesData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{TheTechIdea.Beep.Editor.ETLScriptDet},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)" -->
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.RunChildScriptAsync(TheTechIdea.Beep.Editor.ETLScriptDet,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>Runs a child script asynchronously.</summary>
            <param name="ParentScript">The parent script.</param>
            <param name="srcds">The data source for the source.</param>
            <param name="destds">The data source for the destination.</param>
            <param name="progress">The progress object to report progress.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>An object containing information about any errors that occurred during the execution of the child script.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.RunCreateScript(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,System.Boolean)">
            <summary>Runs a create script and updates data.</summary>
            <param name="progress">An object that reports the progress of the operation.</param>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>An object containing information about any errors that occurred during the operation.</returns>
            <remarks>
            This method runs a create script and updates data. It connects to the specified data sources, performs the necessary operations, and reports progress using the provided progress object. If the operation is cancelled using the provided cancellation token, the method will stop and return the current error information.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETL.ETLEditor.RunCopyEntityScript(TheTechIdea.Beep.Editor.ETLScriptDet,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETL.ETLEditor.LoadETL(System.String)" -->
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.SaveETL(System.String)">
            <summary>Saves the ETL (Extract, Transform, Load) configuration for a given datasource.</summary>
            <param name="DatasourceName">The name of the datasource.</param>
            <returns>An object containing information about any errors that occurred during the save operation.</returns>
            <remarks>
            This method creates a directory for the specified datasource if it doesn't already exist.
            It then saves the ETL configuration as a JSON file in the created directory.
            If any errors occur during the save operation, a log message is added and the error object is returned.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETL.ETLEditor.CreateImportScript(TheTechIdea.Beep.Workflow.Mapping.EntityDataMap,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)" -->
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEditor.RunImportScript(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean)">
            <summary>Runs an import script and returns information about any errors that occurred.</summary>
            <param name="progress">An object that reports the progress of the import script.</param>
            <param name="token">A cancellation token that can be used to cancel the import script.</param>
            <returns>An object containing information about any errors that occurred during the import script.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETL.ETLEditor.InsertEntity(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure,System.String,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL,System.Object,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETL.ETLEditor.SendMessege(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.Editor.ETLScriptDet,System.String)" -->
        <member name="T:TheTechIdea.Beep.Editor.ETL.ETLEntityCopyHelper">
            <summary>
            Handles copying entity structure and data between data sources.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEntityCopyHelper.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:TheTechIdea.Beep.Editor.ETL.ETLEntityCopyHelper"/> class.
            </summary>
            <param name="dme">The DME editor instance.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEntityCopyHelper.CopyEntityStructure(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String,System.Boolean,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>
            Copies the structure of an entity from a source data source to a destination data source.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEntityCopyHelper.CopyEntityData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)">
            <summary>
            Copies data rows from a source entity to a destination entity.
            Applies DefaultsManager for missing values after optional mapping.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEntityCopyHelper.NormalizeToList(System.Object,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Normalizes supported data container types into a list of objects representing entity rows.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEntityProcessor.ValidateRecords(System.Collections.Generic.IEnumerable{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Validates a list of records against custom rules.
            </summary>
            <param name="records">The list of records to validate.</param>
            <param name="validationRules">The custom validation rules.</param>
            <returns>A tuple containing valid and invalid records.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEntityProcessor.TransformRecords(System.Collections.Generic.IEnumerable{System.Object},TheTechIdea.Beep.Editor.ETL.ETLEntityProcessor.TransformRecordDelegate)">
            <summary>
            Transforms a list of records using a custom delegate.
            </summary>
            <param name="records">The list of records to transform.</param>
            <param name="transformDelegate">The transformation logic.</param>
            <returns>A list of transformed records.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEntityProcessor.ProcessRecordsAsync(System.Collections.Generic.IEnumerable{System.Object},System.Func{System.Object,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Processes a batch of records with optional parallelism.
            </summary>
            <param name="records">The records to process.</param>
            <param name="processAction">The processing logic for each record.</param>
            <param name="parallel">Whether to process the records in parallel.</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.ETL.ETLScriptBuilder">
            <summary>
            Helper responsible for building ETL scripts (Create / Copy / Alter etc.)
            Keeps ETLEditor thin and testable.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.ETL.ETLValidator">
            <summary>
            Provides validation utilities for ETL scripts, mappings, and entities.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLValidator.ValidateEntityMapping(TheTechIdea.Beep.Workflow.Mapping.EntityDataMap)">
            <summary>
            Validates the EntityDataMap to ensure all required fields and configurations are correct.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLValidator.ValidateMappedEntity(TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)">
            <summary>
            Validates an individual EntityDataMap_DTL to ensure all required mappings are correct.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLValidator.ValidateEntityConsistency(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String)">
            <summary>
            Validates entity consistency between source and destination fields.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLValidator.CheckIfMappingEntityExists(TheTechIdea.Beep.Workflow.Mapping.EntityDataMap,System.String)">
            <summary>
            Validates if a specific mapping entity exists.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Configuration.ConfigurationManager">
            <summary>
            Configuration manager for UnitofWorksManager
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Configuration.FormConfiguration">
            <summary>
            Form-related configuration settings
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.FormConfiguration.AutoSaveOnClose">
            <summary>Gets or sets whether to auto-save on form close</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.FormConfiguration.ConfirmUnsavedChanges">
            <summary>Gets or sets whether to confirm unsaved changes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.FormConfiguration.EnableFormValidation">
            <summary>Gets or sets whether form validation is enabled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.FormConfiguration.QueryTimeout">
            <summary>Gets or sets the query timeout in seconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.FormConfiguration.CustomSettings">
            <summary>Gets or sets custom form settings</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.FormConfiguration.EnableAuditing">
            <summary>Gets or sets whether to enable form auditing</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.FormConfiguration.MaxRecords">
            <summary>Gets or sets the maximum number of records to load</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.FormConfiguration.EnableCaching">
            <summary>Gets or sets whether to enable form caching</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Configuration.NavigationConfiguration">
            <summary>
            Navigation-related configuration settings
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.NavigationConfiguration.CheckUnsavedChanges">
            <summary>Gets or sets whether to check for unsaved changes during navigation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.NavigationConfiguration.SynchronizeDetailBlocks">
            <summary>Gets or sets whether to synchronize detail blocks during navigation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.NavigationConfiguration.EnableKeyboardNavigation">
            <summary>Gets or sets whether keyboard navigation is enabled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.NavigationConfiguration.WrapAroundNavigation">
            <summary>Gets or sets whether navigation wraps around at boundaries</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.NavigationConfiguration.ConfirmNavigationWithChanges">
            <summary>Gets or sets whether to confirm navigation when data is modified</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.NavigationConfiguration.EnableFastNavigation">
            <summary>Gets or sets whether to enable fast navigation mode</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Configuration.PerformanceConfiguration">
            <summary>
            Performance-related configuration settings
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.PerformanceConfiguration.EnableCaching">
            <summary>Gets or sets whether caching is enabled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.PerformanceConfiguration.MaxCacheSize">
            <summary>Gets or sets the maximum cache size</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.PerformanceConfiguration.CacheExpirationMinutes">
            <summary>Gets or sets cache expiration time in minutes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.PerformanceConfiguration.EnableMetrics">
            <summary>Gets or sets whether performance metrics are enabled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.PerformanceConfiguration.MetricsRetentionDays">
            <summary>Gets or sets metrics retention period in days</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.PerformanceConfiguration.EnableOptimization">
            <summary>Gets or sets whether to enable performance optimization</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.PerformanceConfiguration.OptimizationIntervalMinutes">
            <summary>Gets or sets the optimization interval in minutes</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration">
            <summary>
            Configuration settings for UnitofWorksManager
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.Performance">
            <summary>Gets or sets performance-related configuration</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.Validation">
            <summary>Gets or sets validation-related configuration</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.Navigation">
            <summary>Gets or sets navigation-related configuration</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.Forms">
            <summary>Gets or sets form-related configuration</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.BlockConfigurations">
            <summary>Gets or sets block-specific configurations</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.FormConfigurations">
            <summary>Gets or sets form-specific configurations</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.EnableLogging">
            <summary>Gets or sets whether logging is enabled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.ValidateBeforeCommit">
            <summary>Gets or sets whether to validate before commit</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.ConfirmBeforeClear">
            <summary>Gets or sets whether to confirm before clearing</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.StopValidationOnFirstError">
            <summary>Gets or sets whether to stop validation on first error</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.ClearCacheOnFormClose">
            <summary>Gets or sets whether to clear cache on form close</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.DefaultSaveOptions">
            <summary>Gets or sets default save options</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.DefaultRollbackOptions">
            <summary>Gets or sets default rollback options</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.Default">
            <summary>Gets the default configuration</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.GetBlockConfiguration(System.String)">
            <summary>Gets the configuration for a specific block</summary>
            <param name="blockName">The name of the block</param>
            <returns>Block configuration or default if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Configuration.UnitofWorksManagerConfiguration.GetFormConfiguration(System.String)">
            <summary>Gets the configuration for a specific form</summary>
            <param name="formName">The name of the form</param>
            <returns>Form configuration or default if not found</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Configuration.ValidationConfiguration">
            <summary>
            Validation-related configuration settings
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.ValidationConfiguration.ValidateOnInsert">
            <summary>Gets or sets whether to validate on insert</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.ValidationConfiguration.ValidateOnUpdate">
            <summary>Gets or sets whether to validate on update</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.ValidationConfiguration.ValidateOnNavigation">
            <summary>Gets or sets whether to validate on navigation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.ValidationConfiguration.ShowValidationMessages">
            <summary>Gets or sets whether to show validation messages</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.ValidationConfiguration.MaxValidationErrors">
            <summary>Gets or sets the maximum number of validation errors to collect</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.ValidationConfiguration.ValidateOnDelete">
            <summary>Gets or sets whether to validate on delete</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Configuration.ValidationConfiguration.StrictValidation">
            <summary>Gets or sets whether to use strict validation</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.FormsManager">
            <summary>
            Enhanced UnitofWorksManager with modular design using helper classes.
            Simulates Oracle Forms environment with master-detail relationships,
            triggers, and form-level operations management.
            
            This is the main coordinator class - complex operations are delegated to:
            - Helper classes for specific functionality
            - Partial classes for related operations
            - The main class stays lean and focused on coordination
            </summary>
            <summary>
            Enhanced operations partial class for UnitofWorksManager
            Provides enhanced operations and error recovery with mode transition awareness
            </summary>
            <summary>
            Form-level operations partial class for UnitofWorksManager
            </summary>
            <summary>
            Mode Transition Management partial class for UnitofWorksManager
            Handles transitions between Query and CRUD modes with proper validation
            Equivalent to Oracle Forms ENTER_QUERY / EXECUTE_QUERY mode transitions
            </summary>
            <summary>
            Navigation operations partial class for UnitofWorksManager
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.DMEEditor">
            <summary>Gets the DME Editor instance</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CurrentFormName">
            <summary>Gets or sets the current form name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CurrentBlockName">
            <summary>Gets or sets the current active block name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.Blocks">
            <summary>Gets all registered blocks</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.IsDirty">
            <summary>Gets whether any block has unsaved changes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.Status">
            <summary>Gets the current status message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.BlockCount">
            <summary>Gets the count of registered blocks</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.RelationshipManager">
            <summary>Gets the relationship manager</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.DirtyStateManager">
            <summary>Gets the dirty state manager</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.PerformanceManager">
            <summary>Gets the performance manager</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.FormsManager.Configuration">
            <summary>Gets the configuration</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Editor.UOWManager.Interfaces.IRelationshipManager,TheTechIdea.Beep.Editor.UOWManager.Interfaces.IDirtyStateManager,TheTechIdea.Beep.Editor.UOWManager.Interfaces.IEventManager,TheTechIdea.Beep.Editor.UOWManager.Interfaces.IFormsSimulationHelper,TheTechIdea.Beep.Editor.UOWManager.Interfaces.IPerformanceManager,TheTechIdea.Beep.Editor.UOWManager.Interfaces.IConfigurationManager)">
            <summary>
            Constructor with full dependency injection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Simple constructor for backward compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.RegisterBlock(System.String,TheTechIdea.Beep.Editor.IUnitofWork,TheTechIdea.Beep.DataBase.IEntityStructure,System.String,System.Boolean)">
            <summary>
            Registers a data block with the manager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.UnregisterBlock(System.String)">
            <summary>
            Unregisters a data block from the manager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetBlock(System.String)">
            <summary>
            Gets a registered block with performance caching
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetUnitOfWork(System.String)">
            <summary>
            Gets the unit of work for a specific block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.BlockExists(System.String)">
            <summary>
            Checks if a block exists
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CreateMasterDetailRelation(System.String,System.String,System.String,System.String,TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipType)">
            <summary>
            Creates a master-detail relationship between blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.SynchronizeDetailBlocksAsync(System.String)">
            <summary>
            Synchronizes detail blocks when master record changes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetDetailBlocks(System.String)">
            <summary>
            Gets all blocks that are detail blocks of the specified master block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetMasterBlock(System.String)">
            <summary>
            Gets the master block name for a detail block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CheckAndHandleUnsavedChangesAsync(System.String)">
            <summary>
            Checks for unsaved changes in a block and its children, prompts user for action
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.HasUnsavedChanges">
            <summary>
            Checks if any blocks have unsaved changes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetDirtyBlocks">
            <summary>
            Gets all dirty blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.InsertRecordAsync(System.String,System.Object)">
            <summary>
            Inserts a new record in the specified block
            Basic implementation - use InsertRecordEnhancedAsync for better functionality
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.DeleteCurrentRecordAsync(System.String)">
            <summary>
            Deletes the current record in the specified block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.EnterQueryAsync(System.String)">
            <summary>
            Enters query mode for a block - equivalent to Oracle Forms ENTER_QUERY
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ExecuteQueryAsync(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Executes query for a block - equivalent to Oracle Forms EXECUTE_QUERY
            Basic implementation - use ExecuteQueryEnhancedAsync for better functionality
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ValidateField(System.String,System.String,System.Object)">
            <summary>
            Validates a specific field in a block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ValidateBlock(System.String)">
            <summary>
            Validates all records in a block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.SetAuditDefaults(System.Object,System.String)">
            <summary>
            Sets default values for common audit fields when a new record is created
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets a field value on a record using reflection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetFieldValue(System.Object,System.String)">
            <summary>
            Gets a field value from a record using reflection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ExecuteSequence(System.String,System.Object,System.String,System.String)">
            <summary>
            Executes a sequence generator for a field
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CreateNewRecord(System.String)">
            <summary>
            Creates a new record for a block using proper type resolution
            Automatically handles mode transition if needed
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.InsertRecordEnhancedAsync(System.String,System.Object)">
            <summary>
            Enhanced insert operation with mode transition validation and better type safety
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.UpdateCurrentRecordAsync(System.String)">
            <summary>
            Enhanced update operation with mode validation for current record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ExecuteQueryEnhancedAsync(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Enhanced query execution with proper mode transition handling
            This method now properly handles Query->Execute->CRUD mode transition
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetCurrentRecord(System.String)">
            <summary>
            Gets the current record for a block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetRecordCount(System.String)">
            <summary>
            Gets the record count for a block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ValidateRecordForOperation(System.String,System.Object,System.String)">
            <summary>
            Validates a record for a specific operation with mode awareness
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CopyFields(System.Object,System.Object,System.String[])">
            <summary>
            Copies field values between records
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ApplyAuditDefaults(System.Object,System.String)">
            <summary>
            Applies audit defaults to a record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.FindBestInsertMethod(System.Type,System.Type)">
            <summary>
            Finds the best insert method for the given types
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.FindBestUpdateMethod(System.Type,System.Type)">
            <summary>
            Finds the best update method for the given types
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.OpenFormAsync(System.String)">
            <summary>
            Opens a form - equivalent to Oracle Forms WHEN-NEW-FORM-INSTANCE
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CloseFormAsync">
            <summary>
            Closes the form - checks for unsaved changes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CommitFormAsync">
            <summary>
            Commits all changes in all blocks - equivalent to Oracle Forms COMMIT_FORM
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.RollbackFormAsync">
            <summary>
            Rollback all changes in all blocks - equivalent to Oracle Forms ROLLBACK_FORM
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ClearAllBlocksAsync">
            <summary>
            Clears all blocks - equivalent to Oracle Forms CLEAR_FORM
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ClearBlockAsync(System.String)">
            <summary>
            Clears a specific block - equivalent to Oracle Forms CLEAR_BLOCK
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ValidateForm">
            <summary>
            Validates the entire form
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.EnterQueryModeAsync(System.String)">
            <summary>
            Transitions a block from CRUD to Query mode - equivalent to Oracle Forms ENTER_QUERY
            Validates unsaved changes before transition
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ExecuteQueryAndEnterCrudModeAsync(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Transitions a block from Query to CRUD mode - equivalent to Oracle Forms EXECUTE_QUERY
            Executes query and validates data before transition
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.EnterCrudModeForNewRecordAsync(System.String)">
            <summary>
            Forces a block into CRUD mode without query execution (for new record entry)
            Equivalent to Oracle Forms when directly creating new records
            ENHANCED: Handles master-detail coordination and unsaved changes properly
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CreateNewRecordInMasterBlockAsync(System.String)">
            <summary>
            Creates a new record in a master block with proper child block coordination
            This is the method that handles your specific scenario
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ValidateAllBlocksForModeTransitionAsync">
            <summary>
            Validates all blocks before form-level mode transitions
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ValidateMasterDetailForNewRecord(System.String)">
            <summary>
            Validates master-detail relationships before creating new record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.ValidateAllBlocksIncludingDetailsForNewRecord(System.String)">
            <summary>
            Validates all blocks including details for new record creation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.HandleMasterDetailCoordinationForNewRecord(System.String)">
            <summary>
            Handles master-detail coordination when creating new record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CoordinateChildBlocksForNewMasterRecord(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Coordinates child blocks when master gets new record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.CoordinateWithMasterForNewDetailRecord(System.String,System.String)">
            <summary>
            Coordinates with master when detail gets new record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.SetForeignKeyValuesFromMasterAsync(System.String,System.String)">
            <summary>
            Sets foreign key values from master record to detail record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.HandleUnsavedChangesPrompt(System.Collections.Generic.List{System.String})">
            <summary>
            Prompts user for action when unsaved changes are detected
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetBlockMode(System.String)">
            <summary>
            Gets the current mode of a block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetAllBlockModeInfo">
            <summary>
            Gets mode transition information for all blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.IsFormReadyForModeTransitionAsync">
            <summary>
            Checks if form-level mode transition is safe
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.FirstRecordAsync(System.String)">
            <summary>
            Navigates to first record in block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.NextRecordAsync(System.String)">
            <summary>
            Navigates to next record in block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.PreviousRecordAsync(System.String)">
            <summary>
            Navigates to previous record in block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.LastRecordAsync(System.String)">
            <summary>
            Navigates to last record in block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.NavigateToRecordAsync(System.String,System.Int32)">
            <summary>
            Navigates to a specific record by index
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.SwitchToBlockAsync(System.String)">
            <summary>
            Switches to a different block, checking for unsaved changes first
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetCurrentRecordInfo(System.String)">
            <summary>
            Gets current record information from a block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.FormsManager.GetAllNavigationInfo">
            <summary>
            Gets navigation information for all blocks
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.ModeTransitionValidationResult">
            <summary>
            Result of mode transition validation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.BlockModeInfo">
            <summary>
            Information about a block's mode and state
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Helpers.DirtyStateManager">
            <summary>
            Helper class for managing dirty state and unsaved changes in data blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.DirtyStateManager.CheckAndHandleUnsavedChangesAsync(System.String)">
            <summary>
            Checks for unsaved changes in a block and its children, prompts user for action
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.DirtyStateManager.HasUnsavedChanges">
            <summary>
            Checks if any blocks have unsaved changes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.DirtyStateManager.GetDirtyBlocks">
            <summary>
            Gets all dirty blocks with detailed information
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.DirtyStateManager.GetDirtyBlocksWithDetails">
            <summary>
            Gets detailed information about dirty blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.DirtyStateManager.CollectDirtyDetailBlocks(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Collects all dirty detail blocks recursively
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.DirtyStateManager.SaveDirtyBlocksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Saves all dirty blocks with progress reporting and error handling
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.DirtyStateManager.RollbackDirtyBlocksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Rolls back all dirty blocks with error handling
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Helpers.EventManager">
            <summary>
            Event management helper for UnitofWorksManager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.EventManager.SubscribeToUnitOfWorkEvents(TheTechIdea.Beep.Editor.IUnitofWork,System.String)">
            <summary>
            Subscribes to unit of work events
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.EventManager.UnsubscribeFromUnitOfWorkEvents(TheTechIdea.Beep.Editor.IUnitofWork,System.String)">
            <summary>
            Unsubscribes from unit of work events
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.EventManager.TriggerBlockEnter(System.String)">
            <summary>
            Triggers block enter event
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.EventManager.TriggerBlockLeave(System.String)">
            <summary>
            Triggers block leave event
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.EventManager.TriggerError(System.String,System.Exception)">
            <summary>
            Triggers error event
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.EventManager.TriggerFieldValidation(System.String,System.String,System.Object)">
            <summary>
            Triggers field validation event
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.EventManager.TriggerRecordValidation(System.String,System.Object)">
            <summary>
            Triggers record validation event
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Helpers.FormsSimulationHelper">
            <summary>
            Helper class for Oracle Forms simulation functionality
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.FormsSimulationHelper.SetAuditDefaults(System.Object,System.String)">
            <summary>
            Sets default values for common audit fields when a new record is created
            Similar to Oracle Forms default value triggers
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.FormsSimulationHelper.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets a field value on a record using reflection with enhanced error handling and type conversion
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.FormsSimulationHelper.GetFieldValue(System.Object,System.String)">
            <summary>
            Gets a field value from a record using reflection with caching
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.FormsSimulationHelper.ExecuteSequence(System.String,System.Object,System.String,System.String)">
            <summary>
            Executes a sequence generator for a field (Oracle sequence simulation)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.FormsSimulationHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets a property value from an object using reflection with enhanced error handling
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.FormsSimulationHelper.SetSystemVariables(System.Object,TheTechIdea.Beep.Editor.UOWManager.Models.SystemVariableType,System.Object)">
            <summary>
            Sets common Oracle Forms system variables
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.FormsSimulationHelper.ValidateField(System.Object,System.String,System.Object,TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints)">
            <summary>
            Validates field constraints similar to Oracle Forms
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Helpers.PerformanceManager">
            <summary>
            Helper class for performance optimization and caching in UnitofWorksManager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.PerformanceManager.OptimizeBlockAccess">
            <summary>
            Optimizes block access by implementing various performance strategies
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.PerformanceManager.CacheBlockInfo(System.String,TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo)">
            <summary>
            Caches block information for faster access
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.PerformanceManager.GetCachedBlockInfo(System.String)">
            <summary>
            Gets cached block information
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.PerformanceManager.ClearCache">
            <summary>
            Clears all cached data
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.PerformanceManager.GetPerformanceStatistics">
            <summary>
            Gets performance statistics
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.PerformanceManager.PreloadFrequentBlocks(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Preloads frequently used blocks into cache
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.PerformanceManager.GetCacheEfficiencyMetrics">
            <summary>
            Gets cache efficiency metrics
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Helpers.RelationshipManager">
            <summary>
            Helper class for managing master-detail relationships between data blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.RelationshipManager.CreateMasterDetailRelation(System.String,System.String,System.String,System.String,TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipType)">
            <summary>
            Creates a master-detail relationship between blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.RelationshipManager.SynchronizeDetailBlocksAsync(System.String)">
            <summary>
            Synchronizes detail blocks when master record changes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.RelationshipManager.GetDetailBlocks(System.String)">
            <summary>
            Gets all blocks that are detail blocks of the specified master block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.RelationshipManager.GetMasterBlock(System.String)">
            <summary>
            Gets the master block name for a detail block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Helpers.RelationshipManager.RemoveBlockRelationships(System.String)">
            <summary>
            Removes all relationships for a block
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Interfaces.IUnitofWorksManager">
            <summary>
            Core interface for UnitofWorksManager functionality
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Interfaces.IRelationshipManager">
            <summary>
            Interface for relationship management functionality
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Interfaces.IDirtyStateManager">
            <summary>
            Interface for dirty state management functionality
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Interfaces.IEventManager">
            <summary>
            Interface for event handling functionality
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Interfaces.IFormsSimulationHelper">
            <summary>
            Interface for Oracle Forms simulation helpers
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Interfaces.IPerformanceManager">
            <summary>
            Interface for performance and caching functionality
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Interfaces.IConfigurationManager">
            <summary>
            Interface for configuration management
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration">
            <summary>
            Configuration settings for individual data blocks
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration.EnableCaching">
            <summary>Gets or sets whether caching is enabled for this block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration.EnableValidation">
            <summary>Gets or sets whether validation is enabled for this block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration.EnableAuditTrail">
            <summary>Gets or sets whether audit trail is enabled for this block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration.QueryTimeout">
            <summary>Gets or sets the query timeout in seconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration.MaxRecords">
            <summary>Gets or sets the maximum number of records to load</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration.CustomSettings">
            <summary>Gets or sets custom block settings</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration.EnableOptimisticLocking">
            <summary>Gets or sets whether to enable optimistic locking</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration.EnableBatchOperations">
            <summary>Gets or sets whether to enable batch operations</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration.BatchSize">
            <summary>Gets or sets the batch size for operations</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockConfiguration.EnableChangeTracking">
            <summary>Gets or sets whether to enable change tracking</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.BlockTriggerEventArgs">
            <summary>
            Event arguments for block-level triggers in Oracle Forms simulation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockTriggerEventArgs.BlockName">
            <summary>Gets the name of the block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockTriggerEventArgs.Message">
            <summary>Gets or sets the trigger message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockTriggerEventArgs.Cancel">
            <summary>Gets or sets whether the operation should be cancelled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockTriggerEventArgs.Data">
            <summary>Gets or sets additional data associated with the trigger</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockTriggerEventArgs.Timestamp">
            <summary>Gets the timestamp when the event was created</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.BlockTriggerEventArgs.TriggerSource">
            <summary>Gets or sets the source of the trigger</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.BlockTriggerEventArgs.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the BlockTriggerEventArgs class</summary>
            <param name="blockName">The name of the block</param>
            <param name="message">Optional message</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.CachedBlockInfo">
            <summary>
            Cached block information with metadata
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CachedBlockInfo.BlockInfo">
            <summary>Gets or sets the block information</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CachedBlockInfo.CacheTime">
            <summary>Gets or sets when the entry was cached</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CachedBlockInfo.AccessCount">
            <summary>Gets or sets the number of times this entry has been accessed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CachedBlockInfo.LastAccessed">
            <summary>Gets or sets when the entry was last accessed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CachedBlockInfo.IsPreloaded">
            <summary>Gets or sets whether this entry was preloaded</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CachedBlockInfo.Priority">
            <summary>Gets or sets the priority of this cache entry</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CachedBlockInfo.Size">
            <summary>Gets or sets the size of the cached data in bytes (approximate)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CachedBlockInfo.IsLocked">
            <summary>Gets or sets whether this entry is locked (cannot be evicted)</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.CachePriority">
            <summary>
            Cache priority levels
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.CachePriority.Low">
            <summary>Low priority - first to be evicted</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.CachePriority.Normal">
            <summary>Normal priority</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.CachePriority.High">
            <summary>High priority - kept longer</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.CachePriority.Critical">
            <summary>Critical priority - never evicted unless explicitly removed</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics">
            <summary>
            Cache efficiency metrics for performance analysis
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics.TotalRequests">
            <summary>Gets or sets the total number of cache requests</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics.HitRate">
            <summary>Gets or sets the cache hit rate (0.0 to 1.0)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics.MissRate">
            <summary>Gets or sets the cache miss rate (0.0 to 1.0)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics.CacheUtilization">
            <summary>Gets or sets the cache utilization percentage (0.0 to 1.0)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics.AverageAccessCount">
            <summary>Gets or sets the average access count per cached item</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics.ExpiredEntries">
            <summary>Gets or sets the number of expired entries removed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics.PreloadedEntries">
            <summary>Gets or sets the number of preloaded entries</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics.MemoryUsageBytes">
            <summary>Gets or sets the memory usage of the cache in bytes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics.EvictedEntries">
            <summary>Gets or sets the number of evicted entries due to size limits</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.CacheEfficiencyMetrics.AverageRetrievalTimeMs">
            <summary>Gets or sets the average time to retrieve from cache in milliseconds</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo">
            <summary>
            Information about a registered data block
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.BlockName">
            <summary>Gets or sets the name of the block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.UnitOfWork">
            <summary>Gets or sets the unit of work for this block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.EntityStructure">
            <summary>Gets or sets the entity structure</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.DataSourceName">
            <summary>Gets or sets the data source name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.IsMasterBlock">
            <summary>Gets or sets whether this is a master block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.Mode">
            <summary>Gets or sets the current mode of the block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.MasterBlockName">
            <summary>Gets or sets the master block name (if this is a detail block)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.MasterKeyField">
            <summary>Gets or sets the master key field name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.ForeignKeyField">
            <summary>Gets or sets the foreign key field name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.IsRegistered">
            <summary>Gets or sets whether the block is registered</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.RegisteredAt">
            <summary>Gets or sets when the block was registered</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.Configuration">
            <summary>Gets or sets the block configuration</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockInfo.ExtendedProperties">
            <summary>Gets or sets extended properties for the block</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockMode">
            <summary>
            Data block modes similar to Oracle Forms
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockMode.Query">
            <summary>Query mode - for querying data</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockMode.CRUD">
            <summary>CRUD mode - for create, read, update, delete operations</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockMode.ReadOnly">
            <summary>Read-only mode</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockMode.Insert">
            <summary>Insert mode - for adding new records</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipType">
            <summary>
            Types of relationships between blocks
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipType.OneToOne">
            <summary>One-to-one relationship</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipType.OneToMany">
            <summary>One-to-many relationship</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipType.ManyToOne">
            <summary>Many-to-one relationship</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipType.ManyToMany">
            <summary>Many-to-many relationship</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship">
            <summary>
            Extended data block relationship with additional metadata
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.MasterBlockName">
            <summary>Gets or sets the name of the master block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.DetailBlockName">
            <summary>Gets or sets the name of the detail block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.MasterKeyField">
            <summary>Gets or sets the key field in the master block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.DetailForeignKeyField">
            <summary>Gets or sets the foreign key field in the detail block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.RelationshipType">
            <summary>Gets or sets the type of relationship</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.IsActive">
            <summary>Gets or sets whether the relationship is active</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.CreatedDate">
            <summary>Gets or sets when the relationship was created</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.ModifiedDate">
            <summary>Gets or sets when the relationship was last modified</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.Description">
            <summary>Gets or sets a description of the relationship</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.ExtendedProperties">
            <summary>Gets or sets extended properties for the relationship</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.CascadeDelete">
            <summary>Gets or sets whether to cascade deletes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.CascadeUpdate">
            <summary>Gets or sets whether to cascade updates</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.Strength">
            <summary>Gets or sets the relationship strength (weak, strong)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.CustomSyncLogic">
            <summary>Gets or sets custom synchronization logic</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DataBlockRelationship.Metrics">
            <summary>Gets or sets performance metrics for the relationship</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipStrength">
            <summary>
            Relationship strength types
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipStrength.Weak">
            <summary>Weak relationship - detail records can exist without master</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipStrength.Strong">
            <summary>Strong relationship - detail records require master record</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipMetrics">
            <summary>
            Performance metrics for relationships
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipMetrics.SynchronizationCount">
            <summary>Gets or sets the total number of synchronizations</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipMetrics.AverageSyncTimeMs">
            <summary>Gets or sets the average synchronization time in milliseconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipMetrics.LastSyncTimeMs">
            <summary>Gets or sets the last synchronization time in milliseconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipMetrics.TotalRecordsSynchronized">
            <summary>Gets or sets the total number of records synchronized</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipMetrics.ErrorCount">
            <summary>Gets or sets the number of synchronization errors</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RelationshipMetrics.LastSyncTimestamp">
            <summary>Gets or sets the last synchronization timestamp</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo">
            <summary>
            Detailed information about a dirty block
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo.BlockName">
            <summary>Gets or sets the name of the block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo.EntityName">
            <summary>Gets or sets the name of the entity</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo.DirtyRecordCount">
            <summary>Gets or sets the number of dirty records in the block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo.LastModified">
            <summary>Gets or sets when the block was last modified</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo.HasErrors">
            <summary>Gets or sets whether the block has validation errors</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo.IsMasterBlock">
            <summary>Gets or sets whether this is a master block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo.DataSourceName">
            <summary>Gets or sets the data source name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo.Metadata">
            <summary>Gets or sets additional metadata</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo.ValidationErrors">
            <summary>Gets or sets the validation error messages</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DirtyBlockInfo.EstimatedSize">
            <summary>Gets or sets the size of the block in bytes (approximate)</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation">
            <summary>
            DML operation types for database operations
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation.Query">
            <summary>Query operation to retrieve data</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation.Insert">
            <summary>Insert operation to add new records</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation.Update">
            <summary>Update operation to modify existing records</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation.Delete">
            <summary>Delete operation to remove records</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation.Commit">
            <summary>Commit operation to save changes</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation.Rollback">
            <summary>Rollback operation to undo changes</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation.BulkInsert">
            <summary>Bulk insert operation for multiple records</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation.BulkUpdate">
            <summary>Bulk update operation for multiple records</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation.BulkDelete">
            <summary>Bulk delete operation for multiple records</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation.Merge">
            <summary>Merge operation (upsert)</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs">
            <summary>
            Event arguments for DML (Data Manipulation Language) triggers
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.BlockName">
            <summary>Gets the name of the block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.Operation">
            <summary>Gets the DML operation being performed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.UnitOfWorkParams">
            <summary>Gets the unit of work parameters</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.CurrentRecord">
            <summary>Gets or sets the current record being processed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.Message">
            <summary>Gets or sets a message associated with the trigger</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.Cancel">
            <summary>Gets or sets whether the operation should be cancelled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.Timestamp">
            <summary>Gets the timestamp when the event was created</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.RecordsAffected">
            <summary>Gets or sets the number of records affected</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.#ctor(System.String,TheTechIdea.Beep.Editor.UOWManager.Models.DMLOperation,TheTechIdea.Beep.Editor.UnitofWorkParams)">
            <summary>Initializes a new instance of the DMLTriggerEventArgs class</summary>
            <param name="blockName">The name of the block</param>
            <param name="operation">The DML operation being performed</param>
            <param name="unitOfWorkParams">Optional unit of work parameters</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.SetFieldValue(System.String,System.Object)">
            <summary>
            Sets a field value in the current record using reflection
            </summary>
            <param name="fieldName">Name of the field to set</param>
            <param name="value">Value to assign</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.GetFieldValue(System.String)">
            <summary>
            Gets a field value from the current record using reflection
            </summary>
            <param name="fieldName">Name of the field to get</param>
            <returns>Field value or null if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.SetCurrentDateTime(System.String)">
            <summary>
            Sets the current date/time to a field - common Oracle Forms pattern
            </summary>
            <param name="fieldName">Name of the date field</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.SetCurrentUser(System.String,System.String)">
            <summary>
            Sets the current user to a field - common Oracle Forms pattern
            </summary>
            <param name="fieldName">Name of the user field</param>
            <param name="currentUser">Current user name</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.DMLTriggerEventArgs.IsFieldNullOrEmpty(System.String)">
            <summary>
            Checks if a field is null or empty
            </summary>
            <param name="fieldName">Name of the field to check</param>
            <returns>True if field is null or empty</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs">
            <summary>
            Event arguments for error handling triggers
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.BlockName">
            <summary>Gets the name of the block where the error occurred</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.ErrorMessage">
            <summary>Gets the error message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.Exception">
            <summary>Gets the exception that caused the error</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.Timestamp">
            <summary>Gets the timestamp when the error occurred</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.Context">
            <summary>Gets or sets additional context information</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.Severity">
            <summary>Gets or sets the error severity level</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.Handled">
            <summary>Gets or sets whether the error has been handled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.ErrorCode">
            <summary>Gets or sets the error code if applicable</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.Operation">
            <summary>Gets or sets the operation that was being performed when the error occurred</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ErrorTriggerEventArgs class</summary>
            <param name="blockName">The name of the block where the error occurred</param>
            <param name="errorMessage">The error message</param>
            <param name="exception">Optional exception that caused the error</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorTriggerEventArgs.AddContext(System.String,System.Object)">
            <summary>
            Adds contextual information about the error
            </summary>
            <param name="key">The context key</param>
            <param name="value">The context value</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorSeverity">
            <summary>
            Error severity levels
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorSeverity.Info">
            <summary>Informational message</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorSeverity.Warning">
            <summary>Warning message</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorSeverity.Error">
            <summary>Error message</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorSeverity.Critical">
            <summary>Critical error message</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.ErrorSeverity.Fatal">
            <summary>Fatal error message</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints">
            <summary>
            Field validation constraints for Oracle Forms-style validation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints.Required">
            <summary>Gets or sets whether the field is required</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints.MaxLength">
            <summary>Gets or sets the maximum length for string fields</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints.MinValue">
            <summary>Gets or sets the minimum value for numeric fields</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints.MaxValue">
            <summary>Gets or sets the maximum value for numeric fields</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints.CustomValidator">
            <summary>Gets or sets a custom validation function</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints.CustomRules">
            <summary>Gets or sets additional validation rules</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints.AllowNull">
            <summary>Gets or sets whether null values are allowed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints.Pattern">
            <summary>Gets or sets a regex pattern for string validation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints.ValidValues">
            <summary>Gets or sets a list of valid values</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FieldConstraints.CaseSensitive">
            <summary>Gets or sets whether case-sensitive validation should be used</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs">
            <summary>
            Event arguments for form-level triggers in Oracle Forms simulation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs.FormName">
            <summary>Gets the name of the form</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs.Message">
            <summary>Gets or sets the trigger message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs.Cancel">
            <summary>Gets or sets whether the operation should be cancelled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs.Data">
            <summary>Gets or sets additional data associated with the trigger</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs.Timestamp">
            <summary>Gets the timestamp when the event was created</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs.TriggerSource">
            <summary>Gets or sets the source of the trigger</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs.OperationType">
            <summary>Gets or sets the form operation type</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs.Context">
            <summary>Gets or sets additional context information</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the FormTriggerEventArgs class</summary>
            <param name="formName">The name of the form</param>
            <param name="message">Optional message</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.FormTriggerEventArgs.AddContext(System.String,System.Object)">
            <summary>
            Adds contextual information to the event
            </summary>
            <param name="key">The context key</param>
            <param name="value">The context value</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.FormOperationType">
            <summary>
            Types of form operations
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.FormOperationType.Open">
            <summary>Form is being opened</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.FormOperationType.Close">
            <summary>Form is being closed</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.FormOperationType.Commit">
            <summary>Form data is being committed</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.FormOperationType.Rollback">
            <summary>Form data is being rolled back</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.FormOperationType.Validate">
            <summary>Form is being validated</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.FormOperationType.Clear">
            <summary>Form is being cleared</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.FormOperationType.Refresh">
            <summary>Form is being refreshed</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo">
            <summary>
            Information about current navigation state of a data block
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.BlockName">
            <summary>Gets or sets the name of the block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.CurrentIndex">
            <summary>Gets or sets the current record index (0-based)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.TotalRecords">
            <summary>Gets or sets the total number of records</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.HasPrevious">
            <summary>Gets or sets whether there is a previous record</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.HasNext">
            <summary>Gets or sets whether there is a next record</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.CurrentRecord">
            <summary>Gets or sets the current record object</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.IsAtFirst">
            <summary>Gets whether the current position is at the first record</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.IsAtLast">
            <summary>Gets whether the current position is at the last record</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.HasRecords">
            <summary>Gets whether the block has any records</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.IsEmpty">
            <summary>Gets whether the block is empty</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.RecordNumber">
            <summary>Gets the record number (1-based for display purposes)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.Metadata">
            <summary>Gets or sets additional navigation metadata</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.BlockMode">
            <summary>Gets or sets the block mode</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.IsCurrentRecordDirty">
            <summary>Gets or sets whether the current record is dirty</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationInfo.Metrics">
            <summary>Gets or sets navigation performance metrics</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationMetrics">
            <summary>
            Performance metrics for navigation operations
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationMetrics.NavigationCount">
            <summary>Gets or sets the total number of navigation operations</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationMetrics.AverageNavigationTimeMs">
            <summary>Gets or sets the average navigation time in milliseconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationMetrics.LastNavigationTimeMs">
            <summary>Gets or sets the last navigation time in milliseconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationMetrics.TotalSyncTimeMs">
            <summary>Gets or sets the total synchronization time for detail blocks</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs">
            <summary>
            Navigation trigger event arguments for Oracle Forms simulation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.BlockName">
            <summary>Gets the name of the block being navigated</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.FormName">
            <summary>Gets the name of the form containing the block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.NavigationType">
            <summary>Gets the type of navigation being performed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.TargetIndex">
            <summary>Gets or sets the target index for ToRecord navigation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.TargetKey">
            <summary>Gets or sets the target key for ToKey navigation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.SearchCriteria">
            <summary>Gets or sets the search criteria for ToSearch navigation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.Message">
            <summary>Gets or sets a message associated with the navigation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.Cancel">
            <summary>Gets or sets whether the navigation should be cancelled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.Timestamp">
            <summary>Gets the timestamp when the event was created</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.SourceRecord">
            <summary>Gets or sets the source record (before navigation)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.TargetRecord">
            <summary>Gets or sets the target record (after navigation)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.Context">
            <summary>Gets or sets additional context information</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.#ctor(System.String,System.String,TheTechIdea.Beep.Editor.UOWManager.Models.NavigationType)">
            <summary>Initializes a new instance of the NavigationTriggerEventArgs class</summary>
            <param name="blockName">The name of the block being navigated</param>
            <param name="formName">The name of the form containing the block</param>
            <param name="navigationType">The type of navigation being performed</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationTriggerEventArgs.AddContext(System.String,System.Object)">
            <summary>
            Adds contextual information to the navigation event
            </summary>
            <param name="key">The context key</param>
            <param name="value">The context value</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationType">
            <summary>
            Navigation types for triggers and operations
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationType.First">
            <summary>Navigate to first record</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationType.Next">
            <summary>Navigate to next record</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationType.Previous">
            <summary>Navigate to previous record</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationType.Last">
            <summary>Navigate to last record</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationType.CurrentChanged">
            <summary>Current record changed event</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationType.ToRecord">
            <summary>Navigate to specific record by index</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationType.ToKey">
            <summary>Navigate to record by key</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.NavigationType.ToSearch">
            <summary>Navigate to record by search criteria</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceMetric">
            <summary>
            Performance metric for tracking operation performance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceMetric.OperationName">
            <summary>Gets or sets the operation name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceMetric.Duration">
            <summary>Gets or sets the average duration of the operation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceMetric.Count">
            <summary>Gets or sets the number of times this operation has been executed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceMetric.MinDuration">
            <summary>Gets or sets the minimum duration recorded</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceMetric.MaxDuration">
            <summary>Gets or sets the maximum duration recorded</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceMetric.LastExecuted">
            <summary>Gets or sets the last execution time</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceMetric.TotalDuration">
            <summary>Gets or sets the total duration for all executions</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceMetric.Metadata">
            <summary>Gets or sets additional metadata for the metric</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics">
            <summary>
            Performance statistics for the manager
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.CacheHits">
            <summary>Gets or sets the number of cache hits</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.CacheMisses">
            <summary>Gets or sets the number of cache misses</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.CacheWrites">
            <summary>Gets or sets the number of cache writes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.CacheExpired">
            <summary>Gets or sets the number of expired cache entries</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.CacheClears">
            <summary>Gets or sets the number of cache clears</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.OptimizationCount">
            <summary>Gets or sets the optimization count</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.CurrentCacheSize">
            <summary>Gets or sets the current cache size</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.CacheHitRatio">
            <summary>Gets or sets the cache hit ratio</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.AverageOptimizationTime">
            <summary>Gets or sets the average optimization time</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.LastOptimizationTime">
            <summary>Gets or sets the last optimization time</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.LastCacheClearTime">
            <summary>Gets or sets the last cache clear time</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.PerformanceStatistics.TopPerformanceMetrics">
            <summary>Gets or sets the top performance metrics</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.RecordTriggerEventArgs">
            <summary>
            Event arguments for record-level triggers in Oracle Forms simulation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RecordTriggerEventArgs.BlockName">
            <summary>Gets the name of the block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RecordTriggerEventArgs.CurrentRecord">
            <summary>Gets the current record being processed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RecordTriggerEventArgs.Message">
            <summary>Gets or sets the trigger message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RecordTriggerEventArgs.Cancel">
            <summary>Gets or sets whether the operation should be cancelled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RecordTriggerEventArgs.Data">
            <summary>Gets or sets additional data associated with the trigger</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RecordTriggerEventArgs.Timestamp">
            <summary>Gets the timestamp when the event was created</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RecordTriggerEventArgs.TriggerSource">
            <summary>Gets or sets the source of the trigger</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RecordTriggerEventArgs.RecordIndex">
            <summary>Gets or sets the record index if applicable</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.RecordTriggerEventArgs.#ctor(System.String,System.Object,System.String)">
            <summary>Initializes a new instance of the RecordTriggerEventArgs class</summary>
            <param name="blockName">The name of the block</param>
            <param name="currentRecord">The current record being processed</param>
            <param name="message">Optional message</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.RollbackOptions">
            <summary>
            Options for rollback operations in dirty state management
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RollbackOptions.Default">
            <summary>Gets the default rollback options</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RollbackOptions.StopOnFirstError">
            <summary>Gets or sets whether to stop on the first error</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RollbackOptions.ClearAfterRollback">
            <summary>Gets or sets whether to clear data after rollback</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RollbackOptions.ConfirmBeforeRollback">
            <summary>Gets or sets whether to confirm before rollback</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RollbackOptions.BackupBeforeRollback">
            <summary>Gets or sets whether to backup data before rollback</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RollbackOptions.TimeoutSeconds">
            <summary>Gets or sets the timeout for rollback operations in seconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.RollbackOptions.LogProgress">
            <summary>Gets or sets whether to log progress</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.SaveOptions">
            <summary>
            Options for save operations in dirty state management
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveOptions.Default">
            <summary>Gets the default save options</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveOptions.ValidateBeforeSave">
            <summary>Gets or sets whether to validate before saving</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveOptions.StopOnFirstError">
            <summary>Gets or sets whether to stop on the first error</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveOptions.MaxRetries">
            <summary>Gets or sets the maximum number of retries</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveOptions.RetryDelayMs">
            <summary>Gets or sets the delay between retries in milliseconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveOptions.UseTransaction">
            <summary>Gets or sets whether to use transactions</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveOptions.BackupBeforeSave">
            <summary>Gets or sets whether to backup data before saving</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveOptions.TimeoutSeconds">
            <summary>Gets or sets the timeout for save operations in seconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveOptions.LogProgress">
            <summary>Gets or sets whether to log progress</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.SaveResult">
            <summary>
            Result of a save operation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveResult.BlockName">
            <summary>Gets or sets the name of the block that was saved</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveResult.Success">
            <summary>Gets or sets whether the save operation was successful</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveResult.ErrorMessage">
            <summary>Gets or sets the error message if the operation failed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveResult.Exception">
            <summary>Gets or sets the exception that occurred during the operation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveResult.RetryCount">
            <summary>Gets or sets the number of retry attempts made</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveResult.Duration">
            <summary>Gets or sets the duration of the save operation</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveResult.RecordsAffected">
            <summary>Gets or sets the number of records affected</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveResult.CompletedAt">
            <summary>Gets or sets the timestamp when the operation completed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.SaveResult.ResultData">
            <summary>Gets or sets additional result data</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.SystemVariableType">
            <summary>
            Types of system variables that can be set in Oracle Forms simulation
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.SystemVariableType.SystemDate">
            <summary>Current system date (without time)</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.SystemVariableType.SystemDateTime">
            <summary>Current system date and time</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.SystemVariableType.SystemUser">
            <summary>Current system user</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.SystemVariableType.RecordStatus">
            <summary>Record status (NEW, CHANGED, etc.)</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesAction">
            <summary>
            Actions that can be taken when unsaved changes are detected
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesAction.Save">
            <summary>Save all changes and continue with the operation</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesAction.Discard">
            <summary>Discard all changes and continue with the operation</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesAction.Cancel">
            <summary>Cancel the operation without saving or discarding</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesAction.Prompt">
            <summary>Prompt the user to decide what to do</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesAction.Backup">
            <summary>Apply changes to a backup copy first</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs">
            <summary>
            Enhanced event args for handling unsaved changes - Oracle Forms style
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.BlockName">
            <summary>Gets the name of the block that triggered the event</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.DirtyBlocks">
            <summary>Gets the list of all dirty blocks</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.DirtyBlockDetails">
            <summary>Gets or sets detailed information about dirty blocks</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.TotalAffectedRecords">
            <summary>Gets or sets the total number of affected records</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.EstimatedSaveTime">
            <summary>Gets or sets the estimated time to save all changes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.UserChoice">
            <summary>Gets or sets the user's choice for handling unsaved changes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.SaveOptions">
            <summary>Gets or sets the save options to use if saving</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.RollbackOptions">
            <summary>Gets or sets the rollback options to use if discarding</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.Message">
            <summary>Gets or sets a descriptive message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.Cancel">
            <summary>Gets or sets whether the operation was cancelled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.Timestamp">
            <summary>Gets the timestamp when the event was created</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.UnsavedChangesEventArgs.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>Initializes a new instance of the UnsavedChangesEventArgs class</summary>
            <param name="blockName">The name of the block that triggered the event</param>
            <param name="dirtyBlocks">The list of all dirty blocks</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult">
            <summary>
            Result of field validation operations
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.IsValid">
            <summary>Gets or sets whether the validation passed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.FieldName">
            <summary>Gets or sets the name of the field being validated</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.ErrorMessage">
            <summary>Gets or sets the primary error message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.BlockName">
            <summary>Gets or sets the name of the block containing the field</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.ValidationMessages">
            <summary>Gets or sets a collection of validation error messages</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.Severity">
            <summary>Gets or sets the severity level of the validation result</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.Context">
            <summary>Gets or sets additional context information</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.ValidationTimestamp">
            <summary>Gets or sets the timestamp when validation was performed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.ValidatedValue">
            <summary>Gets or sets the value that was validated</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.AddError(System.String)">
            <summary>Adds a validation error message</summary>
            <param name="message">The error message to add</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.AddWarning(System.String)">
            <summary>Adds a validation warning message</summary>
            <param name="message">The warning message to add</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationResult.AddContext(System.String,System.Object)">
            <summary>Adds contextual information</summary>
            <param name="key">The context key</param>
            <param name="value">The context value</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationSeverity">
            <summary>
            Validation severity levels
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationSeverity.Info">
            <summary>Informational message</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationSeverity.Warning">
            <summary>Warning message</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationSeverity.Error">
            <summary>Error message</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationSeverity.Critical">
            <summary>Critical error message</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs">
            <summary>
            Event arguments for validation triggers in Oracle Forms simulation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.BlockName">
            <summary>Gets the name of the block</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.FieldName">
            <summary>Gets or sets the name of the field being validated</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.Value">
            <summary>Gets or sets the value being validated</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.ValidationMessage">
            <summary>Gets or sets the validation message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.IsValid">
            <summary>Gets or sets whether the validation passed</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.Cancel">
            <summary>Gets or sets whether the operation should be cancelled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.ValidationErrors">
            <summary>Gets or sets the list of validation errors</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.Timestamp">
            <summary>Gets the timestamp when the event was created</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.Severity">
            <summary>Gets or sets the validation severity</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.Context">
            <summary>Gets or sets the validation context</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.#ctor(System.String,System.String,System.Object)">
            <summary>Initializes a new instance of the ValidationTriggerEventArgs class</summary>
            <param name="blockName">The name of the block</param>
            <param name="fieldName">Optional field name being validated</param>
            <param name="value">Optional value being validated</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.AddValidationError(System.String)">
            <summary>
            Adds a validation error and marks the validation as failed
            </summary>
            <param name="error">The error message to add</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.AddValidationWarning(System.String)">
            <summary>
            Adds a validation warning
            </summary>
            <param name="warning">The warning message to add</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOWManager.Models.ValidationTriggerEventArgs.AddContext(System.String,System.Object)">
            <summary>
            Adds contextual information
            </summary>
            <param name="key">The context key</param>
            <param name="value">The context value</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.DataImportManager">
            <summary>
            Core functionality partial class for DataImportManager
            Contains data source operations, entity management, and data fetching logic
            </summary>
            <summary>
            Enhanced DataImportManager with helper-based architecture and DefaultsManager integration
            Supports advanced data import operations with validation, transformation, batch processing, and progress monitoring
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.InitializeDataSources(TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration)">
            <summary>
            Initializes data sources if not already configured
            </summary>
            <param name="config">Import configuration</param>
            <returns>Task for async operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.EnsureDestinationEntityExists(TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration)">
            <summary>
            Ensures the destination entity exists, creating it if necessary
            </summary>
            <param name="config">Import configuration</param>
            <returns>Task for async operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.LoadSourceEntityStructure(TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration)">
            <summary>
            Loads the source entity structure
            </summary>
            <param name="config">Import configuration</param>
            <returns>Source entity structure</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.FetchSourceDataAsync(TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration,System.Threading.CancellationToken)">
            <summary>
            Fetches source data based on configuration
            </summary>
            <param name="config">Import configuration</param>
            <param name="token">Cancellation token</param>
            <returns>Source data enumerable</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.ConvertToEnumerable(System.Object,TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration,System.Threading.CancellationToken)">
            <summary>
            Converts various data result types to enumerable
            </summary>
            <param name="result">Raw data result</param>
            <param name="config">Import configuration</param>
            <param name="token">Cancellation token</param>
            <returns>Converted enumerable</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.ConvertDataTableToEnumerable(System.Data.DataTable,TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration)">
            <summary>
            Converts DataTable to enumerable objects
            </summary>
            <param name="table">DataTable to convert</param>
            <param name="config">Import configuration</param>
            <returns>Enumerable of objects</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.PauseImport">
            <summary>
            Pauses the import operation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.ResumeImport">
            <summary>
            Resumes the import operation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.CancelImport">
            <summary>
            Cancels the import operation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.GetImportStatus">
            <summary>
            Gets the current import status
            </summary>
            <returns>Import status information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.TestImportConfigurationAsync(TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration)">
            <summary>
            Tests the import configuration without executing the import
            </summary>
            <param name="config">Configuration to test</param>
            <returns>Validation result</returns>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.ValidationHelper">
            <summary>
            Gets the data validation helper instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.TransformationHelper">
            <summary>
            Gets the data transformation helper instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.BatchHelper">
            <summary>
            Gets the batch processing helper instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.ProgressHelper">
            <summary>
            Gets the progress monitoring helper instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.SourceEntityName">
            <summary>
            Source entity name
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.DestEntityName">
            <summary>
            Destination entity name
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.SourceDataSourceName">
            <summary>
            Source data source name
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.DestDataSourceName">
            <summary>
            Destination data source name
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.SourceEntityStructure">
            <summary>
            Source entity structure
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.DestEntityStructure">
            <summary>
            Destination entity structure
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.SourceData">
            <summary>
            Source data source instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.DestData">
            <summary>
            Destination data source instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.Mapping">
            <summary>
            Entity mapping configuration
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.SourceFilters">
            <summary>
            Source data filters
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.SelectedFields">
            <summary>
            Selected fields for import
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.DMEEditor">
            <summary>
            DME Editor instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.DataImportManager.ImportLogData">
            <summary>
            Import log data
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes a new instance of DataImportManager
            </summary>
            <param name="editor">The DME Editor instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.InitializeHelpers">
            <summary>
            Initializes the helper instances
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.InitializeConfiguration">
            <summary>
            Initializes the import configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.EnsureConfigInitialized">
            <summary>
            Ensures configuration is initialized
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.CreateImportConfiguration(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new import configuration
            </summary>
            <param name="sourceEntityName">Source entity name</param>
            <param name="sourceDataSourceName">Source data source name</param>
            <param name="destEntityName">Destination entity name</param>
            <param name="destDataSourceName">Destination data source name</param>
            <returns>New import configuration</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.SetImportConfiguration(TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration)">
            <summary>
            Sets the import configuration
            </summary>
            <param name="config">Import configuration</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.GetImportConfiguration">
            <summary>
            Gets the current import configuration
            </summary>
            <returns>Current import configuration</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.LoadDestEntityStructure(System.String,System.String)">
            <summary>
            Loads destination entity structure (backward compatible)
            </summary>
            <param name="destEntityName">Destination entity name</param>
            <param name="destDataSourceName">Destination data source name</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.RunImportAsync(System.IProgress{TheTechIdea.Beep.Addin.IPassedArgs},System.Threading.CancellationToken,System.Func{System.Object,System.Object},System.Int32)">
            <summary>
            Runs import asynchronously (backward compatible)
            </summary>
            <param name="progress">Progress reporter</param>
            <param name="token">Cancellation token</param>
            <param name="transformation">Custom transformation function</param>
            <param name="batchSize">Batch size</param>
            <returns>Import result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.RunImportAsync(TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration,System.IProgress{TheTechIdea.Beep.Addin.IPassedArgs},System.Threading.CancellationToken)">
            <summary>
            Runs import with enhanced configuration
            </summary>
            <param name="config">Import configuration</param>
            <param name="progress">Progress reporter</param>
            <param name="token">Cancellation token</param>
            <returns>Import result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.CreateErrorsInfo(TheTechIdea.Beep.ConfigUtil.Errors,System.String)">
            <summary>
            Creates an IErrorsInfo object with the specified flag and message
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.Dispose">
            <summary>
            Disposes resources used by the DataImportManager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.DataImportManager.Dispose(System.Boolean)">
            <summary>
            Disposes managed resources
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.ImportStatus">
            <summary>
            Import status information
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Examples.DataImportManagerExamples">
            <summary>
            Comprehensive examples demonstrating the enhanced DataImportManager functionality
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Examples.DataImportManagerExamples.Example1_SimpleDataImport">
            <summary>
            Example 1: Simple data import with backward compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Examples.DataImportManagerExamples.Example2_EnhancedConfigurationImport">
            <summary>
            Example 2: Enhanced import with configuration object
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Examples.DataImportManagerExamples.Example3_ValidatedImport">
            <summary>
            Example 3: Import with validation and testing
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Examples.DataImportManagerExamples.Example4_AdvancedFeaturesImport">
            <summary>
            Example 4: Import with custom helpers and advanced features
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Examples.DataImportManagerExamples.Example5_ControlledImport">
            <summary>
            Example 5: Import with pause/resume and cancellation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Examples.DataImportManagerExamples.Example6_DefaultsManagerIntegration">
            <summary>
            Example 6: Integration with DefaultsManager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Examples.DataImportManagerExamples.IsValidEmail(System.String)">
            <summary>
            Simple email validation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Examples.ImportProgressTracker">
            <summary>
            Helper class for tracking import progress with detailed metrics
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportBatchHelper">
            <summary>
            Helper class for batch processing operations in data import
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportBatchHelper.CalculateOptimalBatchSize(System.Int32,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Calculates optimal batch size based on data characteristics
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportBatchHelper.ProcessBatchAsync(System.Collections.Generic.IEnumerable{System.Object},TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>
            Processes a batch of records
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportBatchHelper.SplitIntoBatches(System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>
            Splits source data into batches
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportBatchHelper.EstimateBatchMemoryUsage(System.Collections.Generic.IEnumerable{System.Object},System.Int64)">
            <summary>
            Estimates memory usage for a batch
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportBatchHelper.ValidateBatchConfiguration(TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration,System.Int32)">
            <summary>
            Validates batch configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportBatchHelper.ProcessBatchWithRetryAsync(System.Collections.Generic.IEnumerable{System.Object},TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Int32)">
            <summary>
            Processes batches with retry logic
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportBatchHelper.CreateErrorsInfo(TheTechIdea.Beep.ConfigUtil.Errors,System.String)">
            <summary>
            Creates an IErrorsInfo object with the specified flag and message
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper">
            <summary>
            Helper class for progress monitoring and logging in data import operations
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.ImportLogData">
            <summary>
            Gets the import log data
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.LogImport(System.String,System.Int32)">
            <summary>
            Logs an import operation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.LogError(System.String,System.Exception)">
            <summary>
            Logs an error
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.ReportProgress(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Reports progress to the progress reporter
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.CalculatePerformanceMetrics(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Calculates and reports performance metrics
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.ClearLog">
            <summary>
            Clears the import log
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.GetLogEntriesByLevel(TheTechIdea.Beep.Editor.Importing.Interfaces.ImportLogLevel)">
            <summary>
            Gets log entries by level
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.GetLogEntriesByTimeRange(System.DateTime,System.DateTime)">
            <summary>
            Gets log entries within a time range
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.ExportLogToText">
            <summary>
            Exports log to text format
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.GetLogSummary">
            <summary>
            Gets summary statistics for the import log
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportProgressHelper.DetermineLogLevel(System.String)">
            <summary>
            Determines the log level based on message content
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Helpers.ImportLogSummary">
            <summary>
            Summary statistics for import logs
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportTransformationHelper">
            <summary>
            Helper class for data import transformation operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportTransformationHelper.ApplyFieldFiltering(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Applies field filtering to a record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportTransformationHelper.ApplyEntityMapping(System.Object,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap,System.String)">
            <summary>
            Applies entity mapping transformations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportTransformationHelper.ApplyDefaultValues(System.Object,System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.DefaultValue},TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Applies default values to a record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportTransformationHelper.ApplyCustomTransformation(System.Object,System.Func{System.Object,System.Object})">
            <summary>
            Applies custom transformation function
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportTransformationHelper.ApplyTransformationPipeline(System.Object,TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration)">
            <summary>
            Applies complete transformation pipeline
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportTransformationHelper.ShouldOverrideExistingValue(TheTechIdea.Beep.ConfigUtil.DefaultValue,System.Object)">
            <summary>
            Determines if an existing value should be overridden with a default value
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportTransformationHelper.ValidateTransformationResult(System.Object,System.Object,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates a transformation result
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportValidationHelper">
            <summary>
            Helper class for data import validation operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportValidationHelper.ValidateImportConfiguration(TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration)">
            <summary>
            Validates import configuration before execution
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportValidationHelper.ValidateEntityMapping(TheTechIdea.Beep.Workflow.Mapping.EntityDataMap)">
            <summary>
            Validates entity mapping configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportValidationHelper.ValidateEntityCompatibility(TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates source and destination entity compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportValidationHelper.ValidateDataSources(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource)">
            <summary>
            Validates data source connections
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportValidationHelper.ValidateDataSourceNames(System.String,System.String)">
            <summary>
            Validates data source names and their existence
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Helpers.DataImportValidationHelper.CreateErrorsInfo(TheTechIdea.Beep.ConfigUtil.Errors,System.String)">
            <summary>
            Creates an IErrorsInfo object with the specified flag and message
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportManager">
            <summary>
            Interface for managing data import operations
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportManager.ValidationHelper">
            <summary>
            Gets the data validation helper instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportManager.TransformationHelper">
            <summary>
            Gets the data transformation helper instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportManager.BatchHelper">
            <summary>
            Gets the batch processing helper instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportManager.ProgressHelper">
            <summary>
            Gets the progress monitoring helper instance
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportValidationHelper">
            <summary>
            Interface for data import validation operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportValidationHelper.ValidateImportConfiguration(TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration)">
            <summary>
            Validates import configuration before execution
            </summary>
            <param name="config">Import configuration to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportValidationHelper.ValidateEntityMapping(TheTechIdea.Beep.Workflow.Mapping.EntityDataMap)">
            <summary>
            Validates entity mapping configuration
            </summary>
            <param name="mapping">Entity mapping to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportValidationHelper.ValidateEntityCompatibility(TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates source and destination entity compatibility
            </summary>
            <param name="sourceEntity">Source entity structure</param>
            <param name="destEntity">Destination entity structure</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportValidationHelper.ValidateDataSources(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource)">
            <summary>
            Validates data source connections
            </summary>
            <param name="sourceDataSource">Source data source</param>
            <param name="destDataSource">Destination data source</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportTransformationHelper">
            <summary>
            Interface for data import transformation operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportTransformationHelper.ApplyFieldFiltering(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Applies field filtering to a record
            </summary>
            <param name="record">Source record</param>
            <param name="selectedFields">Fields to include</param>
            <returns>Filtered record</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportTransformationHelper.ApplyEntityMapping(System.Object,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap,System.String)">
            <summary>
            Applies entity mapping transformations
            </summary>
            <param name="record">Source record</param>
            <param name="mapping">Entity mapping configuration</param>
            <param name="targetEntityName">Target entity name</param>
            <returns>Transformed record</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportTransformationHelper.ApplyDefaultValues(System.Object,System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.DefaultValue},TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Applies default values to a record
            </summary>
            <param name="record">Target record</param>
            <param name="defaultValues">Default values to apply</param>
            <param name="entityStructure">Entity structure</param>
            <param name="dataSourceName">Data source name for context</param>
            <returns>Record with applied defaults</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportTransformationHelper.ApplyCustomTransformation(System.Object,System.Func{System.Object,System.Object})">
            <summary>
            Applies custom transformation function
            </summary>
            <param name="record">Source record</param>
            <param name="transformationFunction">Custom transformation function</param>
            <returns>Transformed record</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportTransformationHelper.ApplyTransformationPipeline(System.Object,TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration)">
            <summary>
            Applies complete transformation pipeline
            </summary>
            <param name="record">Source record</param>
            <param name="config">Import configuration</param>
            <returns>Fully transformed record</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportBatchHelper">
            <summary>
            Interface for batch processing operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportBatchHelper.CalculateOptimalBatchSize(System.Int32,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Calculates optimal batch size based on data characteristics
            </summary>
            <param name="totalRecords">Total number of records</param>
            <param name="estimatedRecordSize">Estimated size per record in bytes</param>
            <param name="availableMemory">Available memory for processing</param>
            <returns>Optimal batch size</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportBatchHelper.ProcessBatchAsync(System.Collections.Generic.IEnumerable{System.Object},TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>
            Processes a batch of records
            </summary>
            <param name="batch">Records to process</param>
            <param name="config">Import configuration</param>
            <param name="progress">Progress reporter</param>
            <param name="token">Cancellation token</param>
            <returns>Batch processing result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportBatchHelper.SplitIntoBatches(System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>
            Splits source data into batches
            </summary>
            <param name="sourceData">Source data to split</param>
            <param name="batchSize">Size of each batch</param>
            <returns>Enumerable of batches</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportProgressHelper">
            <summary>
            Interface for progress monitoring and logging operations
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportProgressHelper.ImportLogData">
            <summary>
            Gets the import log data
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportProgressHelper.LogImport(System.String,System.Int32)">
            <summary>
            Logs an import operation
            </summary>
            <param name="message">Log message</param>
            <param name="recordNumber">Associated record number</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportProgressHelper.LogError(System.String,System.Exception)">
            <summary>
            Logs an error
            </summary>
            <param name="message">Error message</param>
            <param name="exception">Exception details</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportProgressHelper.ReportProgress(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Reports progress to the progress reporter
            </summary>
            <param name="progress">Progress reporter</param>
            <param name="message">Progress message</param>
            <param name="recordsProcessed">Number of records processed</param>
            <param name="totalRecords">Total records to process</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportProgressHelper.CalculatePerformanceMetrics(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Calculates and reports performance metrics
            </summary>
            <param name="startTime">Import start time</param>
            <param name="recordsProcessed">Records processed so far</param>
            <param name="totalRecords">Total records to process</param>
            <returns>Performance metrics</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Importing.Interfaces.IDataImportProgressHelper.ClearLog">
            <summary>
            Clears the import log
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Interfaces.DataImportConfiguration">
            <summary>
            Configuration class for data import operations
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Interfaces.ImportPerformanceMetrics">
            <summary>
            Performance metrics for import operations
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Interfaces.Importlogdata">
            <summary>
            Import log data structure
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Importing.Interfaces.ImportLogLevel">
            <summary>
            Import log levels
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperOptions">
            <summary>
            Global options for the AutoObjMapper
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperOptions.Default">
            <summary>
            Default options instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperOptions.IgnoreNullSourceValues">
            <summary>
            When true, null values in source properties will not overwrite destination properties
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperOptions.IncludeNonPublicSetters">
            <summary>
            When true, includes non-public setters in destination properties
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperOptions.PropertyNameComparer">
            <summary>
            Comparer used for property name matching
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperOptions.ThrowOnMappingError">
            <summary>
            When true, throws exceptions for mapping errors. When false, logs errors and continues.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperOptions.MaxDepth">
            <summary>
            Maximum depth for circular reference detection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperOptions.EnableStatistics">
            <summary>
            When true, enables performance monitoring and statistics collection
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.MappingStatistics">
            <summary>
            Statistics about mapping operations
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.MappingStatistics.CachedMappersCount">
            <summary>
            Number of cached compiled mappers
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.MappingStatistics.RegisteredTypeMapsCount">
            <summary>
            Number of registered type maps
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.MappingStatistics.TotalMappingsPerformed">
            <summary>
            Total number of mappings performed
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.MappingStatistics.TotalMappingTime">
            <summary>
            Total time spent on mappings
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.MapperConfig">
            <summary>
            Configuration API for legacy mapper compatibility
            Provides configuration interface for type mappings
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MapperConfig.For``2">
            <summary>
            Configure mapping for specific type pair
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MapperConfig.GetTypeMap(System.Type,System.Type)">
            <summary>
            Gets type map configuration for specific types
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MapperConfig.GetConfiguredMapsCount">
            <summary>
            Gets the number of configured type maps
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MapperConfig.Clear">
            <summary>
            Clears all configured type maps
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Configuration.MapperConfiguration">
            <summary>
            Configuration API for AutoObjMapper
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Configuration.MapperConfiguration.For``2">
            <summary>
            Configure mapping for specific type pair
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Configuration.MapperConfiguration.GetRegisteredTypeMapsCount">
            <summary>
            Gets the count of registered type maps
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Configuration.MapperConfiguration.GetTypeMap(System.Type,System.Type)">
            <summary>
            Gets type map for specific source and destination types
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Configuration.TypeMapConfigurationBase">
            <summary>
            Base class for type mapping configuration
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Configuration.TypeMapConfiguration`2">
            <summary>
            Type-specific mapping configuration
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.TypeMap`2">
            <summary>
            Type-specific mapping configuration with fluent API
            Provides configuration options for mapping between specific source and destination types
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.TypeMap`2.Ignore(System.String)">
            <summary>
            Ignore a destination property during mapping
            </summary>
            <param name="destPropertyName">Name of the destination property to ignore</param>
            <returns>The current TypeMap instance for fluent chaining</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.TypeMap`2.ForMember(System.String,System.Func{`0,System.Object})">
            <summary>
            Configure a custom resolver for a destination property
            </summary>
            <param name="destPropertyName">Name of the destination property</param>
            <param name="resolver">Function to resolve the property value</param>
            <returns>The current TypeMap instance for fluent chaining</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.TypeMap`2.BeforeMap(System.Action{`0,`1})">
            <summary>
            Configure action to execute before mapping
            </summary>
            <param name="action">Action to execute before mapping</param>
            <returns>The current TypeMap instance for fluent chaining</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.TypeMap`2.AfterMap(System.Action{`0,`1})">
            <summary>
            Configure action to execute after mapping
            </summary>
            <param name="action">Action to execute after mapping</param>
            <returns>The current TypeMap instance for fluent chaining</returns>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.TypeMap`2.IgnoredPropertiesCount">
            <summary>
            Gets the number of ignored properties
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.TypeMap`2.CustomResolversCount">
            <summary>
            Gets the number of custom resolvers configured
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.TypeMap`2.IsPropertyIgnored(System.String)">
            <summary>
            Checks if a property is ignored
            </summary>
            <param name="propertyName">Property name to check</param>
            <returns>True if the property is ignored</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.TypeMap`2.HasCustomResolver(System.String)">
            <summary>
            Checks if a property has a custom resolver
            </summary>
            <param name="propertyName">Property name to check</param>
            <returns>True if the property has a custom resolver</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.TypeMapBase">
            <summary>
            Base class for type mapping configuration
            Provides common functionality for all type map configurations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.TypeMapBase.IsIgnored(System.String)">
            <summary>
            Checks if a destination property is ignored in the mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.TypeMapBase.TryGetResolver(System.String,System.Delegate@)">
            <summary>
            Attempts to get a custom resolver for a destination property
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.TypeMapBase.BeforeMapDelegate">
            <summary>
            Gets the delegate to execute before mapping
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.TypeMapBase.AfterMapDelegate">
            <summary>
            Gets the delegate to execute after mapping
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper">
            <summary>
            Core AutoObjMapper class - Main entry point for object mapping operations.
            Lightweight object mapper inspired by popular mappers (AutoMapper/TinyMapper).
            Goals:
            - Fast: expression-compiled assignment actions cached per (TSource, TDest)
            - Safe: nullable/enum conversions, optional ignore-null behavior
            - Flexible: per type-pair configuration (ignore members, custom resolvers, before/after hooks)
            - Zero dependencies, works with plain POCOs
            </summary>
            <summary>
            AutoObjMapper - Expression Builder functionality
            Handles the compilation of mapping expressions
            </summary>
            <summary>
            AutoObjMapper - Factory and Builder functionality
            Provides factory methods and builder pattern for creating mappers
            </summary>
            <summary>
            AutoObjMapper - Performance and Monitoring functionality
            </summary>
            <summary>
            AutoObjMapper - Validation and Error Handling functionality
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.Options">
            <summary>
            Gets the current mapper options
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.Configure(System.Action{TheTechIdea.Beep.Editor.Mapping.Interfaces.IMapperConfiguration})">
            <summary>
            Access to configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.Map``2(``0)">
            <summary>
            Maps source object to a new destination instance
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.Map``2(``0,``1)">
            <summary>
            Maps source object to an existing destination instance
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.GetStatistics">
            <summary>
            Gets statistics about cached mappers
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.ClearCache">
            <summary>
            Clears all cached compiled mappers
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.BuildSetter``2">
            <summary>
            Builds a compiled setter action for mapping between TSource and TDest
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.BuildPropertyMappings``2(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapBase)">
            <summary>
            Builds property mapping expressions
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.CreateAssignmentExpression(System.Linq.Expressions.ParameterExpression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression)">
            <summary>
            Creates an assignment expression with type conversion
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.Factory.CreateDefault">
            <summary>
            Creates a mapper with default options
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.Factory.CreateWithOptions(TheTechIdea.Beep.Editor.Mapping.AutoObjMapperOptions)">
            <summary>
            Creates a mapper with custom options
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.Factory.CreateWithConfiguration(System.Action{TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapperOptionsBuilder})">
            <summary>
            Creates a mapper using fluent configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.Factory.CreateHighPerformance">
            <summary>
            Creates a high-performance mapper optimized for speed
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.Factory.CreateDiagnostic">
            <summary>
            Creates a mapper optimized for debugging and diagnostics
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapperOptionsBuilder">
            <summary>
            Builder class for creating AutoObjMapperOptions fluently
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapperOptionsBuilder.IgnoreNullSourceValues(System.Boolean)">
            <summary>
            Configure null source value handling
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapperOptionsBuilder.IncludeNonPublicSetters(System.Boolean)">
            <summary>
            Configure non-public setter inclusion
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapperOptionsBuilder.ThrowOnMappingError(System.Boolean)">
            <summary>
            Configure error handling behavior
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapperOptionsBuilder.EnableStatistics(System.Boolean)">
            <summary>
            Configure statistics collection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapperOptionsBuilder.UsePropertyNameComparer(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Configure property name comparison
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapperOptionsBuilder.UseCaseSensitivePropertyMatching(System.Boolean)">
            <summary>
            Configure case-sensitive property matching
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapperOptionsBuilder.WithMaxDepth(System.Int32)">
            <summary>
            Configure maximum depth for circular reference detection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapperOptionsBuilder.Build">
            <summary>
            Builds the AutoObjMapperOptions
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.PerformanceHelper">
            <summary>
            Gets or creates the performance helper
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapWithMonitoring``2(``0,``1)">
            <summary>
            Maps source object to destination with performance monitoring
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapWithMonitoring``2(``0)">
            <summary>
            Maps source object to new destination instance with performance monitoring
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.GetMappingMetrics``2">
            <summary>
            Gets performance metrics for a specific type mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.ClearPerformanceMetrics">
            <summary>
            Clears performance metrics
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.ValidateMapping``2">
            <summary>
            Validates types before mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapWithValidation``2(``0,``1)">
            <summary>
            Maps with validation - throws exception if validation fails
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.MapWithValidation``2(``0)">
            <summary>
            Maps with validation - throws exception if validation fails
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.TryMap``2(``0,``1)">
            <summary>
            Safe mapping that returns result with success/error information
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapper.TryMap``2(``0)">
            <summary>
            Safe mapping that returns result with success/error information
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.MappingResult`1">
            <summary>
            Result of a mapping operation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.MappingResult`1.IsSuccess">
            <summary>
            Indicates if the mapping was successful
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.MappingResult`1.Value">
            <summary>
            The mapped value (valid only if IsSuccess is true)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.MappingResult`1.Error">
            <summary>
            Error message (valid only if IsSuccess is false)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.MappingResult`1.Warnings">
            <summary>
            Warnings from the mapping operation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MappingResult`1.Success(`0,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Creates a successful mapping result
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MappingResult`1.Failure(System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Creates a failed mapping result
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples">
            <summary>
            Examples demonstrating the usage of the refactored AutoObjMapper
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.BasicMappingExample">
            <summary>
            Example 1: Basic mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.FactoryMethodsExample">
            <summary>
            Example 2: Factory methods for different scenarios
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.AdvancedConfigurationExample">
            <summary>
            Example 3: Advanced configuration with custom resolvers
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.CollectionMappingExample">
            <summary>
            Example 4: Collection mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.PerformanceMonitoringExample">
            <summary>
            Example 5: Performance monitoring
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.ValidationAndErrorHandlingExample">
            <summary>
            Example 6: Validation and error handling
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.FluentConfigurationExample">
            <summary>
            Example 7: Fluent configuration builder
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.DetailedMappingExample">
            <summary>
            Example 8: Detailed mapping with diagnostics
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.PerformanceTrackingExample">
            <summary>
            Example 9: Performance tracking
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.UtilitiesExample">
            <summary>
            Example 10: Using utilities for quick operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Examples.AutoObjMapperExamples.RunAllExamples">
            <summary>
            Run all examples
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Extensions.AutoObjMapperExtensions">
            <summary>
            Extension methods for AutoObjMapper to provide additional utility functions
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.AutoObjMapperExtensions.MapCollection``2(TheTechIdea.Beep.Editor.Mapping.AutoObjMapper,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Maps a collection of objects
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.AutoObjMapperExtensions.MapCollection``2(TheTechIdea.Beep.Editor.Mapping.AutoObjMapper,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``1},System.Func{``1})">
            <summary>
            Maps a collection of objects to an existing collection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.AutoObjMapperExtensions.MapWithPerformanceTracking``2(TheTechIdea.Beep.Editor.Mapping.AutoObjMapper,``0,``1,System.TimeSpan@)">
            <summary>
            Maps objects with performance monitoring enabled
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.AutoObjMapperExtensions.CreateConfiguration``2(TheTechIdea.Beep.Editor.Mapping.AutoObjMapper)">
            <summary>
            Creates a fluent configuration builder
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.AutoObjMapperExtensions.MapWithDetails``2(TheTechIdea.Beep.Editor.Mapping.AutoObjMapper,``0,``1)">
            <summary>
            Validates and maps with detailed result information
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Extensions.FluentConfigurationBuilder`2">
            <summary>
            Fluent configuration builder for type mappings
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.FluentConfigurationBuilder`2.Ignore(System.String)">
            <summary>
            Ignore a destination property
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.FluentConfigurationBuilder`2.ForMember(System.String,System.Func{`0,System.Object})">
            <summary>
            Configure custom resolver for a property
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.FluentConfigurationBuilder`2.BeforeMap(System.Action{`0,`1})">
            <summary>
            Configure before-map action
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.FluentConfigurationBuilder`2.AfterMap(System.Action{`0,`1})">
            <summary>
            Configure after-map action
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.FluentConfigurationBuilder`2.Build">
            <summary>
            Apply the configuration and return the mapper
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Extensions.DetailedMappingResult`1">
            <summary>
            Detailed result of a mapping operation with full diagnostics
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Extensions.DetailedMappingResult`1.IsSuccess">
            <summary>
            Indicates if the mapping was successful
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Extensions.DetailedMappingResult`1.Value">
            <summary>
            The mapped value
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Extensions.DetailedMappingResult`1.ValidationResult">
            <summary>
            Validation result
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Extensions.DetailedMappingResult`1.Exception">
            <summary>
            Exception that occurred during mapping (if any)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Extensions.DetailedMappingResult`1.ElapsedTime">
            <summary>
            Time elapsed during mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Extensions.DetailedMappingResult`1.ToString">
            <summary>
            Gets a detailed summary of the mapping result
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingDefaultsHelper">
            <summary>
            Helper utilities to apply DefaultsManager rules and static defaults to mapped objects.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingDefaultsHelper.ApplyDefaultsToObject(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{TheTechIdea.Beep.DataBase.EntityField})">
            <summary>
            Apply default values (static and rule-based) to a destination object based on DefaultsManager configuration.
            Only applies a default when the current value is null (or default for value types).
            </summary>
            <param name="editor">Editor instance</param>
            <param name="destDataSourceName">Destination data source name</param>
            <param name="destEntityName">Destination entity name</param>
            <param name="destination">Destination object to set values on</param>
            <param name="destFields">Destination entity fields metadata</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingPerformanceHelper">
            <summary>
            Helper class for mapping performance monitoring and validation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingPerformanceHelper.RecordMapping``2(System.TimeSpan,System.Boolean)">
            <summary>
            Records mapping performance metrics
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingPerformanceHelper.GetMetrics``2">
            <summary>
            Gets performance metrics for a specific type pair
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingPerformanceHelper.GetAllMetrics">
            <summary>
            Gets all performance metrics
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingPerformanceHelper.ClearMetrics">
            <summary>
            Clears all performance metrics
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingPerformanceMetrics">
            <summary>
            Performance metrics for a specific type pair mapping
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Helpers.PerformanceMonitor">
            <summary>
            Helper for executing actions with performance monitoring
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.PerformanceMonitor.ExecuteWithMonitoring``1(System.Func{``0},System.Action{System.TimeSpan,System.Boolean})">
            <summary>
            Executes an action and measures its performance
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.PerformanceMonitor.ExecuteWithMonitoring(System.Action,System.Action{System.TimeSpan,System.Boolean})">
            <summary>
            Executes an action and measures its performance
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationHelper">
            <summary>
            Helper class for validating mapping operations and configurations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationHelper.ValidateTypes``2">
            <summary>
            Validates that source and destination types are suitable for mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationHelper.ValidateTypes(System.Type,System.Type)">
            <summary>
            Validates that source and destination types are suitable for mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationHelper.ValidateConfiguration``2(TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapBase,TheTechIdea.Beep.Editor.Mapping.AutoObjMapperOptions)">
            <summary>
            Validates mapping configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationHelper.ValidateInstance(System.Object,System.Type)">
            <summary>
            Validates that an object instance is suitable for mapping
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationResult">
            <summary>
            Result of a mapping validation operation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationResult.Errors">
            <summary>
            Gets all validation errors
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationResult.Warnings">
            <summary>
            Gets all validation warnings
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationResult.IsValid">
            <summary>
            Indicates if validation passed (no errors)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationResult.HasWarnings">
            <summary>
            Indicates if there are any warnings
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationResult.AddError(System.String)">
            <summary>
            Adds an error to the validation result
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationResult.AddWarning(System.String)">
            <summary>
            Adds a warning to the validation result
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationResult.Merge(TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationResult)">
            <summary>
            Merges another validation result into this one
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.MappingValidationResult.ToString">
            <summary>
            Gets a summary of the validation result
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Helpers.PropertyDiscoveryHelper">
            <summary>
            Helper class for discovering and analyzing properties for mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.PropertyDiscoveryHelper.GetPropertyMappings``2">
            <summary>
            Gets property mappings between source and destination types
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.PropertyDiscoveryHelper.GetReadableProperties(System.Type)">
            <summary>
            Gets all readable properties from a type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.PropertyDiscoveryHelper.GetWritableProperties(System.Type)">
            <summary>
            Gets all writable properties from a type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.PropertyDiscoveryHelper.FindMatchingSourceProperty(System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.String)">
            <summary>
            Finds a matching source property for the given destination property name
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Helpers.PropertyMapping">
            <summary>
            Represents a property mapping between source and destination
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Helpers.PropertyMapping.SourceProperty">
            <summary>
            Source property (can be null if no matching property found)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Helpers.PropertyMapping.DestProperty">
            <summary>
            Destination property
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Helpers.PropertyMapping.IsValid">
            <summary>
            Indicates if this mapping has a valid source property
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Helpers.TypeConversionHelper">
            <summary>
            Helper class for type conversions in mapping operations
            Centralized conversion that understands Nullable types, enums, and invariant culture numerics/DateTimes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.TypeConversionHelper.TryConvert(System.Object,System.Type)">
            <summary>
            Attempts to convert a value to the target type
            </summary>
            <param name="value">The value to convert</param>
            <param name="targetType">The target type to convert to</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.TypeConversionHelper.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.TypeConversionHelper.TryConvertEnum(System.Object,System.Type,System.Object@)">
            <summary>
            Attempts to convert to enum type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.TypeConversionHelper.TryConvertGuid(System.Object,System.Type,System.Object@)">
            <summary>
            Attempts to convert to Guid type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.TypeConversionHelper.TryConvertDateTime(System.Object,System.Type,System.Object@)">
            <summary>
            Attempts to convert to DateTime type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.TypeConversionHelper.TryConvertString(System.Object,System.Type,System.Object@)">
            <summary>
            Attempts to convert to string type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.TypeConversionHelper.TryConvertBoolean(System.Object,System.Type,System.Object@)">
            <summary>
            Attempts to convert to boolean type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.TypeConversionHelper.TryChangeType(System.Object,System.Type)">
            <summary>
            Fallback conversion using ChangeType
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Helpers.TypeConversionHelper.IsNumericType(System.Type)">
            <summary>
            Checks if a type is numeric
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Interfaces.IAutoObjMapper">
            <summary>
            Interface for the main AutoObjMapper functionality
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Interfaces.IAutoObjMapper.Options">
            <summary>
            Gets the current mapper options
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.IAutoObjMapper.Configure(System.Action{TheTechIdea.Beep.Editor.Mapping.Interfaces.IMapperConfiguration})">
            <summary>
            Access to configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.IAutoObjMapper.Map``2(``0)">
            <summary>
            Maps source object to a new destination instance
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.IAutoObjMapper.Map``2(``0,``1)">
            <summary>
            Maps source object to an existing destination instance
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.IAutoObjMapper.GetStatistics">
            <summary>
            Gets statistics about cached mappers
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.IAutoObjMapper.ClearCache">
            <summary>
            Clears all cached compiled mappers
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Interfaces.IMapperConfiguration">
            <summary>
            Interface for mapper configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.IMapperConfiguration.For``2">
            <summary>
            Configure mapping for specific type pair
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.IMapperConfiguration.GetRegisteredTypeMapsCount">
            <summary>
            Gets the count of registered type maps
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.IMapperConfiguration.GetTypeMap(System.Type,System.Type)">
            <summary>
            Gets type map for specific source and destination types
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapConfiguration`2">
            <summary>
            Interface for type-specific mapping configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapConfiguration`2.Ignore(System.String)">
            <summary>
            Ignore a destination property during mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapConfiguration`2.ForMember(System.String,System.Func{`0,System.Object})">
            <summary>
            Configure custom resolver for a destination property
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapConfiguration`2.BeforeMap(System.Action{`0,`1})">
            <summary>
            Configure action to execute before mapping
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapConfiguration`2.AfterMap(System.Action{`0,`1})">
            <summary>
            Configure action to execute after mapping
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapBase">
            <summary>
            Base interface for type map configuration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapBase.IsIgnored(System.String)">
            <summary>
            Check if a destination property is ignored
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapBase.TryGetResolver(System.String,System.Delegate@)">
            <summary>
            Try to get a custom resolver for a destination property
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapBase.BeforeMapDelegate">
            <summary>
            Gets the before-map action delegate
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.Interfaces.ITypeMapBase.AfterMapDelegate">
            <summary>
            Gets the after-map action delegate
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.ITypeMapConfig">
            <summary>
            Interface for type map configuration classes
            Used for internal type identification and organization
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.MappingManager">
            <summary>
            Provides utility methods to create and manage entity mappings between source and destination entities.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MappingManager.CreateEntityMap(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Creates an entity mapping for a given destination entity using a source entity and data source.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MappingManager.CreateEntityMap(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an entity mapping for migration between two entities in different data sources.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MappingManager.CreateEntityMap(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Creates a new entity mapping for the specified destination entity.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MappingManager.AddEntityToMappedEntities(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Adds a source entity to the mapped entities for a given destination entity.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MappingManager.MapEntityFields(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)">
            <summary>
            Maps fields from the source entity to the destination entity.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.MappingManager.MapObjectToAnother(TheTechIdea.Beep.Editor.IDMEEditor,System.String,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL,System.Object)">
            <summary>
            Maps source object to a new destination object using mapping, then applies defaults from DefaultsManager.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities">
            <summary>
            Static helper methods and utilities for AutoObjMapper
            Provides convenient static access to common mapping operations
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.DefaultMapper">
            <summary>
            Gets the default mapper instance (thread-safe singleton)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.Map``2(``0)">
            <summary>
            Maps using the default mapper instance
            </summary>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TDest">Destination type</typeparam>
            <param name="source">Source object</param>
            <returns>Mapped destination object</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.Map``2(``0,``1)">
            <summary>
            Maps using the default mapper instance to an existing destination
            </summary>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TDest">Destination type</typeparam>
            <param name="source">Source object</param>
            <param name="destination">Destination object</param>
            <returns>The destination object with mapped values</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.TryConvert(System.Object,System.Type)">
            <summary>
            Type conversion utility method
            </summary>
            <param name="value">Value to convert</param>
            <param name="targetType">Target type</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.TryMap``2(``0)">
            <summary>
            Safe mapping that returns a result instead of throwing exceptions
            </summary>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TDest">Destination type</typeparam>
            <param name="source">Source object</param>
            <returns>Mapping result with success/error information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.TryMap``2(``0,``1)">
            <summary>
            Safe mapping to an existing destination that returns a result instead of throwing exceptions
            </summary>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TDest">Destination type</typeparam>
            <param name="source">Source object</param>
            <param name="destination">Destination object</param>
            <returns>Mapping result with success/error information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.ValidateMapping``2">
            <summary>
            Validates mapping between two types using the default mapper
            </summary>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TDest">Destination type</typeparam>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.GetStatistics">
            <summary>
            Gets statistics from the default mapper
            </summary>
            <returns>Mapping statistics</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.ClearCache">
            <summary>
            Clears the cache of the default mapper
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.CreateFastMapper">
            <summary>
            Creates a new mapper with high-performance configuration
            </summary>
            <returns>High-performance configured mapper</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Mapping.AutoObjMapperUtilities.CreateDiagnosticMapper">
            <summary>
            Creates a new mapper with diagnostic configuration
            </summary>
            <returns>Diagnostic configured mapper</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UnitofWork_bk`1">
            <summary>
            Represents a unit of work for managing entities of type T.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork_bk`1._suppressNotification">
            <summary>Indicates whether notifications should be suppressed.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork_bk`1.tokenSource">
            <summary>A source for creating cancellation tokens.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork_bk`1.token">
            <summary>A token that can be used to request cancellation of an operation.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork_bk`1.IsPrimaryKeyString">
            <summary>Indicates whether the primary key is a string.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Ivalidated">
            <summary>Indicates whether the object has been validated.</summary>
            <remarks>
            This property is used to track whether the object has been validated or not.
            It is initially set to false and should be set to true after the validation process is completed.
            </remarks>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork_bk`1.IsNewRecord">
            <summary>Indicates whether a new record is being created.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork_bk`1.IsFilterOn">
            <summary>Indicates whether the filter is currently turned on.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWork_bk`1.IsDirty">
            <summary>Gets a value indicating whether the object is dirty.</summary>
            <returns>True if the object is dirty; otherwise, false.</returns>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Tempunits">
            <summary>A private observable binding list of type T.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork_bk`1._units">
            <summary>The collection of units.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork_bk`1._filteredunits">
            <summary>The filtered units collection.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWork_bk`1.FilteredUnits">
            <summary>Gets or sets the filtered units.</summary>
            <value>The filtered units.</value>
            <remarks>
            This property represents a collection of units that have been filtered based on certain criteria.
            When setting the value, the property will unsubscribe from the previous collection's PropertyChanged event and CollectionChanged event, if applicable.
            It will then subscribe to the new collection's PropertyChanged event and CollectionChanged event, if applicable.
            </remarks>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Units">
            <summary>Gets or sets the collection of units.</summary>
            <value>The collection of units.</value>
            <remarks>
            If the filter is applied, the filtered units collection will be returned.
            Otherwise, the original units collection will be returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.SetUnits(TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>Sets the units collection and raises the PropertyChanged event for the Units property.</summary>
            <param name="value">The new units collection.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.DetachHandlers(TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>Detaches event handlers from the specified collection and its items.</summary>
            <param name="collection">The collection to detach event handlers from.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.AttachHandlers(TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>Attaches event handlers to a collection and its items.</summary>
            <param name="collection">The collection to attach event handlers to.</param>
            <remarks>
            This method attaches a PropertyChanged event handler to each item in the collection,
            and a CollectionChanged event handler to the collection itself.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the UnitofWork class.</summary>
            <param name="dMEEditor">The IDMEEditor instance.</param>
            <param name="datasourceName">The name of the data source.</param>
            <param name="entityName">The name of the entity.</param>
            <param name="primaryKey">The primary key.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.Boolean,TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.String)" -->
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Clear">
            <summary>Clears the data in the collection.</summary>
            <remarks>
            This method clears the data in the collection by performing the following steps:
            1. Sets the <c>IsFilterOn</c> property to <c>false</c>.
            2. Clears the <c>Units</c> collection if it is not null.
            3. Initializes a new instance of the <c>_deletedentities</c> dictionary.
            4. If the collection is not in list mode, sets the <c>EntityType</c> property to the entity type obtained from the data source.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.getPrimaryKey(`0)">
            <summary>Determines the primary key of a document.</summary>
            <typeparam name="T">The type of the document.</typeparam>
            <param name="doc">The document.</param>
            <remarks>
            If the primary key is already set, this method does nothing.
            Otherwise, it attempts to find the primary key property of the document using the provided primary key name.
            If the primary key property is found, it checks if its type is string and sets the IsPrimaryKeyString flag accordingly.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.init">
            <summary>Initializes the object.</summary>
            <remarks>
            This method performs initialization tasks for the object. It first validates all necessary conditions
            using the Validateall() method. If the validation fails, the method returns without performing any further
            initialization. If the validation succeeds, the method proceeds to clear any existing data using the Clear() method.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Units_CurrentChanged(System.Object,System.EventArgs)">
            <summary>Handles the event when the current unit is changed.</summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
            <remarks>
            This method is called when the current unit is changed. It checks if the notification is suppressed and returns if it is.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.SetIDValue(`0,System.Object)">
            <summary>Sets the value of the primary key property for the specified entity.</summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="entity">The entity object.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentException">Thrown when the primary key property is not found on the entity.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.GetIDValue(`0)">
            <summary>Retrieves the value of the primary key property for the specified entity.</summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="entity">The entity object.</param>
            <returns>The value of the primary key property.</returns>
            <remarks>
            If the primary key property is not valid or cannot be retrieved, null is returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Getindex(System.String)">
            <summary>Returns the index of an entity with the specified ID.</summary>
            <param name="id">The ID of the entity.</param>
            <returns>The index of the entity in the collection, or -1 if not found.</returns>
            <remarks>
            This method first validates all entities in the collection using the Validateall() method.
            If validation fails, -1 is returned.
            Otherwise, it searches for an entity with a matching ID using reflection.
            If found, it returns the index of the entity in the collection.
            If not found, -1 is returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Getindex(`0)">
            <summary>Returns the index of the specified entity in the list of units.</summary>
            <param name="entity">The entity to find the index of.</param>
            <returns>The index of the entity in the list of units. Returns -1 if the list is not valid.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.GetLastIdentity">
            <summary>Returns the Last identity of the specified entity in the list of units.</summary>
            <param name="entity">The entity to find the Idnetity of.</param>
            <returns>The Identity of the entity in the list of units. Returns -1 if the list is not valid.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Read(System.String)">
            <summary>Reads an item from a collection based on its ID.</summary>
            <param name="id">The ID of the item to read.</param>
            <returns>The item with the specified ID, or the default value of the item type if the ID is not found or the collection is not valid.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.UpdateAsync(`0)">
            <summary>Updates a document asynchronously.</summary>
            <param name="doc">The document to be updated.</param>
            <returns>An object containing information about any errors that occurred during the update.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.InsertAsync(`0)">
            <summary>Inserts a document asynchronously.</summary>
            <param name="doc">The document to be inserted.</param>
            <returns>An object containing information about any errors that occurred during the insertion process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.DeleteAsync(`0)">
            <summary>Deletes a document asynchronously.</summary>
            <param name="doc">The document to be deleted.</param>
            <returns>An object containing information about any errors that occurred during the deletion process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.InsertDoc(`0)">
            <summary>Inserts a document into the data source.</summary>
            <typeparam name="T">The type of the document.</typeparam>
            <param name="doc">The document to insert.</param>
            <returns>An object containing information about any errors that occurred during the insertion.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.UpdateDoc(`0)">
            <summary>Updates a document and returns information about any errors that occurred.</summary>
            <param name="doc">The document to update.</param>
            <returns>An object containing information about any errors that occurred during the update.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.DeleteDoc(`0)">
            <summary>Deletes a document and returns information about any errors that occurred.</summary>
            <param name="doc">The document to delete.</param>
            <returns>An object containing information about any errors that occurred during the deletion process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.New">
            <summary>Adds a new entity to the collection and subscribes to its PropertyChanged event.</summary>
            <param name="entity">The entity to be added.</param>
            <remarks>
            This method first validates all entities in the collection using the Validateall method.
            If the validation fails, the method returns without adding the entity.
            Otherwise, the entity is added to the Units collection and the ItemPropertyChangedHandler is subscribed to its PropertyChanged event.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Add(`0)">
            <summary>Adds a new entity to the collection and subscribes to its PropertyChanged event.</summary>
            <param name="entity">The entity to be added.</param>
            <remarks>
            This method first validates all entities in the collection using the Validateall method.
            If the validation fails, the method returns without adding the entity.
            Otherwise, the entity is added to the Units collection and the ItemPropertyChangedHandler is subscribed to its PropertyChanged event.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Delete(System.String)">
            <summary>Deletes an object based on its ID.</summary>
            <param name="id">The ID of the object to delete.</param>
            <returns>An ErrorsInfo object indicating the result of the delete operation.</returns>
            <remarks>
            If the validation fails, the ErrorsInfo object will have a message of "Validation Failed" and a flag of Errors.Failed.
            If the object is found and successfully deleted, the ErrorsInfo object will have a message of "Delete Done" and a flag of Errors.Ok.
            If the object is not found, the ErrorsInfo object will have a message of "Object not found" and a flag of Errors.Failed.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Delete(`0)">
            <summary>Deletes an entity and returns information about the operation.</summary>
            <param name="entity">The entity to delete.</param>
            <returns>An ErrorsInfo object containing information about the delete operation.</returns>
            <remarks>
            If the entity passes validation, it will be deleted and the ErrorsInfo object will have a Flag of Errors.Ok and a Message of "Delete Done".
            If the entity fails validation, the ErrorsInfo object will have a Flag of Errors.Failed and a Message of "Validation Failed".
            If the entity is not found, the ErrorsInfo object will have a Flag of Errors.Failed and a Message of "Object not found".
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Update(`0)">
            <summary>Updates an entity and returns information about the operation.</summary>
            <param name="entity">The entity to be updated.</param>
            <returns>An ErrorsInfo object containing information about the update operation.</returns>
            <remarks>
            If the entity fails validation, the ErrorsInfo object will have a message indicating the failure and a flag set to Errors.Failed.
            If the entity is successfully updated, the ErrorsInfo object will have a message indicating the success and a flag set to Errors.Ok.
            If the entity is not found, the ErrorsInfo object will have a message indicating the failure and a flag set to Errors.Failed.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Update(System.String,`0)">
            <summary>Updates an entity with the specified ID.</summary>
            <param name="id">The ID of the entity to update.</param>
            <param name="entity">The updated entity.</param>
            <returns>An ErrorsInfo object indicating the result of the update operation.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Commit(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>Commits changes and returns information about any errors that occurred.</summary>
            <param name="progress">An object that reports progress during the commit process.</param>
            <param name="token">A cancellation token that can be used to cancel the commit process.</param>
            <returns>An object containing information about any errors that occurred during the commit process.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Commit" -->
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.GetSeq(System.String)">
            <summary>Gets the next value of a sequence.</summary>
            <param name="SeqName">The name of the sequence.</param>
            <returns>The next value of the sequence.</returns>
            <remarks>
            This method retrieves the next value of a sequence from the data source.
            If the data source is a relational database management system (RDBMS),
            it generates a query to fetch the next sequence value and executes it.
            The method returns -1 if the sequence value cannot be retrieved or if the data source is not an RDBMS.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.GetPrimaryKeySequence(`0)">
            <summary>Gets the primary key sequence for a document.</summary>
            <param name="doc">The document for which to retrieve the primary key sequence.</param>
            <returns>The primary key sequence value.</returns>
            <remarks>
            This method retrieves the primary key sequence for a document. It checks if the data source category is RDBMS
            and if a sequencer is specified. If both conditions are met, it retrieves the sequence value using the specified sequencer.
            If the sequence value is greater than 0, it sets the ID value of the document to the sequence value.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.GetQuery(System.String)">
            <summary>
            Retrieves a list of items based on the specified filters.
            </summary>
            <param name="filters">The list of filters to apply.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the list of items that match the filters.
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Get(System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Retrieves a list of items based on the specified filters.
            </summary>
            <param name="filters">The list of filters to apply.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the list of items that match the filters.
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Get">
            <summary>Retrieves a collection of entities asynchronously.</summary>
            <returns>An observable binding list of entities.</returns>
            <remarks>
            This method retrieves a collection of entities from the data source. If the application is not in list mode,
            it first gets the entity data from the data source and then processes the data in units. If an exception occurs
            during the data processing, a log message is added. Finally, the method returns the observable binding list of entities.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Get(System.Int32)">
            <summary>Retrieves the value associated with the specified key.</summary>
            <param name="key">The key of the value to retrieve.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Get(System.String)">
            <summary>Returns an object of type T based on the provided primary key.</summary>
            <param name="PrimaryKeyid">The value of the primary key.</param>
            <returns>An object of type T that matches the provided primary key, or null if no match is found.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.GetDataInUnits(System.Object)">
            <summary>Converts data to units and updates the internal state.</summary>
            <param name="retval">The data to be converted.</param>
            <returns>True if the conversion was successful, false otherwise.</returns>
            <exception cref="T:System.Exception">Thrown when an error occurs during the conversion.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.FindDocIdx(`0)" -->
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.DocExistByKey(`0)">
            <summary>Checks if a document exists in the collection based on its primary key.</summary>
            <typeparam name="T">The type of document.</typeparam>
            <param name="doc">The document to check.</param>
            <returns>The index of the document in the collection if it exists, otherwise -1.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.DocExist(`0)">
            <summary>Checks if a document exists in the collection and returns its index.</summary>
            <typeparam name="T">The type of document.</typeparam>
            <param name="doc">The document to check.</param>
            <returns>The index of the document if it exists in the collection, otherwise -1.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.GetIsDirty">
            <summary>Checks if the object is dirty.</summary>
            <returns>True if the object is dirty, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.GetAddedEntities">
            <summary>Returns a collection of all the added entities.</summary>
            <returns>An IEnumerable of integers representing the added entities.</returns>
            <remarks>
            If the validation of all entities fails, null is returned.
            The added entities are determined by filtering the _entityStates dictionary
            and selecting the keys (integers) where the corresponding value is EntityState.Added.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.GetModifiedEntities">
            <summary>Returns a collection of modified entity IDs.</summary>
            <returns>An IEnumerable of integers representing the IDs of modified entities.</returns>
            <remarks>
            If all entities pass the validation, the method returns the IDs of entities whose EntityState is set to Modified.
            If the validation fails, the method returns null.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.GetDeletedEntities">
            <summary>Returns a collection of deleted entities.</summary>
            <typeparam name="T">The type of entities.</typeparam>
            <returns>A collection of deleted entities.</returns>
            <remarks>
            This method checks if all entities are valid using the Validateall() method.
            If not all entities are valid, it returns null.
            Otherwise, it returns a collection of entities that have been marked as deleted.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Units_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>Handles the event when the list of units changes.</summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event arguments containing information about the change.</param>
            <remarks>
            This method is called when the list of units changes. It checks if the notification is suppressed,
            and if so, it returns without performing any further actions. If the change type is an item change,
            it retrieves the item at the specified index from the list of units. If the item's primary key value
            is not already present in the UpdatedKeys collection, it adds the key value to the collection along
            with an incremented index value.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Units_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Handles the CollectionChanged event of the Units collection.</summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.ItemPropertyChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Event handler for property changes in an item.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event arguments containing information about the changed property.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.FilterCollection(TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>Filters a collection based on a list of filters.</summary>
            <param name="originalCollection">The original collection to filter.</param>
            <param name="filters">The list of filters to apply.</param>
            <returns>A filtered collection.</returns>
            <remarks>
            This method uses reflection to dynamically build an expression tree based on the provided filters.
            Each filter is applied to the specified property of the collection's elements.
            If an error occurs during the filtering process, a log message is added and null is returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.FilterCollection(TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.String,System.Object)">
            <summary>Filters a collection based on a specified property and value.</summary>
            <param name="originalCollection">The original collection to filter.</param>
            <param name="propertyName">The name of the property to filter on.</param>
            <param name="value">The value to filter by.</param>
            <returns>A filtered collection based on the specified property and value.</returns>
            <remarks>
            This method uses reflection to dynamically filter the collection based on the specified property and value.
            If an error occurs during the filtering process, an error message is logged and null is returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.UndoDelete(`0,System.Int32)">
            <summary>Undoes a delete operation by reinserting an item at a specified index.</summary>
            <param name="itemToReinsert">The item to be reinserted.</param>
            <param name="indexToReinsertAt">The index at which the item should be reinserted.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.UndoDelete">
            <summary>Undoes the most recent deletion operation.</summary>
            <remarks>
            This method retrieves the most recently deleted item from the undo delete stack and reinserts it into the original collection at the original index.
            </remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="Units">The collection of items.</param>
            <param name="undoDeleteStack">The stack that stores the deleted items and their original indices.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the undo delete stack is empty.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.IsRequirmentsValidated">
            <summary>Checks if the requirements for a valid operation are validated.</summary>
            <returns>True if the requirements are validated, false otherwise.</returns>
            <remarks>
            The method checks for the following requirements:
            - EntityStructure: If it is null, sets the ErrorObject flag to Errors.Failed and the ErrorObject message to "Missing Entity Structure".
            - Entity PrimaryKey: Sets the ErrorObject flag to Errors.Failed and the ErrorObject message to "Missing Entity PrimaryKey".
            - DataSource: If it is null, sets the ErrorObject flag to Errors.Failed and the ErrorObject message to "Missing Entity Datasource".
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.OpenDataSource">
            <summary>Opens the data source.</summary>
            <returns>True if the data source is successfully opened, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork_bk`1.Validateall">
            <summary>Validates all necessary conditions before performing an operation.</summary>
            <returns>True if all conditions are valid, otherwise false.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples">
            <summary>
            Examples demonstrating usage of the refactored UnitofWork with DefaultsManager integration
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples.Customer">
            <summary>
            Example entity for demonstration purposes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples.BasicUsageExample(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Demonstrates basic UnitofWork initialization and usage
            </summary>
            <param name="editor">DME Editor instance</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples.DefaultsManagerIntegrationExample(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Demonstrates how to configure and use DefaultsManager with UnitofWork
            </summary>
            <param name="editor">DME Editor instance</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples.ConfigureCustomerDefaults(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Configures default values for Customer entity
            </summary>
            <param name="editor">DME Editor instance</param>
            <param name="dataSourceName">Data source name</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples.ListModeExample(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Demonstrates UnitofWork usage in list mode with in-memory data
            </summary>
            <param name="editor">DME Editor instance</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples.FilteringAndPagingExample(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Demonstrates filtering and paging capabilities
            </summary>
            <param name="editor">DME Editor instance</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples.ErrorHandlingExample(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Demonstrates error handling and validation
            </summary>
            <param name="editor">DME Editor instance</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples.EventHandlingExample(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Demonstrates event handling in UnitofWork
            </summary>
            <param name="editor">DME Editor instance</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples.PerformanceExample(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Demonstrates performance considerations and batch operations
            </summary>
            <param name="editor">DME Editor instance</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Examples.UnitofWorkExamples.RunAllExamples(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Runs all examples
            </summary>
            <param name="editor">DME Editor instance</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1">
            <summary>
            Helper class for data operations in UnitofWork
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes a new instance of UnitofWorkDataHelper
            </summary>
            <param name="editor">DME Editor instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.CloneEntity(`0)">
            <summary>
            Clones an entity
            </summary>
            <param name="entity">Entity to clone</param>
            <returns>Cloned entity</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.ConvertToEntity(System.Object)">
            <summary>
            Converts an object to the entity type
            </summary>
            <param name="source">Source object</param>
            <returns>Converted entity</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.GetEntityValues(`0)">
            <summary>
            Gets entity values as dictionary
            </summary>
            <param name="entity">Entity to extract values from</param>
            <returns>Dictionary of property names and values</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.SetEntityValues(`0,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sets entity values from dictionary
            </summary>
            <param name="entity">Entity to set values on</param>
            <param name="values">Dictionary of property names and values</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.CompareEntities(`0,`0)">
            <summary>
            Compares two entities for changes
            </summary>
            <param name="original">Original entity</param>
            <param name="current">Current entity</param>
            <returns>Dictionary of changed fields</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.IsComplexType(System.Type)">
            <summary>
            Checks if a type is a complex type that needs deep cloning
            </summary>
            <param name="type">Type to check</param>
            <returns>True if complex type</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.CloneComplexValue(System.Object)">
            <summary>
            Clones a complex value
            </summary>
            <param name="value">Value to clone</param>
            <returns>Cloned value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.CloneEnumerable(System.Collections.IEnumerable,System.Type)">
            <summary>
            Clones an enumerable collection
            </summary>
            <param name="enumerable">Enumerable to clone</param>
            <param name="enumerableType">Type of enumerable</param>
            <returns>Cloned enumerable</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.ConvertValue(System.Object,System.Type)">
            <summary>
            Converts a value to the target type
            </summary>
            <param name="value">Value to convert</param>
            <param name="targetType">Target type</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDataHelper`1.AreValuesEqual(System.Object,System.Object)">
            <summary>
            Checks if two values are equal
            </summary>
            <param name="value1">First value</param>
            <param name="value2">Second value</param>
            <returns>True if values are equal</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Helpers.TypeExtensions">
            <summary>
            Extension methods for type checking
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Checks if a type is nullable
            </summary>
            <param name="type">Type to check</param>
            <returns>True if nullable</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.TypeExtensions.IsNumericType(System.Type)">
            <summary>
            Checks if a type is numeric
            </summary>
            <param name="type">Type to check</param>
            <returns>True if numeric</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1">
            <summary>
            Helper class for managing default values in UnitofWork operations
            Integrates with DefaultsManager for comprehensive default value handling
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Initializes a new instance of UnitofWorkDefaultsHelper
            </summary>
            <param name="editor">DME Editor instance</param>
            <param name="dataSourceName">Data source name</param>
            <param name="entityName">Entity name</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.ApplyDefaults(`0,TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext)">
            <summary>
            Applies default values to an entity
            </summary>
            <param name="entity">Entity to apply defaults to</param>
            <param name="context">Context for default value resolution</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.ApplyDefaultsAsync(`0,TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext)">
            <summary>
            Applies default values to an entity asynchronously
            </summary>
            <param name="entity">Entity to apply defaults to</param>
            <param name="context">Context for default value resolution</param>
            <returns>Entity with defaults applied</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.HasDefaults(System.String)">
            <summary>
            Checks if defaults are configured for a specific field
            </summary>
            <param name="fieldName">Name of the field to check</param>
            <returns>True if defaults exist for the field</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.GetDefaultForField(System.String)">
            <summary>
            Gets the default value configuration for a specific field
            </summary>
            <param name="fieldName">Name of the field</param>
            <returns>Default value configuration or null if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.ApplyInsertDefaults(`0)">
            <summary>
            Applies defaults for insert operations
            </summary>
            <param name="entity">Entity being inserted</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.ApplyUpdateDefaults(`0)">
            <summary>
            Applies defaults for update operations
            </summary>
            <param name="entity">Entity being updated</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.ValidateAppliedDefaults(`0)">
            <summary>
            Validates that applied defaults meet entity constraints
            </summary>
            <param name="entity">Entity with applied defaults</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.EnsureCacheUpdated">
            <summary>
            Ensures the defaults cache is up to date
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.RefreshCache">
            <summary>
            Refreshes the defaults cache from DefaultsManager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.ShouldApplyDefault(System.Object,System.Type,TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext)">
            <summary>
            Determines if a default should be applied to a property
            </summary>
            <param name="currentValue">Current property value</param>
            <param name="propertyType">Property type</param>
            <param name="context">Default value context</param>
            <returns>True if default should be applied</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.ApplyDefaultToProperty(`0,System.Reflection.PropertyInfo,System.String,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Applies default value to a specific property
            </summary>
            <param name="entity">Entity to apply default to</param>
            <param name="property">Property to set</param>
            <param name="fieldName">Field name for default lookup</param>
            <param name="parameters">Parameters for default resolution</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.ApplyConditionalDefaults(`0,TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext,System.Boolean)">
            <summary>
            Applies conditional defaults based on context
            </summary>
            <param name="entity">Entity to apply defaults to</param>
            <param name="context">Default value context</param>
            <param name="isUpdate">Whether this is an update operation</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.CreatePassedArgs(TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext)">
            <summary>
            Creates PassedArgs for default value resolution
            </summary>
            <param name="context">Default value context</param>
            <returns>PassedArgs instance</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.ConvertValueToPropertyType(System.Object,System.Type)">
            <summary>
            Converts a value to the target property type
            </summary>
            <param name="value">Value to convert</param>
            <param name="targetType">Target type</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.ValidateDefaultValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Validates a default value for a property
            </summary>
            <param name="property">Property to validate</param>
            <param name="value">Value to validate</param>
            <returns>Validation error message or null if valid</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.IsNullableType(System.Type)">
            <summary>
            Checks if a type is nullable
            </summary>
            <param name="type">Type to check</param>
            <returns>True if type is nullable</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.IsAuditField(TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext)">
            <summary>
            Checks if the context indicates an audit field
            </summary>
            <param name="context">Default value context</param>
            <returns>True if this is an audit field context</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.IsExplicitlyConfiguredForUpdate(TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext)">
            <summary>
            Checks if field is explicitly configured for update defaults
            </summary>
            <param name="context">Default value context</param>
            <returns>True if configured for update defaults</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkDefaultsHelper`1.GetCurrentUser">
            <summary>
            Gets the current user context
            </summary>
            <returns>Current user identifier</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1">
            <summary>
            Helper class for validation operations in UnitofWork
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Initializes a new instance of UnitofWorkValidationHelper
            </summary>
            <param name="editor">DME Editor instance</param>
            <param name="entityStructure">Entity structure</param>
            <param name="primaryKeyName">Primary key field name</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateEntity(`0)">
            <summary>
            Validates an entity
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateForInsert(`0)">
            <summary>
            Validates an entity for insert operation
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateForUpdate(`0)">
            <summary>
            Validates an entity for update operation
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateForDelete(`0)">
            <summary>
            Validates an entity for delete operation
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidatePrimaryKey(`0)">
            <summary>
            Validates primary key for an entity
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateRequiredFields(`0)">
            <summary>
            Validates required fields for an entity
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateDataTypes(`0)">
            <summary>
            Validates data types and constraints
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateFieldLengths(`0)">
            <summary>
            Validates field lengths
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateBusinessRules(`0)">
            <summary>
            Validates custom business rules
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateInsertSpecificRules(`0)">
            <summary>
            Validates insert-specific rules
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateUpdateSpecificRules(`0)">
            <summary>
            Validates update-specific rules
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateDeleteSpecificRules(`0)">
            <summary>
            Validates delete-specific rules
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateNoDuplicateKey(`0)">
            <summary>
            Validates no duplicate key exists
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.ValidateFieldDataType(TheTechIdea.Beep.DataBase.EntityField,System.Object,System.Type)">
            <summary>
            Validates field data type
            </summary>
            <param name="field">Entity field</param>
            <param name="value">Value to validate</param>
            <param name="propertyType">Property type</param>
            <returns>Error message or null if valid</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.IsNumericType(System.Type)">
            <summary>
            Checks if a type is numeric
            </summary>
            <param name="type">Type to check</param>
            <returns>True if numeric</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Helpers.UnitofWorkValidationHelper`1.IsIdentityField">
            <summary>
            Checks if the primary key field is an identity field
            </summary>
            <returns>True if identity field</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Interfaces.IDefaultValueResolver">
            <summary>
            Interface for resolving default values using rules and formulas
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.Interfaces.IDefaultValueResolver.ResolverName">
            <summary>
            Gets the name of the resolver
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.Interfaces.IDefaultValueResolver.SupportedRuleTypes">
            <summary>
            Gets the supported rule types for this resolver
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IDefaultValueResolver.ResolveValue(System.String,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Resolves a default value based on the rule and parameters
            </summary>
            <param name="rule">The rule string to resolve</param>
            <param name="parameters">Parameters for rule resolution</param>
            <returns>The resolved value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IDefaultValueResolver.CanHandle(System.String)">
            <summary>
            Validates if the rule can be handled by this resolver
            </summary>
            <param name="rule">The rule string to validate</param>
            <returns>True if the rule can be handled</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IDefaultValueResolver.GetExamples">
            <summary>
            Gets example usage for this resolver
            </summary>
            <returns>List of example rule strings</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDefaults`1">
            <summary>
            Interface for default value operations in UnitofWork
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDefaults`1.ApplyDefaults(`0,TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext)">
            <summary>
            Applies default values to an entity
            </summary>
            <param name="entity">Entity to apply defaults to</param>
            <param name="context">Context for default value resolution</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDefaults`1.ApplyDefaultsAsync(`0,TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext)">
            <summary>
            Applies default values to an entity asynchronously
            </summary>
            <param name="entity">Entity to apply defaults to</param>
            <param name="context">Context for default value resolution</param>
            <returns>Entity with defaults applied</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDefaults`1.HasDefaults(System.String)">
            <summary>
            Checks if defaults are configured for a specific field
            </summary>
            <param name="fieldName">Name of the field to check</param>
            <returns>True if defaults exist for the field</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDefaults`1.GetDefaultForField(System.String)">
            <summary>
            Gets the default value configuration for a specific field
            </summary>
            <param name="fieldName">Name of the field</param>
            <returns>Default value configuration or null if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDefaults`1.ApplyInsertDefaults(`0)">
            <summary>
            Applies defaults for insert operations
            </summary>
            <param name="entity">Entity being inserted</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDefaults`1.ApplyUpdateDefaults(`0)">
            <summary>
            Applies defaults for update operations
            </summary>
            <param name="entity">Entity being updated</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDefaults`1.ValidateAppliedDefaults(`0)">
            <summary>
            Validates that applied defaults meet entity constraints
            </summary>
            <param name="entity">Entity with applied defaults</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkValidation`1">
            <summary>
            Interface for validation operations in UnitofWork
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkValidation`1.ValidateEntity(`0)">
            <summary>
            Validates an entity
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkValidation`1.ValidateForInsert(`0)">
            <summary>
            Validates an entity for insert operation
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkValidation`1.ValidateForUpdate(`0)">
            <summary>
            Validates an entity for update operation
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkValidation`1.ValidateForDelete(`0)">
            <summary>
            Validates an entity for delete operation
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkValidation`1.ValidatePrimaryKey(`0)">
            <summary>
            Validates primary key for an entity
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkValidation`1.ValidateRequiredFields(`0)">
            <summary>
            Validates required fields for an entity
            </summary>
            <param name="entity">Entity to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDataHelper`1">
            <summary>
            Interface for data operations helper in UnitofWork
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDataHelper`1.CloneEntity(`0)">
            <summary>
            Clones an entity
            </summary>
            <param name="entity">Entity to clone</param>
            <returns>Cloned entity</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDataHelper`1.ConvertToEntity(System.Object)">
            <summary>
            Converts an object to the entity type
            </summary>
            <param name="source">Source object</param>
            <returns>Converted entity</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDataHelper`1.GetEntityValues(`0)">
            <summary>
            Gets entity values as dictionary
            </summary>
            <param name="entity">Entity to extract values from</param>
            <returns>Dictionary of property names and values</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDataHelper`1.SetEntityValues(`0,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sets entity values from dictionary
            </summary>
            <param name="entity">Entity to set values on</param>
            <param name="values">Dictionary of property names and values</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkDataHelper`1.CompareEntities(`0,`0)">
            <summary>
            Compares two entities for changes
            </summary>
            <param name="original">Original entity</param>
            <param name="current">Current entity</param>
            <returns>Dictionary of changed fields</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkStateHelper`1">
            <summary>
            Interface for state management in UnitofWork
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkStateHelper`1.GetEntityState(`0)">
            <summary>
            Gets the current state of an entity
            </summary>
            <param name="entity">Entity to check</param>
            <returns>Entity state</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkStateHelper`1.SetEntityState(`0,TheTechIdea.Beep.Editor.EntityState)">
            <summary>
            Sets the state of an entity
            </summary>
            <param name="entity">Entity to set state for</param>
            <param name="state">New state</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkStateHelper`1.MarkForDeletion(`0)">
            <summary>
            Marks entity for deletion
            </summary>
            <param name="entity">Entity to mark for deletion</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkStateHelper`1.MarkAsModified(`0)">
            <summary>
            Marks entity as modified
            </summary>
            <param name="entity">Entity to mark as modified</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkStateHelper`1.MarkAsAdded(`0)">
            <summary>
            Marks entity as added
            </summary>
            <param name="entity">Entity to mark as added</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkStateHelper`1.ResetState(`0)">
            <summary>
            Resets entity state to unchanged
            </summary>
            <param name="entity">Entity to reset</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkEventHelper`1">
            <summary>
            Interface for event management in UnitofWork
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkEventHelper`1.CreateEventParams(`0,TheTechIdea.Beep.Editor.EventAction)">
            <summary>
            Creates event parameters for UnitofWork operations
            </summary>
            <param name="entity">Entity involved</param>
            <param name="action">Event action</param>
            <returns>Event parameters</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkEventHelper`1.HandlePropertyChanged(`0,System.String,System.Object,System.Object)">
            <summary>
            Handles property changed events
            </summary>
            <param name="entity">Entity that changed</param>
            <param name="propertyName">Name of changed property</param>
            <param name="oldValue">Old value</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkEventHelper`1.RaiseEntityEvent(`0,TheTechIdea.Beep.Editor.EventAction,System.Boolean)">
            <summary>
            Raises appropriate events for entity operations
            </summary>
            <param name="entity">Entity involved</param>
            <param name="action">Action being performed</param>
            <param name="isPreEvent">True for pre-events, false for post-events</param>
            <returns>True if operation should continue</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkCollectionHelper`1">
            <summary>
            Interface for collection management in UnitofWork
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkCollectionHelper`1.SynchronizeCollections(TheTechIdea.Beep.Editor.ObservableBindingList{`0},TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>
            Synchronizes collections
            </summary>
            <param name="source">Source collection</param>
            <param name="target">Target collection</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkCollectionHelper`1.FilterCollection(TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Filters collection based on criteria
            </summary>
            <param name="collection">Collection to filter</param>
            <param name="filters">Filter criteria</param>
            <returns>Filtered collection</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkCollectionHelper`1.ApplyPaging(TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.Int32,System.Int32)">
            <summary>
            Applies paging to collection
            </summary>
            <param name="collection">Collection to page</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <returns>Paged collection</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.Interfaces.IUnitofWorkCollectionHelper`1.SortCollection(TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.String,System.Boolean)">
            <summary>
            Sorts collection
            </summary>
            <param name="collection">Collection to sort</param>
            <param name="sortField">Field to sort by</param>
            <param name="ascending">Sort direction</param>
            <returns>Sorted collection</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext">
            <summary>
            Context for default value resolution
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext.Operation">
            <summary>
            Operation being performed (Insert, Update, etc.)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext.DataSourceName">
            <summary>
            Data source name
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext.EntityName">
            <summary>
            Entity name
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext.UserContext">
            <summary>
            User context information
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext.Parameters">
            <summary>
            Additional parameters for default resolution
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext.IsNewEntity">
            <summary>
            Whether this is a new entity
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.Interfaces.DefaultValueContext.Timestamp">
            <summary>
            Timestamp of the operation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.IUnitOfWorkWrapper">
            <summary>
            Interface for Unit of Work wrapper operations
            Provides strongly-typed access to dynamic UnitOfWork functionality
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.UnitofWork`1">
            <summary>
            Core partial class for UnitofWork - Contains core properties, constructors and basic functionality
            This is the refactored version with helper-based architecture and DefaultsManager integration
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <summary>
            Additional CRUD operations and async methods partial class for UnitofWork
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <summary>
            Utility methods partial class for UnitofWork - Contains utility methods that were missing from the refactored version
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <summary>
            CRUD Operations partial class for UnitofWork with DefaultsManager integration
            Handles Create, Read, Update, Delete operations with enhanced default value support
            </summary>
            <typeparam name="T">The type of entity</typeparam>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._suppressNotification">
            <summary>Indicates whether notifications should be suppressed.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.tokenSource">
            <summary>A source for creating cancellation tokens.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.token">
            <summary>A token that can be used to request cancellation of an operation.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.IsPrimaryKeyString">
            <summary>Indicates whether the primary key is a string.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Ivalidated">
            <summary>Indicates whether the object has been validated.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.IsNewRecord">
            <summary>Indicates whether a new record is being created.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.IsFilterOn">
            <summary>Indicates whether the filter is currently turned on.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Tempunits">
            <summary>A private observable binding list of type T for backup/rollback purposes.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._units">
            <summary>The collection of units.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._filteredunits">
            <summary>The filtered units collection.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._entityStates">
            <summary>Entity states tracking</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._deletedentities">
            <summary>Deleted entities tracking</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PKProperty">
            <summary>Primary key property info</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.CurrentProperty">
            <summary>Current property being processed</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Guidproperty">
            <summary>GUID property info</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.keysidx">
            <summary>Keys index counter</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._primarykey">
            <summary>Primary key field name</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.disposedValue">
            <summary>Disposal flag</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._defaultsHelper">
            <summary>Helper for default value operations</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._validationHelper">
            <summary>Helper for validation operations</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._dataHelper">
            <summary>Helper for data operations</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._stateHelper">
            <summary>Helper for state management</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._eventHelper">
            <summary>Helper for event management</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UOW.UnitofWork`1._collectionHelper">
            <summary>Helper for collection operations</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.IsDirty">
            <summary>Gets a value indicating whether the object is dirty.</summary>
            <returns>True if the object is dirty; otherwise, false.</returns>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.IsInListMode">
            <summary>Gets or sets whether the unit of work is in list mode</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.DeletedUnits">
            <summary>Gets the list of deleted units</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.InsertedKeys">
            <summary>Gets the dictionary of inserted keys</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.UpdatedKeys">
            <summary>Gets the dictionary of updated keys</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.DeletedKeys">
            <summary>Gets the dictionary of deleted keys</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.IsIdentity">
            <summary>Gets or sets whether the primary key is identity</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Sequencer">
            <summary>Gets or sets the sequencer name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.DatasourceName">
            <summary>Gets or sets the data source name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.EntityStructure">
            <summary>Gets or sets the entity structure</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.DMEEditor">
            <summary>Gets the DME Editor instance</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.DataSource">
            <summary>Gets or sets the data source</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.EntityName">
            <summary>Gets or sets the entity name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.EntityType">
            <summary>Gets or sets the entity type</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PrimaryKey">
            <summary>Gets or sets the primary key field name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GuidKey">
            <summary>Gets or sets the GUID key field name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PageIndex">
            <summary>Gets or sets the current page index</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PageSize">
            <summary>Gets or sets the page size</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.TotalItemCount">
            <summary>Gets the total item count</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.FilterExpression">
            <summary>Gets or sets the filter expression</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.CurrentItem">
            <summary>Gets the current item</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.FilteredUnits">
            <summary>Gets or sets the filtered units.</summary>
            <value>The filtered units.</value>
            <remarks>
            This property represents a collection of units that have been filtered based on certain criteria.
            When setting the value, the property will unsubscribe from the previous collection's PropertyChanged event and CollectionChanged event, if applicable.
            It will then subscribe to the new collection's PropertyChanged event and CollectionChanged event, if applicable.
            </remarks>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Units">
            <summary>Gets or sets the collection of units.</summary>
            <value>The collection of units.</value>
            <remarks>
            If the filter is applied, the filtered units collection will be returned.
            Otherwise, the original units collection will be returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.#ctor">
            <summary>
            Parameterless constructor for designer support
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Initializes a new instance of the UnitofWork class
            </summary>
            <param name="dMEEditor">The IDMEEditor instance</param>
            <param name="datasourceName">The name of the data source</param>
            <param name="entityName">The name of the entity</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Initializes a new instance of the UnitofWork class with entity structure
            </summary>
            <param name="dMEEditor">The IDMEEditor instance</param>
            <param name="datasourceName">The name of the data source</param>
            <param name="entityName">The name of the entity</param>
            <param name="entityStructure">The entity structure</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.Boolean,TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>
            Initializes a new instance of the UnitofWork class for list mode operations
            </summary>
            <param name="dMEEditor">The IDMEEditor instance</param>
            <param name="isInListMode">A boolean indicating whether the unit is in list mode</param>
            <param name="ts">The ObservableBindingList of type T</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the UnitofWork class with primary key
            </summary>
            <param name="dMEEditor">The IDMEEditor instance</param>
            <param name="datasourceName">The name of the data source</param>
            <param name="entityName">The name of the entity</param>
            <param name="primarykey">The primary key</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Initializes a new instance of the UnitofWork class with entity structure and primary key
            </summary>
            <param name="dMEEditor">The IDMEEditor instance</param>
            <param name="datasourceName">The name of the data source</param>
            <param name="entityName">The name of the entity</param>
            <param name="entityStructure">The structure of the entity</param>
            <param name="primarykey">The primary key of the entity</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.Boolean,TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.String)">
            <summary>
            Initializes a new instance of the UnitofWork class for list mode with primary key
            </summary>
            <param name="dMEEditor">The IDMEEditor instance</param>
            <param name="isInListMode">A boolean indicating whether the unit is in list mode</param>
            <param name="ts">The ObservableBindingList of type T</param>
            <param name="primarykey">The primary key string</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.InitializeHelpers">
            <summary>
            Initializes all helper instances
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.InitializePrimaryKey">
            <summary>
            Initializes primary key information
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.RegisterEntityType">
            <summary>
            Registers the entity type in the type cache
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.init">
            <summary>
            Initializes the object
            </summary>
            <remarks>
            This method performs initialization tasks for the object. It first validates all necessary conditions
            using the Validateall() method. If the validation fails, the method returns without performing any further
            initialization. If the validation succeeds, the method proceeds to clear any existing data using the Clear() method.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.getPrimaryKey(`0)">
            <summary>
            Determines the primary key of a document
            </summary>
            <param name="doc">The document</param>
            <remarks>
            If the primary key is already set, this method does nothing.
            Otherwise, it attempts to find the primary key property of the document using the provided primary key name.
            If the primary key property is found, it checks if its type is string and sets the IsPrimaryKeyString flag accordingly.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.SetUnits(TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>
            Sets the units collection and raises the PropertyChanged event for the Units property
            </summary>
            <param name="value">The new units collection</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.DetachHandlers(TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>
            Detaches event handlers from the specified collection and its items
            </summary>
            <param name="collection">The collection to detach event handlers from</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.AttachHandlers(TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>
            Attaches event handlers to a collection and its items
            </summary>
            <param name="collection">The collection to attach event handlers to</param>
            <remarks>
            This method attaches a PropertyChanged event handler to each item in the collection,
            and a CollectionChanged event handler to the collection itself.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.OpenDataSource">
            <summary>
            Opens the data source
            </summary>
            <returns>True if the data source is successfully opened, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Validateall">
            <summary>
            Validates all necessary conditions before performing an operation
            </summary>
            <returns>True if all conditions are valid, otherwise false</returns>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PropertyChanged">
            <summary>
            Event for property changed notifications
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property that changed</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Dispose(System.Boolean)">
            <summary>
            Disposes the object
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Delete(System.Func{`0,System.Boolean})">
            <summary>
            Deletes an entity using a predicate
            </summary>
            <param name="predicate">Predicate to find the entity to delete</param>
            <returns>Result of the delete operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Delete(`0)">
            <summary>
            Deletes the specified entity
            </summary>
            <param name="entity">Entity to delete</param>
            <returns>Result of the delete operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Delete">
            <summary>
            Deletes the current entity
            </summary>
            <returns>Result of the delete operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.DeleteAsync(`0)">
            <summary>
            Asynchronously deletes an entity from the data source
            </summary>
            <param name="doc">The entity to delete</param>
            <returns>Result of the delete operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.DeleteDoc(`0)">
            <summary>
            Deletes a document from the data source
            </summary>
            <param name="doc">The document to delete</param>
            <returns>Result of the delete operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Commit(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>
            Commits all changes to the data source with progress reporting and cancellation support
            </summary>
            <param name="progress">Progress reporter</param>
            <param name="token">Cancellation token</param>
            <returns>Result of the commit operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Commit">
            <summary>
            Commits all changes to the data source
            </summary>
            <returns>Result of the commit operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Rollback">
            <summary>
            Rolls back all uncommitted changes
            </summary>
            <returns>Result of the rollback operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.CommitChangesToDataSource(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>
            Commits individual changes to the data source with progress reporting
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.UpdateLog">
            <summary>
            Update log for tracking changes (placeholder - would need full implementation)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.SaveLog(System.String)">
            <summary>
            Saves the change log to a file
            </summary>
            <param name="pathandname">Path and filename for the log</param>
            <returns>True if successful</returns>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PreCreate">
            <summary>Event fired before creating a new entity</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PostCreate">
            <summary>Event fired after creating a new entity</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PreInsert">
            <summary>Event fired before inserting to data source</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PostInsert">
            <summary>Event fired after inserting to data source</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PreUpdate">
            <summary>Event fired before updating in data source</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PostUpdate">
            <summary>Event fired after updating in data source</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PreDelete">
            <summary>Event fired before deleting from data source</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PostDelete">
            <summary>Event fired after deleting from data source</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PreQuery">
            <summary>Event fired before querying data</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PostQuery">
            <summary>Event fired after querying data</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PreCommit">
            <summary>Event fired before committing changes</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PostCommit">
            <summary>Event fired after committing changes</summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.PostEdit">
            <summary>Event fired after property changes</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Clear">
            <summary>
            Clears all data from the collection and resets state
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetIsDirty">
            <summary>
            Gets whether the unit of work has uncommitted changes
            </summary>
            <returns>True if there are uncommitted changes</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.DocExist(`0)">
            <summary>
            Checks if a document exists in the collection
            </summary>
            <param name="doc">The document to check</param>
            <returns>Index of the document, or -1 if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.DocExistByKey(`0)">
            <summary>
            Checks if a document exists by its primary key value
            </summary>
            <param name="doc">The document to check</param>
            <returns>Index of the document, or -1 if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.FindDocIdx(`0)">
            <summary>
            Finds the index of a document in the collection
            </summary>
            <param name="doc">The document to find</param>
            <returns>Index of the document, or -1 if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Getindex(System.String)">
            <summary>
            Gets the index of an entity by its primary key value
            </summary>
            <param name="id">The primary key value</param>
            <returns>Index of the entity, or -1 if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Getindex(`0)">
            <summary>
            Gets the index of an entity in the collection
            </summary>
            <param name="entity">The entity to find</param>
            <returns>Index of the entity, or -1 if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetItemFroCurrentList(System.Int32)">
            <summary>
            Gets an entity from the current list by index
            </summary>
            <param name="index">The index</param>
            <returns>The entity at the specified index</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.UndoLastChange">
            <summary>
            Undoes the last change made to the collection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetAddedEntities">
            <summary>
            Gets the indices of entities that have been added
            </summary>
            <returns>Enumerable of indices</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetModifiedEntities">
            <summary>
            Gets the indices of entities that have been modified
            </summary>
            <returns>Enumerable of indices</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetDeletedEntities">
            <summary>
            Gets the entities that have been deleted
            </summary>
            <returns>Enumerable of deleted entities</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.MoveFirst">
            <summary>
            Moves to the first entity in the collection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.MoveNext">
            <summary>
            Moves to the next entity in the collection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.MovePrevious">
            <summary>
            Moves to the previous entity in the collection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.MoveLast">
            <summary>
            Moves to the last entity in the collection
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.MoveTo(System.Int32)">
            <summary>
            Moves to the entity at the specified index
            </summary>
            <param name="index">The index to move to</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.ItemPropertyChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles property changes on individual entities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Units_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection change events
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetDataInUnits(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets data from the enumerable and puts it into the Units collection
            </summary>
            <param name="retval">The enumerable data source</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.FilterCollection(TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Filters the collection based on the provided filters
            </summary>
            <param name="collection">The collection to filter</param>
            <param name="filters">The filters to apply</param>
            <returns>Filtered collection</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.ApplyFilter(System.Collections.Generic.IEnumerable{`0},TheTechIdea.Beep.Report.AppFilter)">
            <summary>
            Applies a single filter to the enumerable
            </summary>
            <param name="items">The items to filter</param>
            <param name="filter">The filter to apply</param>
            <returns>Filtered enumerable</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.CompareValues(System.Object,System.Object,System.String)">
            <summary>
            Compares two values based on the operator
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetPropertyValue(`0,System.String)">
            <summary>
            Gets a property value using reflection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.IsLogging">
            <summary>
            Gets whether logging is enabled
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Delete(System.String)">
            <summary>
            Deletes an entity by its string ID
            </summary>
            <param name="id">The string ID of the entity to delete</param>
            <returns>Error information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetTrackingITem(`0)">
            <summary>
            Gets the tracking item for an entity - Fixed return type to match interface
            </summary>
            <param name="item">The entity</param>
            <returns>Tracking information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Read(System.String)">
            <summary>
            Reads an item from a collection based on its ID
            </summary>
            <param name="id">The ID of the item to read</param>
            <returns>The item with the specified ID, or the default value of the item type if the ID is not found or the collection is not valid</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Read(System.Func{`0,System.Boolean})">
            <summary>
            Reads an item using a predicate function
            </summary>
            <param name="predicate">The predicate function to find the item</param>
            <returns>The first item matching the predicate or default if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.MultiRead(System.Func{`0,System.Boolean})">
            <summary>
            Reads multiple items using a predicate function
            </summary>
            <param name="predicate">The predicate function to find items</param>
            <returns>A task containing the collection of matching items</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Get">
            <summary>
            Retrieves a collection of entities asynchronously
            </summary>
            <returns>An observable binding list of entities</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Get(System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Retrieves a list of items based on the specified filters
            </summary>
            <param name="filters">The list of filters to apply</param>
            <returns>A task that represents the asynchronous operation containing the filtered list</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetQuery(System.String)">
            <summary>
            Retrieves items based on a query string
            </summary>
            <param name="query">The query string</param>
            <returns>A task containing the query results</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Get(System.Int32)">
            <summary>
            Retrieves the value associated with the specified key
            </summary>
            <param name="key">The key of the value to retrieve</param>
            <returns>The value associated with the specified key</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Get(System.String)">
            <summary>
            Returns an object of type T based on the provided primary key
            </summary>
            <param name="PrimaryKeyid">The value of the primary key</param>
            <returns>An object of type T that matches the provided primary key, or null if no match is found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.New">
            <summary>
            Creates a new entity and adds it to the collection with default values applied
            </summary>
            <remarks>
            This method validates the collection, creates a new entity, applies default values,
            raises pre/post create events, and adds the entity to the collection.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Add(`0)">
            <summary>
            Adds a new entity to the collection with default values applied
            </summary>
            <param name="entity">The entity to be added</param>
            <remarks>
            This method validates the collection, applies default values, raises pre/post create events,
            and adds the entity to the collection with PropertyChanged event subscription.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Update(System.Func{`0,System.Boolean},`0)">
            <summary>
            Updates an entity using a predicate with default values applied
            </summary>
            <param name="predicate">Predicate to find the entity</param>
            <param name="updatedEntity">The updated entity</param>
            <returns>Result of the update operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Update(`0)">
            <summary>
            Updates an entity with default values applied
            </summary>
            <param name="entity">The entity to be updated</param>
            <returns>An ErrorsInfo object containing information about the update operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.Update(System.String,`0)">
            <summary>
            Updates an entity with the specified ID and applies default values
            </summary>
            <param name="id">The ID of the entity to update</param>
            <param name="entity">The updated entity</param>
            <returns>An ErrorsInfo object indicating the result of the update operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.UpdateAsync(`0)">
            <summary>
            Updates a document asynchronously with default values applied
            </summary>
            <param name="doc">The document to be updated</param>
            <returns>An object containing information about any errors that occurred during the update</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.InsertAsync(`0)">
            <summary>
            Inserts a document asynchronously with default values applied
            </summary>
            <param name="doc">The document to be inserted</param>
            <returns>An object containing information about any errors that occurred during the insertion process</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.InsertDoc(`0)">
            <summary>
            Inserts a document into the data source with default values applied
            </summary>
            <param name="doc">The document to insert</param>
            <returns>An object containing information about any errors that occurred during the insertion</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.UpdateDoc(`0)">
            <summary>
            Updates a document and returns information about any errors that occurred
            </summary>
            <param name="doc">The document to update</param>
            <returns>An object containing information about any errors that occurred during the update</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetPrimaryKeySequence(`0)">
            <summary>
            Gets the primary key sequence for a document
            </summary>
            <param name="doc">The document for which to retrieve the primary key sequence</param>
            <returns>The primary key sequence value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetSeq(System.String)">
            <summary>
            Gets the next value of a sequence
            </summary>
            <param name="SeqName">The name of the sequence</param>
            <returns>The next value of the sequence</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetLastIdentity">
            <summary>
            Returns the Last identity of the specified entity in the list of units
            </summary>
            <returns>The Identity of the entity in the list of units. Returns -1 if the list is not valid</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.SetIDValue(`0,System.Object)">
            <summary>
            Sets the value of the primary key property for the specified entity
            </summary>
            <param name="entity">The entity object</param>
            <param name="value">The value to set</param>
            <exception cref="T:System.ArgumentException">Thrown when the primary key property is not found on the entity</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.GetIDValue(`0)">
            <summary>
            Retrieves the value of the primary key property for the specified entity
            </summary>
            <param name="entity">The entity object</param>
            <returns>The value of the primary key property</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitofWork`1.IsRequirmentsValidated">
            <summary>
            Checks if the requirements for a valid operation are validated
            </summary>
            <returns>True if the requirements are validated, false otherwise</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.EntityUpdateInsertLog">
            <summary>
            Represents a log entry for entity updates/inserts
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.UnitOfWorkFactory">
            <summary>
            Simplified factory for creating UnitOfWork instances when types are determined at runtime.
            For compile-time known types, use UnitofWork&lt;T&gt; constructors directly.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.UnitOfWorkFactory.Configuration">
            <summary>Configuration options for the factory</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkFactory.CreateUnitOfWork(System.Type,TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String)">
            <summary>
            Creates a UnitOfWork instance when the entity type is determined at runtime.
            For compile-time known types, use: new UnitofWork&lt;YourType&gt;(...) directly.
            </summary>
            <param name="entityType">The runtime-determined entity type</param>
            <param name="dmeEditor">The IDMEEditor instance</param>
            <param name="datasourceName">The name of the data source</param>
            <param name="entityName">The name of the entity</param>
            <param name="primaryKey">The primary key field name (optional)</param>
            <returns>UnitOfWork instance wrapped for safe usage</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkFactory.CreateUnitOfWork(System.Type,TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Creates a UnitOfWork instance with EntityStructure when the type is determined at runtime
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkFactory.CreateUnitOfWork(System.String,TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Creates a UnitOfWork from a string type name (legacy support)
            For new code, resolve the Type first and use the Type-based overload
            </summary>
            <param name="entityTypeName">Full name of the entity type</param>
            <param name="dmeEditor">The IDMEEditor instance</param>
            <param name="datasourceName">The name of the data source</param>
            <param name="entityName">The name of the entity</param>
            <returns>UnitOfWork instance</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkFactory.GetUnitOfWork(System.String,System.String,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Legacy method - kept for backward compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkFactory.CreateUnitOfWorkBatch(System.Collections.Generic.Dictionary{System.Type,System.String},TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Creates multiple UnitOfWork instances for runtime-determined types
            Useful for configuration-driven or plugin scenarios
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkFactory.CreateUnitOfWorkFromInstance(System.Object,TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Creates UnitOfWork from an entity instance (automatically detects type)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkFactory.ClearCaches">
            <summary>Clears all caches</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkFactory.GetCacheStatistics">
            <summary>Gets cache statistics</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.CacheStatistics">
            <summary>Cache statistics for monitoring factory performance</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper">
            <summary>
            Enhanced wrapper around dynamic UnitOfWork providing strongly-typed interface
            with improved error handling, validation, and Oracle Forms compatibility
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.CurrentItem">
            <summary>
            Gets the current item (current record) - Oracle Forms equivalent
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.CurrentIndex">
            <summary>
            Gets the current index (current record position) - Oracle Forms equivalent
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.Count">
            <summary>
            Gets the total count of records - Oracle Forms equivalent
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.MoveFirst">
            <summary>
            Move to first record - Oracle Forms GO_RECORD(FIRST_RECORD) equivalent
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.MoveNext">
            <summary>
            Move to next record - Oracle Forms NEXT_RECORD equivalent
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.MovePrevious">
            <summary>
            Move to previous record - Oracle Forms PREVIOUS_RECORD equivalent
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.MoveLast">
            <summary>
            Move to last record - Oracle Forms GO_RECORD(LAST_RECORD) equivalent
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.MoveTo(System.Int32)">
            <summary>
            Move to specific record index - Oracle Forms GO_RECORD equivalent
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.IsAtFirst">
            <summary>
            Checks if current position is at first record
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.IsAtLast">
            <summary>
            Checks if current position is at last record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.TryMoveNext">
            <summary>
            Safely move to next record, returns true if successful
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapper.TryMovePrevious">
            <summary>
            Safely move to previous record, returns true if successful
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapperExtensions">
            <summary>
            Extension methods for UnitOfWorkWrapper to provide additional functionality
            and Oracle Forms-like operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapperExtensions.ForEachRecordAsync``1(TheTechIdea.Beep.Editor.UOW.IUnitOfWorkWrapper,System.Func{System.Object,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Executes a function for each record in the unit of work
            Oracle Forms equivalent of processing all records in a block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapperExtensions.FindRecord(TheTechIdea.Beep.Editor.UOW.IUnitOfWorkWrapper,System.Func{System.Object,System.Boolean})">
            <summary>
            Finds the first record matching the specified predicate
            Oracle Forms equivalent of searching for a specific record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapperExtensions.GetAllRecords(TheTechIdea.Beep.Editor.UOW.IUnitOfWorkWrapper)">
            <summary>
            Gets all records as a list
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapperExtensions.NavigateToRecord(TheTechIdea.Beep.Editor.UOW.IUnitOfWorkWrapper,System.String)">
            <summary>
            Safely navigates to a record by primary key value
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapperExtensions.GetPositionInfo(TheTechIdea.Beep.Editor.UOW.IUnitOfWorkWrapper)">
            <summary>
            Gets the current record position information
            Oracle Forms equivalent of getting cursor position
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapperExtensions.BatchInsertAsync(TheTechIdea.Beep.Editor.UOW.IUnitOfWorkWrapper,System.Collections.Generic.IEnumerable{System.Object},System.IProgress{TheTechIdea.Beep.Editor.UOW.BatchProgress})">
            <summary>
            Batch insert multiple records with progress reporting
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapperExtensions.HasRecords(TheTechIdea.Beep.Editor.UOW.IUnitOfWorkWrapper)">
            <summary>
            Checks if the wrapper contains any records
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapperExtensions.GetCurrentFieldValue``1(TheTechIdea.Beep.Editor.UOW.IUnitOfWorkWrapper,System.String,``0)">
            <summary>
            Safely gets a field value from the current record
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UOW.UnitOfWorkWrapperExtensions.SetCurrentFieldValue(TheTechIdea.Beep.Editor.UOW.IUnitOfWorkWrapper,System.String,System.Object)">
            <summary>
            Safely sets a field value on the current record
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.RecordPositionInfo">
            <summary>
            Information about current record position
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.BatchOperationResult">
            <summary>
            Result of batch operations
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UOW.BatchProgress">
            <summary>
            Progress information for batch operations
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.DMEEditor">
            <summary>
            Data Management Enterprize Editor (DMEEditor)
            This is the Class that encapsulate all functionality of Data Management.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.ContainerMode">
            <summary>
            Container Properties to allow multi-tenant application
            </summary>
            
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.DataSources">
            <summary>
            List of Datasources used in the Platform
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.ETL">
            <summary>
            Extract Tranform and Load Class 
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.ConfigEditor">
            <summary>
            Configuration Editor class that handles all confiuration loading and saving
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.typesHelper">
            <summary>
            Data Type Helper handles the Type Management for and Mapping between different Sourcs
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.Utilfunction">
            <summary>
            Utilitiy Class 
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.assemblyHandler">
            <summary>
            Assembly Class that handle loading and extracting Plaform Class (IDatasource,IAddin,...)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.ErrorObject">
            <summary>
            Error Object Handler 
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.Logger">
            <summary>
            Logging Class 
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.WorkFlowEditor">
            <summary>
            WorkFlow Editor that handles and manage datawork flow's
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.classCreator">
            <summary>
            Class and Type Creator based of EntityStructure and Data objects
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.Loganderrors">
            <summary>
             Logs and Error Messeges
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.Passedarguments">
            <summary>
            Global Passed Parameters and Arguments
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.DMEEditor.PassEvent">
            <summary>
            Global Event Handler to handle events  in class
            </summary>
            
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.RaiseEvent(System.Object,TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Raise the Public and Global event
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.AskQuestion(TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Functio to Raise Question 
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.AddLogMessage(System.String,System.String,System.DateTime,System.Int32,System.String,TheTechIdea.Beep.ConfigUtil.Errors)">
            <summary>
            Function to Add Log Message 
            </summary>
            <param name="pLogType"></param>
            <param name="pLogMessage"></param>
            <param name="pLogData"></param>
            <param name="pRecordID"></param>
            <param name="pMiscData"></param>
            <param name="pFlag"></param>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.AddLogMessage(System.String)">
            <summary>
            Function to Add Log Message 
            </summary>
            <param name="pLogMessage"></param>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetEntityStructure(System.String,System.String)">
            <summary>
            Get Entity Structure from DataSource
            </summary>
            <param name="entityname"></param>
            <param name="datasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetOutputAsync(TheTechIdea.Beep.IDataSource,System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Run Query on an Opened DataSource 
            </summary>
            <param name="ds"></param>
            <param name="CurrentEntity"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Get Entity Data from an Opened DataSource
            </summary>
            <param name="ds"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.OpenDataSource(System.String)">
            <summary>
            Open DataSource and add it list of DataSources , if the samename exist in connections list
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CloseDataSource(System.String)">
            <summary>
            Close DataSource
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetDataSource(System.String)">
            <summary>
            Get Existing DataSource Created and exist in List of DataSources
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.OpenDataSourceUsingGuidID(System.String)">
            <summary>
            Open DataSource and add it list of DataSources , if the samename exist in connections list
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CloseDataSourceUsingGuidID(System.String)">
            <summary>
            Close DataSource
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetDataSourceUsingGuidID(System.String)">
            <summary>
            Get Existing DataSource Created and exist in List of DataSources
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CheckDataSourceExistUsingGuidID(System.String)">
            <summary>
            Check DataSource Exist in List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.RemoveDataDourceUsingGuidID(System.String)">
            <summary>
            Remove DataSource from List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetDataSourceClassUsingGuidID(System.String)">
            <summary>
            Get DataSource Assembly and Class Handling Class
            </summary>
            <param name="DatasourceName"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CreateNewDataSourceConnectionUsingGuidID(System.String)">
            <summary>
            Create New Datasource and add to the List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetDataSourceClass(System.String)">
            <summary>
            Get DataSource Assembly and Class Handling Class
            </summary>
            <param name="DatasourceName"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CheckDataSourceExist(System.String)">
            <summary>
            Check DataSource Exist in List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.RemoveDataDource(System.String)">
            <summary>
            Remove DataSource from List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CreateNewDataSourceConnection(System.String)">
            <summary>
            Create New Datasource and add to the List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CreateNewDataSourceConnection(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,System.String)">
            <summary>
            Create New Datasource and add to the List by passing new Connection Properties 
            </summary>
            <param name="cn"></param>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CreateLocalDataSourceConnection(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,System.String,System.String)">
            <summary>
             Create New Datasource and add to the List by passing new Connection Properties and Datasource Class Handler
            </summary>
            <param name="dataConnection"></param>
            <param name="pdatasourcename"></param>
            <param name="ClassDBHandlerName"></param>
            <returns></returns>
        </member>
        <member name="T:TheTechIdea.Beep.DMEEditorHelpers">
            <summary>
            Lightweight IDMEEditor implementation that uses helper classes (DataSourceLifecycleHelper, ValidationHelper, ErrorHandlingHelper, CacheManager).
            This is intended as an additional implementation for experiments and refactoring; it preserves the IDMEEditor contract.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.DataSources">
            <summary>
            Gets or sets the list of active data sources.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.progress">
            <summary>
            Gets or sets the progress handler for reporting progress.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.ContainerMode">
            <summary>
            Gets or sets a value indicating whether the editor is running in container mode.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.ContainerName">
            <summary>
            Gets or sets the name of the container.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.EntityName">
            <summary>
            Gets or sets the name of the current entity.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.DataSourceName">
            <summary>
            Gets or sets the name of the current data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.ETL">
            <summary>
            Gets or sets the ETL (Extract, Transform, Load) component.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.ErrorObject">
            <summary>
            Gets or sets the error information object.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.Logger">
            <summary>
            Gets or sets the logger instance.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.typesHelper">
            <summary>
            Gets or sets the data types helper.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.Utilfunction">
            <summary>
            Gets or sets the utility functions provider.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.ConfigEditor">
            <summary>
            Gets or sets the configuration editor.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.WorkFlowEditor">
            <summary>
            Gets or sets the workflow editor.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.classCreator">
            <summary>
            Gets or sets the class creator for dynamic type generation.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.assemblyHandler">
            <summary>
            Gets or sets the assembly handler for managing loaded assemblies.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.Loganderrors">
            <summary>
            Gets or sets the collection of log and error messages.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditorHelpers.Passedarguments">
            <summary>
            Gets or sets the arguments passed in events.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.DMEEditorHelpers.PassEvent">
            <summary>
            Event triggered to pass arguments and notifications.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TheTechIdea.Beep.DMEEditorHelpers"/> class.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.GetDataSource(System.String)">
            <summary>
            Retrieves a data source by name. It first checks the cache, then attempts to create it if not found.
            </summary>
            <param name="pdatasourcename">The name of the data source to retrieve.</param>
            <returns>An IDataSource instance or null if not found.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.CreateNewDataSourceConnection(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,System.String)">
            <summary>
            Creates a new data source connection using the provided properties. Delegates creation to DataSourceLifecycleHelper.
            </summary>
            <param name="cn">The connection properties.</param>
            <param name="pdatasourcename">The desired name for the data source.</param>
            <returns>A new IDataSource instance or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.CreateLocalDataSourceConnection(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,System.String,System.String)">
            <summary>
            Creates a local data source connection. This method delegates to CreateNewDataSourceConnection.
            </summary>
            <param name="dataConnection">The connection properties.</param>
            <param name="pdatasourcename">The name for the data source.</param>
            <param name="ClassDBHandlerName">The class handler name (used by helper to resolve driver).</param>
            <returns>A new IDataSource instance or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.RemoveDataDource(System.String)">
            <summary>
            Removes a data source from the editor and attempts to dispose it.
            </summary>
            <param name="pdatasourcename">The name of the data source to remove.</param>
            <returns>True if the data source was found and removed; otherwise, false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.CheckDataSourceExist(System.String)">
            <summary>
            Checks if a data source with the specified name exists in the editor.
            </summary>
            <param name="pdatasourcename">The name of the data source to check.</param>
            <returns>True if the data source exists; otherwise, false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.OpenDataSource(System.String)">
            <summary>
            Opens the connection for a specified data source.
            </summary>
            <param name="pdatasourcename">The name of the data source to open.</param>
            <returns>The state of the connection after the open attempt.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.CloseDataSource(System.String)">
            <summary>
            Closes the connection for a specified data source.
            </summary>
            <param name="pdatasourcename">The name of the data source to close.</param>
            <returns>True if the connection was successfully closed.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.GetDataSourceClass(System.String)">
            <summary>
            Retrieves the assembly and class definition for a given data source name.
            </summary>
            <param name="DatasourceName">The name of the data source.</param>
            <returns>The AssemblyClassDefinition or null if not found.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.AddLogMessage(System.String,System.String,System.DateTime,System.Int32,System.String,TheTechIdea.Beep.ConfigUtil.Errors)">
            <summary>
            Adds a log message to the logger and updates the error object.
            </summary>
            <param name="pLogType">The type of the log (e.g., "Error", "Info").</param>
            <param name="pLogMessage">The message to log.</param>
            <param name="pLogData">The timestamp of the log entry.</param>
            <param name="pRecordID">An optional record ID related to the log.</param>
            <param name="pMiscData">Miscellaneous data related to the log.</param>
            <param name="pFlag">An error flag indicating the status.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.AddLogMessage(System.String)">
            <summary>
            Adds a simple log message.
            </summary>
            <param name="pLogMessage">The message to log.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.RaiseEvent(System.Object,TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Raises the PassEvent to notify listeners.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.AskQuestion(TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Placeholder method for asking a question to the user.
            </summary>
            <param name="args">Arguments for the question.</param>
            <returns>An IErrorsInfo object.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.GetData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Retrieves data for a specific entity from a data source.
            </summary>
            <param name="ds">The data source.</param>
            <param name="entity">The entity structure defining what data to retrieve.</param>
            <returns>Data as an object (e.g., DataTable) or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.Getdefaults(System.String)">
            <summary>
            Gets default values for a data source using the DefaultsManager.
            </summary>
            <param name="DatasourceName">The name of the data source.</param>
            <returns>A list of default values.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.Savedefaults(System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.DefaultValue},System.String)">
            <summary>
            Saves default values for a data source using the DefaultsManager.
            </summary>
            <param name="defaults">The list of default values to save.</param>
            <param name="DatasourceName">The name of the data source.</param>
            <returns>An IErrorsInfo object indicating the result.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.RemoveDataDourceUsingGuidID(System.String)">
            <summary>
            Removes a data source from the editor using its unique GUID.
            </summary>
            <param name="guidID">The GUID of the data source to remove.</param>
            <returns>True if the data source was found and removed; otherwise, false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.CheckDataSourceExistUsingGuidID(System.String)">
            <summary>
            Checks if a data source with the specified GUID exists.
            </summary>
            <param name="guidID">The GUID to check.</param>
            <returns>True if the data source exists; otherwise, false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.OpenDataSourceUsingGuidID(System.String)">
            <summary>
            Opens the connection for a data source identified by its GUID.
            </summary>
            <param name="guidID">The GUID of the data source to open.</param>
            <returns>The state of the connection after the open attempt.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.CloseDataSourceUsingGuidID(System.String)">
            <summary>
            Closes the connection for a data source identified by its GUID.
            </summary>
            <param name="guidID">The GUID of the data source to close.</param>
            <returns>True if the connection was successfully closed.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditorHelpers.Dispose">
            <summary>
            Disposes all resources used by the editor, including all cached and local data sources.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TheTechIdea.Beep.EntityDataMoveValidator" -->
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.CanInsertRecord(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure,System.Object,System.String,System.String)">
            <summary>
            Checks if a record can be inserted into a data source for a specific entity.
            </summary>
            <param name="DMEEditor">The IDMEEditor instance.</param>
            <param name="DataSource">The IDataSource instance.</param>
            <param name="Entity">The EntityStructure instance.</param>
            <param name="record">The record to be inserted.</param>
            <param name="entityname">The name of the entity.</param>
            <param name="datasource">The name of the data source.</param>
            <returns>A list of validation messages indicating whether the record can be inserted or not.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.CanInsertRecord(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,System.Object,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Checks if a record can be inserted into a data source.</summary>
            <param name="DMEEditor">The IDMEEditor instance.</param>
            <param name="DataSource">The data source.</param>
            <param name="record">The record to be inserted.</param>
            <param name="Entity">The entity structure.</param>
            <returns>A list of validation messages indicating if the record can be inserted.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.TrueifNotNull(System.Object)">
            <summary>
            Checks if the given object is not null.
            </summary>
            <param name="fldval">The object to be checked.</param>
            <returns>True if the object is not null, otherwise false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.TrueifNotUnique(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure,System.Object,System.String,System.Object)">
            <summary>
            Checks if a field value is not unique within a given entity and data source.
            </summary>
            <param name="DMEEditor">The IDMEEditor instance.</param>
            <param name="DataSource">The IDataSource instance.</param>
            <param name="Entity">The EntityStructure instance.</param>
            <param name="record">The record object.</param>
            <param name="fieldname">The name of the field to check.</param>
            <param name="fldval">The value of the field to check.</param>
            <returns>True if the field value is not unique, otherwise false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.TrueifParentExist(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure,System.Object,System.String,System.Object)">
            <summary>
            Checks if the parent entity exists in the data source based on the provided parameters.
            </summary>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <param name="DataSource">The data source to check for the parent entity.</param>
            <param name="Entity">The structure of the entity.</param>
            <param name="record">The record object.</param>
            <param name="fieldname">The name of the field.</param>
            <param name="fldval">The value of the field.</param>
            <returns>True if the parent entity exists, otherwise false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.TrueifEntityExist(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Checks if an entity exists in a data source.</summary>
            <param name="DMEEditor">The IDMEEditor instance.</param>
            <param name="DataSource">The data source to check.</param>
            <param name="Entity">The entity structure to check.</param>
            <returns>True if the entity exists in the data source, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.CompareEntityStructuresToList(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String)">
            <summary>
            Compares the structure of two entities from different or the same data sources.
            </summary>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data sources.</param>
            <param name="sourceDataSource">The source data source.</param>
            <param name="targetDataSource">The target data source.</param>
            <param name="sourceEntityName">The name of the source entity.</param>
            <param name="targetEntityName">The name of the target entity.</param>
            <returns>A list of ComparisonOutput indicating differences between the two entities.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.CompareFieldsToList(TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.List{TheTechIdea.Beep.ComparisonOutput})">
            <summary>
            Compares fields between two entities and adds results to the output list.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.CompareRelationshipsToList(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.List{TheTechIdea.Beep.ComparisonOutput})">
            <summary>
            Compares relationships between two entities and adds results to the output list.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.GenerateReportFromComparison(System.Collections.Generic.List{TheTechIdea.Beep.ComparisonOutput})">
            <summary>
            Generates a detailed string report from a list of ComparisonOutput.
            </summary>
            <param name="comparisonResults">The list of comparison results.</param>
            <returns>A formatted string report.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.ComparisonOutput">
            <summary>
            Represents the result of a comparison between two data source entities.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Exensions.BatchExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits a collection into batches of a specified size.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="source">The collection to split into batches.</param>
            <param name="batchSize">The size of each batch.</param>
            <returns>An enumerable of batches, where each batch is a collection of items.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Exensions.BatchExtensions.Batch``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.IReadOnlyList{``0},``1})">
            <summary>
            Splits a collection into batches and applies a projection per batch.
            This avoids materializing and keeping intermediate batches alive longer than necessary.
            </summary>
            <typeparam name="T">Item type.</typeparam>
            <typeparam name="TResult">Projection result type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="batchSize">Batch size &gt; 0.</param>
            <param name="resultSelector">Function applied to each batch.</param>
            <returns>Projected results per batch.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Exensions.BatchExtensions.BatchReadOnly``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits a collection into read-only batches of a specified size to avoid external modification of batch contents.
            </summary>
            <typeparam name="T">Item type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="batchSize">Batch size &gt; 0.</param>
            <returns>Batches as read-only lists.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Exensions.BatchExtensions.BatchAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Splits an async sequence into batches asynchronously.
            </summary>
            <typeparam name="T">Item type.</typeparam>
            <param name="source">Async sequence.</param>
            <param name="batchSize">Batch size &gt; 0.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>IAsyncEnumerable of batches.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper">
            <summary>
            Helper class for linking connections to their corresponding drivers and managing driver configurations.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper.LinkConnection2Drivers(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Links a connection to its corresponding drivers in the configuration editor.
            </summary>
            <param name="cn">The connection properties.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>The connection drivers configuration.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper.FindDriverByPackageNameAndVersion(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Finds a driver configuration by exact package name and version match.
            </summary>
            <param name="cn">The connection properties.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>The matching driver configuration or null.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper.FindDriverByPackageName(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Finds a driver configuration by package name only.
            </summary>
            <param name="cn">The connection properties.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>The matching driver configuration or null.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper.FindDriverByDataSourceType(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Finds a driver configuration by data source type.
            </summary>
            <param name="cn">The connection properties.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>The matching driver configuration or null.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper.FindDriverByFileExtension(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Finds a driver configuration by file extension for file-based connections.
            </summary>
            <param name="cn">The connection properties.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>The matching driver configuration or null.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper.GetDriversForDataSourceType(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Gets all available driver configurations for a specific data source type.
            </summary>
            <param name="dataSourceType">The data source type to filter by.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>A list of matching driver configurations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper.GetDriversForFileExtension(System.String,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Gets all available driver configurations that support a specific file extension.
            </summary>
            <param name="fileExtension">The file extension (without the dot).</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>A list of matching driver configurations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper.GetDriversForCategory(TheTechIdea.Beep.Utilities.DatasourceCategory,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Gets all available driver configurations for a specific datasource category.
            </summary>
            <param name="category">The datasource category to filter by.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>A list of matching driver configurations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper.IsDriverCompatible(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig,TheTechIdea.Beep.ConfigUtil.IConnectionProperties)">
            <summary>
            Validates if a driver configuration is compatible with the given connection properties.
            </summary>
            <param name="driverConfig">The driver configuration to validate.</param>
            <param name="connectionProperties">The connection properties to check against.</param>
            <returns>True if compatible, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionDriverLinkingHelper.GetBestMatchingDriver(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Gets the best matching driver for the given connection properties.
            </summary>
            <param name="connectionProperties">The connection properties.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>The best matching driver configuration or null if none found.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper">
            <summary>
            Helper class for processing and manipulating connection strings with placeholder replacement and path normalization.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.ReplaceValueFromConnectionString(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig,TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Replaces placeholders in a connection string based on the provided parameters.
            </summary>
            <param name="dataSourceDriver">The driver configuration for the data source.</param>
            <param name="connectionProp">The connection properties.</param>
            <param name="dmeEditor">The DME editor.</param>
            <returns>The processed connection string with placeholders replaced.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.InitializeConnectionString(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig,TheTechIdea.Beep.ConfigUtil.IConnectionProperties)">
            <summary>
            Initializes the connection string from the driver configuration if not already present.
            </summary>
            <param name="dataSourceDriver">The driver configuration.</param>
            <param name="connectionProp">The connection properties.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.DetermineInputString(TheTechIdea.Beep.ConfigUtil.IConnectionProperties)">
            <summary>
            Determines the input string to process based on available connection properties.
            </summary>
            <param name="connectionProp">The connection properties.</param>
            <returns>The input string to process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.HasFileProperties(TheTechIdea.Beep.ConfigUtil.IConnectionProperties)">
            <summary>
            Checks if the connection properties have file-related properties.
            </summary>
            <param name="connectionProp">The connection properties.</param>
            <returns>True if file properties are present.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.ProcessRelativePaths(System.String,TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Processes relative paths in the input string.
            </summary>
            <param name="input">The input string.</param>
            <param name="connectionProp">The connection properties.</param>
            <param name="dmeEditor">The DME editor.</param>
            <returns>The processed input string.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.CreateReplacementDictionary(TheTechIdea.Beep.ConfigUtil.IConnectionProperties)">
            <summary>
            Creates a dictionary of placeholder replacements.
            </summary>
            <param name="connectionProp">The connection properties.</param>
            <returns>A dictionary of placeholder to value mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.ProcessFilePaths(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.Editor.IDMEEditor,System.Collections.Generic.Dictionary{System.String,System.String},System.String@)">
            <summary>
            Processes file paths and updates the replacement dictionary accordingly.
            </summary>
            <param name="connectionProp">The connection properties.</param>
            <param name="dmeEditor">The DME editor.</param>
            <param name="replacements">The replacement dictionary to update.</param>
            <param name="input">The input string to potentially modify.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.ApplyReplacements(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Applies all placeholder replacements to the input string.
            </summary>
            <param name="input">The input string.</param>
            <param name="replacements">The replacement dictionary.</param>
            <returns>The string with all placeholders replaced.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.NormalizePath(System.String,System.String)">
            <summary>
            Normalizes a relative path to an absolute path.
            </summary>
            <param name="relativePath">The relative path to normalize.</param>
            <param name="basePath">The base path to use for normalization.</param>
            <returns>The normalized absolute path.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.NormalizeFilePath(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,System.String)">
            <summary>
            Normalizes the file path in connection properties.
            </summary>
            <param name="connectionProp">The connection properties to normalize.</param>
            <param name="basePath">The base path to use for normalization.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.ValidateRequiredPlaceholders(System.String,TheTechIdea.Beep.ConfigUtil.IConnectionProperties)">
            <summary>
            Validates that all required placeholders in a connection string template have corresponding values.
            </summary>
            <param name="connectionStringTemplate">The connection string template.</param>
            <param name="connectionProp">The connection properties.</param>
            <returns>A list of missing required placeholders.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringProcessingHelper.ExtractPlaceholders(System.String)">
            <summary>
            Extracts all placeholders from a connection string template.
            </summary>
            <param name="connectionStringTemplate">The connection string template.</param>
            <returns>A list of all placeholders found in the template.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper">
            <summary>
            Helper class for securing connection strings by masking sensitive information.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.SecureConnectionString(System.String)">
            <summary>
            Creates a secure version of a connection string by masking sensitive information.
            </summary>
            <param name="connectionString">The connection string to secure.</param>
            <returns>A secure version of the connection string with sensitive data masked.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.MaskPasswords(System.String)">
            <summary>
            Masks password-related parameters in a connection string.
            </summary>
            <param name="connectionString">The connection string to process.</param>
            <returns>The connection string with passwords masked.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.MaskApiKeys(System.String)">
            <summary>
            Masks API key-related parameters in a connection string.
            </summary>
            <param name="connectionString">The connection string to process.</param>
            <returns>The connection string with API keys masked.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.MaskAccessKeys(System.String)">
            <summary>
            Masks access key-related parameters in a connection string.
            </summary>
            <param name="connectionString">The connection string to process.</param>
            <returns>The connection string with access keys masked.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.MaskTokens(System.String)">
            <summary>
            Masks token-related parameters in a connection string.
            </summary>
            <param name="connectionString">The connection string to process.</param>
            <returns>The connection string with tokens masked.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.MaskSecrets(System.String)">
            <summary>
            Masks secret-related parameters in a connection string.
            </summary>
            <param name="connectionString">The connection string to process.</param>
            <returns>The connection string with secrets masked.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.ContainsSensitiveInformation(System.String)">
            <summary>
            Checks if a connection string contains potentially sensitive information.
            </summary>
            <param name="connectionString">The connection string to check.</param>
            <returns>True if sensitive information is detected, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.SelectiveMask(System.String,System.Char,System.Int32)">
            <summary>
            Extracts and masks only the sensitive parts of a connection string, leaving non-sensitive parts intact.
            </summary>
            <param name="connectionString">The connection string to process.</param>
            <param name="maskChar">The character to use for masking (default is '*').</param>
            <param name="visibleChars">Number of characters to keep visible at the start and end (default is 2).</param>
            <returns>The connection string with selective masking applied.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.MaskValue(System.String,System.Char,System.Int32)">
            <summary>
            Masks a value while keeping some characters visible.
            </summary>
            <param name="value">The value to mask.</param>
            <param name="maskChar">The character to use for masking.</param>
            <param name="visibleChars">Number of characters to keep visible at start and end.</param>
            <returns>The masked value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.GetSensitiveParameterNames">
            <summary>
            Gets a list of parameter names that are considered sensitive.
            </summary>
            <returns>An array of sensitive parameter names.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.IsConnectionStringSecured(System.String)">
            <summary>
            Validates that a connection string has been properly secured (no plain text sensitive information).
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if the connection string appears to be secured, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringSecurityHelper.IsMaskedValue(System.String)">
            <summary>
            Determines if a value appears to be masked.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the value appears to be masked, false otherwise.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper">
            <summary>
            Helper class for validating connection strings for different data source types.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.IsConnectionStringValid(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Validates a connection string for a specific data source type.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <param name="dataSourceType">The type of the data source.</param>
            <returns>True if the connection string is valid, otherwise false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidateSqlServerConnectionString(System.String)">
            <summary>
            Validates a SQL Server connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidateMySqlConnectionString(System.String)">
            <summary>
            Validates a MySQL connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidateSQLiteConnectionString(System.String)">
            <summary>
            Validates a SQLite connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidateOracleConnectionString(System.String)">
            <summary>
            Validates an Oracle connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidatePostgreSQLConnectionString(System.String)">
            <summary>
            Validates a PostgreSQL connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidateMongoDBConnectionString(System.String)">
            <summary>
            Validates a MongoDB connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidateRedisConnectionString(System.String)">
            <summary>
            Validates a Redis connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidateOleDBConnectionString(System.String)">
            <summary>
            Validates an OleDB connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidateODBCConnectionString(System.String)">
            <summary>
            Validates an ODBC connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidateGenericConnectionString(System.String)">
            <summary>
            Validates a generic connection string by checking for basic key-value pair structure.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ContainsParameter(System.String,System.String)">
            <summary>
            Checks if a connection string contains a specific parameter.
            </summary>
            <param name="connectionString">The connection string to check.</param>
            <param name="parameterName">The parameter name to look for.</param>
            <returns>True if the parameter is found, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.GetValidationRequirements(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets validation requirements for a specific data source type.
            </summary>
            <param name="dataSourceType">The data source type.</param>
            <returns>A string describing the validation requirements.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.ConnectionStringValidationHelper.ValidateConnectionStringStructure(System.String)">
            <summary>
            Validates the structure of a connection string without checking data source specific requirements.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if the structure is valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelpers.TestConnectionHelper.TestConnectionAsync(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig,System.Int32)">
            <summary>
            Tests a connection configuration to verify it can connect successfully
            </summary>
            <param name="config">The connection configuration to test</param>
            <param name="timeout">Connection timeout in seconds</param>
            <returns>A tuple with success flag and error message (if any)</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ConnectionHelper">
            <summary>
            Core facade helper class for managing database and data source connections.
            Delegates operations to specialized helper classes for better maintainability.
            </summary>
            <summary>
            Partial class for Blockchain and distributed ledger technology connector configurations
            </summary>
            <summary>
            Partial class for Cache-based connection configurations
            </summary>
            <summary>
            Partial class for Cloud Services connection configurations
            </summary>
            <summary>
            Partial class for Communication platform connector configurations
            </summary>
            <summary>
            Partial class for CRM (Customer Relationship Management) connector configurations
            </summary>
            <summary>
            Partial class for E-commerce platform connector configurations
            </summary>
            <summary>
            Partial class for File-based data source connection configurations
            </summary>
            <summary>
            Partial class for In-Memory database connection configurations
            </summary>
            <summary>
            Partial class for Marketing platform connector configurations
            </summary>
            <summary>
            Partial class for NoSQL database connection configurations
            </summary>
            <summary>
            Partial class for Project Management platform connector configurations
            </summary>
            <summary>
            Partial class for RDBMS (Relational Database Management System) connection configurations
            </summary>
            <summary>
            Partial class for Streaming and Messaging connection configurations
            </summary>
            <summary>
            Partial class for Vector Database connection configurations
            </summary>
            <summary>
            Partial class for Web API and Web Service connection configurations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.LinkConnection2Drivers(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Links a connection to its corresponding drivers in the configuration editor.
            </summary>
            <param name="cn">The connection properties.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>The connection drivers configuration.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetDriversForDataSourceType(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Gets all available driver configurations for a specific data source type.
            </summary>
            <param name="dataSourceType">The data source type to filter by.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>A list of matching driver configurations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetDriversForFileExtension(System.String,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Gets all available driver configurations that support a specific file extension.
            </summary>
            <param name="fileExtension">The file extension (without the dot).</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>A list of matching driver configurations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetBestMatchingDriver(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>
            Gets the best matching driver for the given connection properties.
            </summary>
            <param name="connectionProperties">The connection properties.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>The best matching driver configuration or null if none found.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.ReplaceValueFromConnectionString(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig,TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Replaces placeholders in a connection string based on the provided parameters.
            </summary>
            <param name="DataSourceDriver">The driver configuration for the data source.</param>
            <param name="ConnectionProp">The connection properties.</param>
            <param name="DMEEditor">The DME editor.</param>
            <returns>The processed connection string with placeholders replaced.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.NormalizePath(System.String,System.String)">
            <summary>
            Normalizes a relative path to an absolute path.
            </summary>
            <param name="relativePath">The relative path to normalize.</param>
            <param name="basePath">The base path to use for normalization.</param>
            <returns>The normalized absolute path.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.NormalizeFilePath(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,System.String)">
            <summary>
            Normalizes the file path in connection properties.
            </summary>
            <param name="connectionProp">The connection properties to normalize.</param>
            <param name="basePath">The base path to use for normalization.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.ValidateRequiredPlaceholders(System.String,TheTechIdea.Beep.ConfigUtil.IConnectionProperties)">
            <summary>
            Validates that all required placeholders in a connection string template have corresponding values.
            </summary>
            <param name="connectionStringTemplate">The connection string template.</param>
            <param name="connectionProp">The connection properties.</param>
            <returns>A list of missing required placeholders.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.IsConnectionStringValid(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Validates a connection string for a specific data source type.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <param name="dataSourceType">The type of the data source.</param>
            <returns>True if the connection string is valid, otherwise false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.ValidateSqlServerConnectionString(System.String)">
            <summary>
            Validates a SQL Server connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.ValidateMySqlConnectionString(System.String)">
            <summary>
            Validates a MySQL connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.ValidateSQLiteConnectionString(System.String)">
            <summary>
            Validates a SQLite connection string.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetValidationRequirements(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets validation requirements for a specific data source type.
            </summary>
            <param name="dataSourceType">The data source type.</param>
            <returns>A string describing the validation requirements.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.ValidateConnectionStringStructure(System.String)">
            <summary>
            Validates the structure of a connection string without checking data source specific requirements.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if the structure is valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.SecureConnectionString(System.String)">
            <summary>
            Creates a secure version of a connection string by masking sensitive information.
            </summary>
            <param name="connectionString">The connection string to secure.</param>
            <returns>A secure version of the connection string with sensitive data masked.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.ContainsSensitiveInformation(System.String)">
            <summary>
            Checks if a connection string contains potentially sensitive information.
            </summary>
            <param name="connectionString">The connection string to check.</param>
            <returns>True if sensitive information is detected, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.SelectiveMask(System.String,System.Char,System.Int32)">
            <summary>
            Extracts and masks only the sensitive parts of a connection string, leaving non-sensitive parts intact.
            </summary>
            <param name="connectionString">The connection string to process.</param>
            <param name="maskChar">The character to use for masking (default is '*').</param>
            <param name="visibleChars">Number of characters to keep visible at the start and end (default is 2).</param>
            <returns>The connection string with selective masking applied.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetSensitiveParameterNames">
            <summary>
            Gets a list of parameter names that are considered sensitive.
            </summary>
            <returns>An array of sensitive parameter names.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.IsConnectionStringSecured(System.String)">
            <summary>
            Validates that a connection string has been properly secured (no plain text sensitive information).
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if the connection string appears to be secured, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetAllConnectionConfigs">
            <summary>
            Returns a list of ConnectionDriversConfig objects representing different connection configurations.
            </summary>
            <returns>A list of ConnectionDriversConfig objects representing different connection configurations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetAllConnectorConfigs">
            <summary>
            Gets all connector configurations from all connector categories.
            </summary>
            <returns>List of all connector configurations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetBlockchainConnectorConfigs">
            <summary>
            Gets all Blockchain connector configurations
            </summary>
            <returns>List of Blockchain connector configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateEthereumConfig">
            <summary>Creates a configuration object for Ethereum connection drivers.</summary>
            <returns>A configuration object for Ethereum connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHyperledgerConfig">
            <summary>Creates a configuration object for Hyperledger Fabric connection drivers.</summary>
            <returns>A configuration object for Hyperledger Fabric connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateBitcoinCoreConfig">
            <summary>Creates a configuration object for Bitcoin Core connection drivers.</summary>
            <returns>A configuration object for Bitcoin Core connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetCacheConfigs">
            <summary>
            Gets all Cache connection configurations
            </summary>
            <returns>List of Cache connection configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateInMemoryCacheConfig">
            <summary>Creates a configuration object for InMemoryCache connection drivers.</summary>
            <returns>A configuration object for InMemoryCache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCachedMemoryConfig">
            <summary>Creates a configuration object for CachedMemory connection drivers.</summary>
            <returns>A configuration object for CachedMemory connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDistributedCacheConfig">
            <summary>Creates a configuration object for Distributed Cache connection drivers.</summary>
            <returns>A configuration object for Distributed Cache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHybridCacheConfig">
            <summary>Creates a configuration object for Hybrid Cache connection drivers.</summary>
            <returns>A configuration object for Hybrid Cache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateL1L2CacheConfig">
            <summary>Creates a configuration object for L1L2 Cache connection drivers.</summary>
            <returns>A configuration object for L1L2 Cache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMemoryCacheConfig">
            <summary>Creates a configuration object for MemoryCache connection drivers.</summary>
            <returns>A configuration object for MemoryCache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRedisCacheConfig">
            <summary>Creates a configuration object for Redis Cache connection drivers.</summary>
            <returns>A configuration object for Redis Cache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateNCacheConfig">
            <summary>Creates a configuration object for NCache connection drivers.</summary>
            <returns>A configuration object for NCache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCouchbaseCacheConfig">
            <summary>Creates a configuration object for Couchbase Cache connection drivers.</summary>
            <returns>A configuration object for Couchbase Cache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHazelcastCacheConfig">
            <summary>Creates a configuration object for Hazelcast Cache connection drivers.</summary>
            <returns>A configuration object for Hazelcast Cache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateApacheIgniteCacheConfig">
            <summary>Creates a configuration object for Apache Ignite Cache connection drivers.</summary>
            <returns>A configuration object for Apache Ignite Cache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateInfinispanConfig">
            <summary>Creates a configuration object for Infinispan connection drivers.</summary>
            <returns>A configuration object for Infinispan connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateEhCacheConfig">
            <summary>Creates a configuration object for EhCache connection drivers.</summary>
            <returns>A configuration object for EhCache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCaffeineCacheConfig">
            <summary>Creates a configuration object for Caffeine Cache connection drivers.</summary>
            <returns>A configuration object for Caffeine Cache connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetCloudConfigs">
            <summary>
            Gets all Cloud Services connection configurations
            </summary>
            <returns>List of Cloud Services connection configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSRedshiftConfig">
            <summary>Creates a configuration object for AWS Redshift connection drivers.</summary>
            <returns>A configuration object for AWS Redshift connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateGoogleBigQueryConfig">
            <summary>Creates a configuration object for Google BigQuery connection drivers.</summary>
            <returns>A configuration object for Google BigQuery connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSGlueConfig">
            <summary>Creates a configuration object for AWS Glue connection drivers.</summary>
            <returns>A configuration object for AWS Glue connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSAthenaConfig">
            <summary>Creates a configuration object for AWS Athena connection drivers.</summary>
            <returns>A configuration object for AWS Athena connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAzureCloudConfig">
            <summary>Creates a configuration object for Azure Cloud connection drivers.</summary>
            <returns>A configuration object for Azure Cloud connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDataBricksConfig">
            <summary>Creates a configuration object for Databricks connection drivers.</summary>
            <returns>A configuration object for Databricks connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateFireboltConfig">
            <summary>Creates a configuration object for Firebolt connection drivers.</summary>
            <returns>A configuration object for Firebolt connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHologresConfig">
            <summary>Creates a configuration object for Hologres connection drivers.</summary>
            <returns>A configuration object for Hologres connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSupabaseConfig">
            <summary>Creates a configuration object for Supabase connection drivers.</summary>
            <returns>A configuration object for Supabase connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSStepFunctionsConfig">
            <summary>Creates a configuration object for AWS Step Functions connection drivers.</summary>
            <returns>A configuration object for AWS Step Functions connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSWorkflowConfig">
            <summary>Creates a configuration object for AWS Simple Workflow connection drivers.</summary>
            <returns>A configuration object for AWS Simple Workflow connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSIoTConfig">
            <summary>Creates a configuration object for AWS IoT connection drivers.</summary>
            <returns>A configuration object for AWS IoT connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSIoTCoreConfig">
            <summary>Creates a configuration object for AWS IoT Core connection drivers.</summary>
            <returns>A configuration object for AWS IoT Core connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSIoTAnalyticsConfig">
            <summary>Creates a configuration object for AWS IoT Analytics connection drivers.</summary>
            <returns>A configuration object for AWS IoT Analytics connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateGoogleCloudStorageConfig">
            <summary>Creates a configuration object for Google Cloud Storage connection drivers.</summary>
            <returns>A configuration object for Google Cloud Storage connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAmazonS3Config">
            <summary>Creates a configuration object for Amazon S3 connection drivers.</summary>
            <returns>A configuration object for Amazon S3 connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAzureDataFactoryConfig">
            <summary>Creates a configuration object for Azure Data Factory connection drivers.</summary>
            <returns>A configuration object for Azure Data Factory connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAzureSynapseConfig">
            <summary>Creates a configuration object for Azure Synapse connection drivers.</summary>
            <returns>A configuration object for Azure Synapse connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAzureBlobStorageConfig">
            <summary>Creates a configuration object for Azure Blob Storage connection drivers.</summary>
            <returns>A configuration object for Azure Blob Storage connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetCommunicationConnectorConfigs">
            <summary>
            Gets all Communication connector configurations
            </summary>
            <returns>List of Communication connector configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSlackConfig">
            <summary>Creates a configuration object for Slack connection drivers.</summary>
            <returns>A configuration object for Slack connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMicrosoftTeamsConfig">
            <summary>Creates a configuration object for Microsoft Teams connection drivers.</summary>
            <returns>A configuration object for Microsoft Teams connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateZoomConfig">
            <summary>Creates a configuration object for Zoom connection drivers.</summary>
            <returns>A configuration object for Zoom connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateGoogleChatConfig">
            <summary>Creates a configuration object for Google Chat connection drivers.</summary>
            <returns>A configuration object for Google Chat connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDiscordConfig">
            <summary>Creates a configuration object for Discord connection drivers.</summary>
            <returns>A configuration object for Discord connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateTelegramConfig">
            <summary>Creates a configuration object for Telegram connection drivers.</summary>
            <returns>A configuration object for Telegram connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateWhatsAppBusinessConfig">
            <summary>Creates a configuration object for WhatsApp Business connection drivers.</summary>
            <returns>A configuration object for WhatsApp Business connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateTwistConfig">
            <summary>Creates a configuration object for Twist connection drivers.</summary>
            <returns>A configuration object for Twist connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateChantyConfig">
            <summary>Creates a configuration object for Chanty connection drivers.</summary>
            <returns>A configuration object for Chanty connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRocketChatConfig">
            <summary>Creates a configuration object for Rocket.Chat connection drivers.</summary>
            <returns>A configuration object for Rocket.Chat connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateFlockConfig">
            <summary>Creates a configuration object for Flock connection drivers.</summary>
            <returns>A configuration object for Flock connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMattermostConfig">
            <summary>Creates a configuration object for Mattermost connection drivers.</summary>
            <returns>A configuration object for Mattermost connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRocketChatCommConfig">
            <summary>Creates a configuration object for Rocket.Chat Communication connection drivers.</summary>
            <returns>A configuration object for Rocket.Chat Communication connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetCRMConnectorConfigs">
            <summary>
            Gets all CRM connector configurations
            </summary>
            <returns>List of CRM connector configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSalesforceConfig">
            <summary>Creates a configuration object for Salesforce connection drivers.</summary>
            <returns>A configuration object for Salesforce connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHubSpotConfig">
            <summary>Creates a configuration object for HubSpot connection drivers.</summary>
            <returns>A configuration object for HubSpot connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateZohoConfig">
            <summary>Creates a configuration object for Zoho CRM connection drivers.</summary>
            <returns>A configuration object for Zoho CRM connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreatePipedriveConfig">
            <summary>Creates a configuration object for Pipedrive connection drivers.</summary>
            <returns>A configuration object for Pipedrive connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMicrosoftDynamics365Config">
            <summary>Creates a configuration object for Microsoft Dynamics 365 connection drivers.</summary>
            <returns>A configuration object for Microsoft Dynamics 365 connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateFreshsalesConfig">
            <summary>Creates a configuration object for Freshsales connection drivers.</summary>
            <returns>A configuration object for Freshsales connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSugarCRMConfig">
            <summary>Creates a configuration object for SugarCRM connection drivers.</summary>
            <returns>A configuration object for SugarCRM connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateInsightlyConfig">
            <summary>Creates a configuration object for Insightly connection drivers.</summary>
            <returns>A configuration object for Insightly connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCopperConfig">
            <summary>Creates a configuration object for Copper CRM connection drivers.</summary>
            <returns>A configuration object for Copper CRM connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateNutshellConfig">
            <summary>Creates a configuration object for Nutshell CRM connection drivers.</summary>
            <returns>A configuration object for Nutshell CRM connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSAPCRMConfig">
            <summary>Creates a configuration object for SAP CRM connection drivers.</summary>
            <returns>A configuration object for SAP CRM connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateOracleCRMConfig">
            <summary>Creates a configuration object for Oracle CRM connection drivers.</summary>
            <returns>A configuration object for Oracle CRM connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetECommerceConnectorConfigs">
            <summary>
            Gets all E-commerce connector configurations
            </summary>
            <returns>List of E-commerce connector configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateShopifyConfig">
            <summary>Creates a configuration object for Shopify connection drivers.</summary>
            <returns>A configuration object for Shopify connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateWooCommerceConfig">
            <summary>Creates a configuration object for WooCommerce connection drivers.</summary>
            <returns>A configuration object for WooCommerce connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMagentoConfig">
            <summary>Creates a configuration object for Magento connection drivers.</summary>
            <returns>A configuration object for Magento connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateBigCommerceConfig">
            <summary>Creates a configuration object for BigCommerce connection drivers.</summary>
            <returns>A configuration object for BigCommerce connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSquarespaceConfig">
            <summary>Creates a configuration object for Squarespace connection drivers.</summary>
            <returns>A configuration object for Squarespace connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateWixConfig">
            <summary>Creates a configuration object for Wix connection drivers.</summary>
            <returns>A configuration object for Wix connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateEtsyConfig">
            <summary>Creates a configuration object for Etsy connection drivers.</summary>
            <returns>A configuration object for Etsy connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateOpenCartConfig">
            <summary>Creates a configuration object for OpenCart connection drivers.</summary>
            <returns>A configuration object for OpenCart connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateEcwidConfig">
            <summary>Creates a configuration object for Ecwid connection drivers.</summary>
            <returns>A configuration object for Ecwid connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateVolusionConfig">
            <summary>Creates a configuration object for Volusion connection drivers.</summary>
            <returns>A configuration object for Volusion connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreatePrestaShopConfig">
            <summary>Creates a configuration object for PrestaShop connection drivers.</summary>
            <returns>A configuration object for PrestaShop connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateBigCartelConfig">
            <summary>Creates a configuration object for Big Cartel connection drivers.</summary>
            <returns>A configuration object for Big Cartel connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetFileConfigs">
            <summary>
            Gets all File-based connection configurations
            </summary>
            <returns>List of File-based connection configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCSVFileReaderConfig">
            <summary>
            Creates a configuration object for a CSV file reader connection driver.
            </summary>
            <returns>A configuration object for a CSV file reader connection driver.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCSVDataSourceConfig">
            <summary>
            Creates a configuration object for a CSV data source.
            </summary>
            <returns>A configuration object for a CSV data source.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateJsonDataSourceConfig">
            <summary>
            Creates a configuration object for a JSON data source connection driver.
            </summary>
            <returns>A configuration object for a JSON data source connection driver.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateTxtXlsCSVFileSourceConfig">
            <summary>
            Creates a configuration object for a text, xls, or csv file data source.
            </summary>
            <returns>A ConnectionDriversConfig object representing the configuration for the file data source.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDataViewConfig">
            <summary>Creates a configuration object for connection drivers.</summary>
            <returns>A configuration object for connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateXMLDataSourceConfig">
            <summary>Creates a configuration object for XML data source connection drivers.</summary>
            <returns>A configuration object for XML data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateYAMLDataSourceConfig">
            <summary>Creates a configuration object for YAML data source connection drivers.</summary>
            <returns>A configuration object for YAML data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateINIDataSourceConfig">
            <summary>Creates a configuration object for INI data source connection drivers.</summary>
            <returns>A configuration object for INI data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateTextFileDataSourceConfig">
            <summary>Creates a configuration object for Text file data source connection drivers.</summary>
            <returns>A configuration object for Text file data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreatePDFDataSourceConfig">
            <summary>Creates a configuration object for PDF data source connection drivers.</summary>
            <returns>A configuration object for PDF data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateParquetDataSourceConfig">
            <summary>Creates a configuration object for Parquet data source connection drivers.</summary>
            <returns>A configuration object for Parquet data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAvroDataSourceConfig">
            <summary>Creates a configuration object for Avro data source connection drivers.</summary>
            <returns>A configuration object for Avro data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateORCDataSourceConfig">
            <summary>Creates a configuration object for ORC data source connection drivers.</summary>
            <returns>A configuration object for ORC data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateFeatherDataSourceConfig">
            <summary>Creates a configuration object for Feather data source connection drivers.</summary>
            <returns>A configuration object for Feather data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHdf5DataSourceConfig">
            <summary>Creates a configuration object for HDF5 data source connection drivers.</summary>
            <returns>A configuration object for HDF5 data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateLibSVMDataSourceConfig">
            <summary>Creates a configuration object for LibSVM data source connection drivers.</summary>
            <returns>A configuration object for LibSVM data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateGraphMLDataSourceConfig">
            <summary>Creates a configuration object for GraphML data source connection drivers.</summary>
            <returns>A configuration object for GraphML data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDICOMDataSourceConfig">
            <summary>Creates a configuration object for DICOM data source connection drivers.</summary>
            <returns>A configuration object for DICOM data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateLASDataSourceConfig">
            <summary>Creates a configuration object for LAS data source connection drivers.</summary>
            <returns>A configuration object for LAS data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRecordIODataSourceConfig">
            <summary>Creates a configuration object for RecordIO data source connection drivers.</summary>
            <returns>A configuration object for RecordIO data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMarkdownDataSourceConfig">
            <summary>Creates a configuration object for Markdown data source connection drivers.</summary>
            <returns>A configuration object for Markdown data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateLogFileDataSourceConfig">
            <summary>Creates a configuration object for Log file data source connection drivers.</summary>
            <returns>A configuration object for Log file data source connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateFlatFileDataSourceConfig">
            <summary>Creates a configuration object for Flat file data source connection drivers.</summary>
            <returns>A configuration object for Flat file data source connection drivers.</returns>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.ConnectionHelper.DMEEditor">
            <summary>
            Gets the editor instance for configuration and logging.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.Initialize(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes the FileOperationHelper with the required editor.
            </summary>
            <param name="editor">The editor instance for configuration and logging.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if already initialized.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.LoadFile(System.String)">
            <summary>
            Loads a single file from the provided file path and creates connection properties for it.
            </summary>
            <param name="filePath">The path of the file to load.</param>
            <returns>The connection properties for the loaded file, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.LoadFileAsync(System.String)">
            <summary>
            Asynchronously loads a single file from the provided file path and creates connection properties for it.
            </summary>
            <param name="filePath">The path of the file to load.</param>
            <returns>A task that returns the connection properties for the loaded file, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.LoadFiles(System.Collections.Generic.List{System.String})">
            <summary>
            Loads files from the provided list of file paths and creates connection properties for valid files.
            </summary>
            <param name="filenames">List of file paths to load.</param>
            <returns>A list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.LoadFilesAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Asynchronously loads files from the provided list of file paths and creates connection properties for valid files.
            </summary>
            <param name="filenames">List of file paths to load.</param>
            <returns>A task that returns a list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.LoadFiles(System.String[])">
            <summary>
            Loads connection properties for the specified file paths.
            </summary>
            <param name="filenames">Array of file paths to load.</param>
            <returns>A list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.LoadFilesAsync(System.String[])">
            <summary>
            Asynchronously loads connection properties for the specified file paths.
            </summary>
            <param name="filenames">Array of file paths to load.</param>
            <returns>A task that returns a list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.AddFile(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Adds a single file as a data connection if valid.
            </summary>
            <param name="file">The connection properties for the file.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.AddFileAsync(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Asynchronously adds a single file as a data connection if valid.
            </summary>
            <param name="file">The connection properties for the file.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.AddFiles(System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.ConnectionProperties})">
            <summary>
            Adds multiple files as data connections if valid.
            </summary>
            <param name="files">List of connection properties for the files.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.AddFilesAsync(System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.ConnectionProperties})">
            <summary>
            Asynchronously adds multiple files as data connections if valid.
            </summary>
            <param name="files">List of connection properties for the files.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.IsFileValid(System.String)">
            <summary>
            Checks if a file has a valid extension supported by the data drivers.
            </summary>
            <param name="filename">The name or path of the file to validate.</param>
            <returns>True if the file extension is supported, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetSupportedFileExtensions">
            <summary>
            Gets supported file extensions from the configuration.
            </summary>
            <returns>A list of supported file extensions.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.ValidateFilePath(System.String)">
            <summary>
            Validates a file path for existence, readability, and supported format.
            </summary>
            <param name="filePath">The file path to validate.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetInMemoryConfigs">
            <summary>
            Gets all In-Memory connection configurations
            </summary>
            <returns>List of In-Memory connection configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSQLiteMemoryConfig">
            <summary>Creates a configuration object for SQLite in-memory connection drivers.</summary>
            <returns>A configuration object for SQLite in-memory connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMauiSQLiteConfig">
            <summary>Creates a configuration object for SQLite connection drivers.</summary>
            <returns>A configuration object for SQLite connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDuckDBMemoryConfig">
            <summary>Creates a configuration object for DuckDB in-memory connection drivers.</summary>
            <returns>A configuration object for DuckDB in-memory connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRealIMMemoryConfig">
            <summary>Creates a configuration object for RealIM in-memory connection drivers.</summary>
            <returns>A configuration object for RealIM in-memory connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHadoopConfig">
            <summary>Creates a configuration object for Hadoop connection drivers.</summary>
            <returns>A ConnectionDriversConfig object representing the Hadoop configuration.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreatePetastormConfig">
            <summary>Creates a configuration object for Petastorm connection drivers.</summary>
            <returns>A configuration object for Petastorm connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRocketSetConfig">
            <summary>Creates a configuration object for RocketSet connection drivers.</summary>
            <returns>A configuration object for RocketSet connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateApacheIgniteConfig">
            <summary>Creates a configuration object for Apache Ignite connection drivers.</summary>
            <returns>A configuration object for Apache Ignite connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHazelcastConfig">
            <summary>Creates a configuration object for Hazelcast connection drivers.</summary>
            <returns>A configuration object for Hazelcast connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRedisMemoryConfig">
            <summary>Creates a configuration object for Redis in-memory connection drivers.</summary>
            <returns>A configuration object for Redis in-memory connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMemcachedConfig">
            <summary>Creates a configuration object for Memcached connection drivers.</summary>
            <returns>A configuration object for Memcached connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateGridGainConfig">
            <summary>Creates a configuration object for GridGain connection drivers.</summary>
            <returns>A configuration object for GridGain connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateChronicleMapConfig">
            <summary>Creates a configuration object for Chronicle Map connection drivers.</summary>
            <returns>A configuration object for Chronicle Map connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateH2DatabaseConfig">
            <summary>Creates a configuration object for H2 Database connection drivers.</summary>
            <returns>A configuration object for H2 Database connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetMarketingConnectorConfigs">
            <summary>
            Gets all Marketing connector configurations
            </summary>
            <returns>List of Marketing connector configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMailchimpConfig">
            <summary>Creates a configuration object for Mailchimp connection drivers.</summary>
            <returns>A configuration object for Mailchimp connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMarketoConfig">
            <summary>Creates a configuration object for Marketo connection drivers.</summary>
            <returns>A configuration object for Marketo connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateGoogleAdsConfig">
            <summary>Creates a configuration object for Google Ads connection drivers.</summary>
            <returns>A configuration object for Google Ads connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateActiveCampaignConfig">
            <summary>Creates a configuration object for ActiveCampaign connection drivers.</summary>
            <returns>A configuration object for ActiveCampaign connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateConstantContactConfig">
            <summary>Creates a configuration object for Constant Contact connection drivers.</summary>
            <returns>A configuration object for Constant Contact connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateKlaviyoConfig">
            <summary>Creates a configuration object for Klaviyo connection drivers.</summary>
            <returns>A configuration object for Klaviyo connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSendinblueConfig">
            <summary>Creates a configuration object for Sendinblue connection drivers.</summary>
            <returns>A configuration object for Sendinblue connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCampaignMonitorConfig">
            <summary>Creates a configuration object for Campaign Monitor connection drivers.</summary>
            <returns>A configuration object for Campaign Monitor connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateConvertKitConfig">
            <summary>Creates a configuration object for ConvertKit connection drivers.</summary>
            <returns>A configuration object for ConvertKit connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDripConfig">
            <summary>Creates a configuration object for Drip connection drivers.</summary>
            <returns>A configuration object for Drip connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMailerLiteConfig">
            <summary>Creates a configuration object for MailerLite connection drivers.</summary>
            <returns>A configuration object for MailerLite connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHootsuiteMarketingConfig">
            <summary>Creates a configuration object for Hootsuite Marketing connection drivers.</summary>
            <returns>A configuration object for Hootsuite Marketing connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMailgunConfig">
            <summary>Creates a configuration object for Mailgun connection drivers.</summary>
            <returns>A configuration object for Mailgun connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSendGridConfig">
            <summary>Creates a configuration object for SendGrid connection drivers.</summary>
            <returns>A configuration object for SendGrid connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCriteoConfig">
            <summary>Creates a configuration object for Criteo connection drivers.</summary>
            <returns>A configuration object for Criteo connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetNoSQLConfigs">
            <summary>
            Gets all NoSQL connection configurations
            </summary>
            <returns>List of NoSQL connection configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMongoDBConfig">
            <summary>Creates a configuration object for MongoDB connection drivers.</summary>
            <returns>A configuration object for MongoDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCouchDBConfig">
            <summary>
            Creates a configuration object for connecting to CouchDB.
            </summary>
            <returns>A configuration object for connecting to CouchDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRavenDBConfig">
            <summary>Creates a configuration object for RavenDB connection drivers.</summary>
            <returns>A configuration object for RavenDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCouchbaseConfig">
            <summary>Creates a configuration object for connecting to Couchbase.</summary>
            <returns>A configuration object for connecting to Couchbase.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCouchbaseLiteConfig">
            <summary>
            Creates a configuration object for connecting to Couchbase Lite.
            </summary>
            <returns>A configuration object for connecting to Couchbase Lite.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRedisConfig">
            <summary>Creates a configuration object for Redis connection drivers.</summary>
            <returns>A configuration object for Redis connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateStackExchangeRedisConfig">
            <summary>Creates a configuration object for StackExchange.Redis.</summary>
            <returns>A configuration object for StackExchange.Redis.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateFirebaseConfig">
            <summary>Creates a configuration object for Firebase connection drivers.</summary>
            <returns>A configuration object for Firebase connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateLiteDBDataSourceConfig">
            <summary>
            Creates a configuration object for a LiteDB data source connection driver.
            </summary>
            <returns>A configuration object for a LiteDB data source connection driver.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateArangoDBConfig">
            <summary>Creates a configuration object for ArangoDB connection drivers.</summary>
            <returns>A configuration object for ArangoDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateNeo4jConfig">
            <summary>Creates a configuration object for Neo4j connection drivers.</summary>
            <returns>A configuration object for Neo4j connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCassandraConfig">
            <summary>Creates a configuration object for Cassandra connection drivers.</summary>
            <returns>A configuration object for Cassandra connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateOrientDBConfig">
            <summary>Creates a configuration object for OrientDB connection drivers.</summary>
            <returns>A configuration object for OrientDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateElasticsearchConfig">
            <summary>Creates a configuration object for Elasticsearch connection drivers.</summary>
            <returns>A configuration object for Elasticsearch connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateClickHouseConfig">
            <summary>Creates a configuration object for ClickHouse connection drivers.</summary>
            <returns>A configuration object for ClickHouse connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateInfluxDBConfig">
            <summary>Creates a configuration object for InfluxDB connection drivers.</summary>
            <returns>A configuration object for InfluxDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDynamoDBConfig">
            <summary>Creates a configuration object for DynamoDB connection drivers.</summary>
            <returns>A configuration object for DynamoDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRealIMConfig">
            <summary>Creates a configuration object for connecting to a Realm database.</summary>
            <returns>A configuration object for connecting to a Realm database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetProjectManagementConnectorConfigs">
            <summary>
            Gets all Project Management connector configurations
            </summary>
            <returns>List of Project Management connector configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateJiraConfig">
            <summary>Creates a configuration object for Jira connection drivers.</summary>
            <returns>A configuration object for Jira connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateTrelloConfig">
            <summary>Creates a configuration object for Trello connection drivers.</summary>
            <returns>A configuration object for Trello connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAsanaConfig">
            <summary>Creates a configuration object for Asana connection drivers.</summary>
            <returns>A configuration object for Asana connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMondayConfig">
            <summary>Creates a configuration object for Monday.com connection drivers.</summary>
            <returns>A configuration object for Monday.com connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateClickUpConfig">
            <summary>Creates a configuration object for ClickUp connection drivers.</summary>
            <returns>A configuration object for ClickUp connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateBasecampConfig">
            <summary>Creates a configuration object for Basecamp connection drivers.</summary>
            <returns>A configuration object for Basecamp connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateNotionConfig">
            <summary>Creates a configuration object for Notion connection drivers.</summary>
            <returns>A configuration object for Notion connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateWrikeConfig">
            <summary>Creates a configuration object for Wrike connection drivers.</summary>
            <returns>A configuration object for Wrike connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSmartsheetConfig">
            <summary>Creates a configuration object for Smartsheet connection drivers.</summary>
            <returns>A configuration object for Smartsheet connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateTeamworkConfig">
            <summary>Creates a configuration object for Teamwork connection drivers.</summary>
            <returns>A configuration object for Teamwork connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreatePodioConfig">
            <summary>Creates a configuration object for Podio connection drivers.</summary>
            <returns>A configuration object for Podio connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAzureBoardsConfig">
            <summary>Creates a configuration object for Azure Boards connection drivers.</summary>
            <returns>A configuration object for Azure Boards connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSmartsheetPMConfig">
            <summary>Creates a configuration object for Smartsheet PM connection drivers.</summary>
            <returns>A configuration object for Smartsheet PM connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetRDBMSConfigs">
            <summary>
            Gets all RDBMS connection configurations
            </summary>
            <returns>List of RDBMS connection configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSqlServerConfig">
            <summary>Creates a configuration object for connecting to a SQL Server database.</summary>
            <returns>A configuration object for connecting to a SQL Server database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMySqlConfig">
            <summary>Creates a configuration object for connecting to a MySQL database.</summary>
            <returns>A configuration object for connecting to a MySQL database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreatePostgreConfig">
            <summary>Creates a configuration object for connecting to a PostgreSQL database.</summary>
            <returns>A configuration object for connecting to a PostgreSQL database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateOracleConfig">
            <summary>Creates a configuration object for Oracle database connection drivers.</summary>
            <returns>A configuration object for Oracle database connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSQLiteConfig">
            <summary>Creates a configuration object for SQLite connection drivers.</summary>
            <returns>A configuration object for SQLite connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSqlCompactConfig">
            <summary>Creates a configuration object for SQL Compact connection drivers.</summary>
            <returns>A configuration object for SQL Compact connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateFirebirdConfig">
            <summary>
            Creates a configuration object for Firebird database connection drivers.
            </summary>
            <returns>A configuration object for Firebird database connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDB2Config">
            <summary>Creates a configuration object for connecting to a DB2 database.</summary>
            <returns>A ConnectionDriversConfig object with the DB2 configuration settings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSnowFlakeConfig">
            <summary>Creates a configuration object for SnowFlake connection drivers.</summary>
            <returns>A ConnectionDriversConfig object with the specified properties.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateVistaDBConfig">
            <summary>
            Creates a configuration object for VistaDB connection drivers.
            </summary>
            <returns>A configuration object for VistaDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDuckDBConfig">
            <summary>Creates a configuration object for DuckDB connection drivers.</summary>
            <returns>A configuration object for DuckDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateTimeScaleConfig">
            <summary>Creates a configuration object for TimeScale connection drivers.</summary>
            <returns>A configuration object for TimeScale connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCockroachConfig">
            <summary>Creates a configuration object for CockroachDB connection drivers.</summary>
            <returns>A configuration object for CockroachDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSpannerConfig">
            <summary>Creates a configuration object for Google Spanner connection drivers.</summary>
            <returns>A configuration object for Google Spanner connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateTerraDataConfig">
            <summary>Creates a configuration object for Teradata connection drivers.</summary>
            <returns>A configuration object for Teradata connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateVerticaConfig">
            <summary>Creates a configuration object for Vertica connection drivers.</summary>
            <returns>A configuration object for Vertica connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSRDSConfig">
            <summary>Creates a configuration object for AWS RDS connection drivers.</summary>
            <returns>A configuration object for AWS RDS connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAzureSQLConfig">
            <summary>Creates a configuration object for Azure SQL connection drivers.</summary>
            <returns>A configuration object for Azure SQL connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHanaConfig">
            <summary>Creates a configuration object for SAP HANA connection drivers.</summary>
            <returns>A configuration object for SAP HANA connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetStreamingConfigs">
            <summary>
            Gets all Streaming and Messaging connection configurations
            </summary>
            <returns>List of Streaming and Messaging connection configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateKafkaConfig">
            <summary>Creates a configuration object for Kafka connection drivers.</summary>
            <returns>A configuration object for Kafka-specific configuration.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRabbitMQConfig">
            <summary>Creates a configuration object for RabbitMQ connection drivers.</summary>
            <returns>A configuration object for RabbitMQ connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateActiveMQConfig">
            <summary>Creates a configuration object for ActiveMQ connection drivers.</summary>
            <returns>A configuration object for ActiveMQ connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreatePulsarConfig">
            <summary>Creates a configuration object for Apache Pulsar connection drivers.</summary>
            <returns>A configuration object for Apache Pulsar connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMassTransitConfig">
            <summary>Creates a configuration object for MassTransit connection drivers.</summary>
            <returns>A configuration object for MassTransit connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateNatsConfig">
            <summary>Creates a configuration object for NATS connection drivers.</summary>
            <returns>A configuration object for NATS connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateZeroMQConfig">
            <summary>Creates a configuration object for ZeroMQ connection drivers.</summary>
            <returns>A configuration object for ZeroMQ connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSKinesisConfig">
            <summary>Creates a configuration object for AWS Kinesis connection drivers.</summary>
            <returns>A configuration object for AWS Kinesis connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSSQSConfig">
            <summary>Creates a configuration object for AWS SQS connection drivers.</summary>
            <returns>A configuration object for AWS SQS connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAWSSNSConfig">
            <summary>Creates a configuration object for AWS SNS connection drivers.</summary>
            <returns>A configuration object for AWS SNS connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateAzureServiceBusConfig">
            <summary>Creates a configuration object for Azure Service Bus connection drivers.</summary>
            <returns>A configuration object for Azure Service Bus connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateEventHubsConfig">
            <summary>Creates a configuration object for Azure Event Hubs connection drivers.</summary>
            <returns>A configuration object for Azure Event Hubs connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateApacheFlinkConfig">
            <summary>Creates a configuration object for Apache Flink connection drivers.</summary>
            <returns>A configuration object for Apache Flink connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateApacheStormConfig">
            <summary>Creates a configuration object for Apache Storm connection drivers.</summary>
            <returns>A configuration object for Apache Storm connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateApacheSparkStreamingConfig">
            <summary>Creates a configuration object for Apache Spark Streaming connection drivers.</summary>
            <returns>A configuration object for Apache Spark Streaming connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetVectorDBConfigs">
            <summary>
            Gets all Vector Database connection configurations
            </summary>
            <returns>List of Vector Database connection configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateChromaDBConfig">
            <summary>Creates a configuration object for ChromaDB connection drivers.</summary>
            <returns>A configuration object for ChromaDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreatePineConeConfig">
            <summary>Creates a configuration object for PineCone connection drivers.</summary>
            <returns>A configuration object for PineCone connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateQdrantConfig">
            <summary>Creates a configuration object for Qdrant connection drivers.</summary>
            <returns>A configuration object for Qdrant connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateShapVectorConfig">
            <summary>Creates a configuration object for ShapVector connection drivers.</summary>
            <returns>A configuration object for ShapVector connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateWeaviateConfig">
            <summary>Creates a configuration object for Weaviate connection drivers.</summary>
            <returns>A configuration object for Weaviate connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMilvusConfig">
            <summary>Creates a configuration object for Milvus connection drivers.</summary>
            <returns>A configuration object for Milvus connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRedisVectorConfig">
            <summary>Creates a configuration object for RedisVector connection drivers.</summary>
            <returns>A configuration object for RedisVector connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateZillizConfig">
            <summary>Creates a configuration object for Zilliz connection drivers.</summary>
            <returns>A configuration object for Zilliz connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateVespaConfig">
            <summary>Creates a configuration object for Vespa connection drivers.</summary>
            <returns>A configuration object for Vespa connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetWebAPIConfigs">
            <summary>
            Gets all Web API and Web Service connection configurations
            </summary>
            <returns>List of Web API and Web Service connection configurations</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRestApiConfig">
            <summary>Creates a configuration object for REST API connection drivers.</summary>
            <returns>A configuration object for REST API connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateGraphQLConfig">
            <summary>Creates a configuration object for GraphQL connection drivers.</summary>
            <returns>A configuration object for GraphQL connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateODataConfig">
            <summary>Creates a configuration object for OData connection drivers.</summary>
            <returns>A configuration object for OData connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateWebApiConfig">
            <summary>Creates a configuration object for Web API connection drivers.</summary>
            <returns>A configuration object for Web API connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateOPCConfig">
            <summary>Creates a configuration object for OPC connection drivers.</summary>
            <returns>A ConnectionDriversConfig object representing the OPC configuration.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSOAPConfig">
            <summary>Creates a configuration object for SOAP Web Service connection drivers.</summary>
            <returns>A configuration object for SOAP Web Service connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateXMLRPCConfig">
            <summary>Creates a configuration object for XML-RPC connection drivers.</summary>
            <returns>A configuration object for XML-RPC connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateJSONRPCConfig">
            <summary>Creates a configuration object for JSON-RPC connection drivers.</summary>
            <returns>A configuration object for JSON-RPC connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateODBCConfig">
            <summary>Creates a configuration object for ODBC connection drivers.</summary>
            <returns>A configuration object for ODBC connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateOLEDBConfig">
            <summary>Creates a configuration object for OLEDB connection drivers.</summary>
            <returns>A configuration object for OLEDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateADOConfig">
            <summary>Creates a configuration object for ADO connection drivers.</summary>
            <returns>A configuration object for ADO connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateGRPCConfig">
            <summary>Creates a configuration object for gRPC connection drivers.</summary>
            <returns>A configuration object for gRPC connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateWebSocketConfig">
            <summary>Creates a configuration object for WebSocket connection drivers.</summary>
            <returns>A configuration object for WebSocket connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSSEConfig">
            <summary>Creates a configuration object for Server-Sent Events connection drivers.</summary>
            <returns>A configuration object for Server-Sent Events connection drivers.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper">
            <summary>
            Helper class for managing the complete lifecycle of data sources including creation, 
            caching, validation, and disposal with advanced retry and error handling mechanisms.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper.CreateDataSourceAsync(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,TheTechIdea.Beep.Editor.IDMEEditor,System.Boolean)">
            <summary>
            Creates a new data source asynchronously with comprehensive error handling and validation.
            </summary>
            <param name="connection">Connection properties for the data source</param>
            <param name="editor">DME Editor instance for logging and configuration</param>
            <param name="validateConnection">Whether to validate connection before creation</param>
            <returns>Created and validated IDataSource instance</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper.GetOrCreateDataSourceAsync(System.String,System.Func{TheTechIdea.Beep.ConfigUtil.ConnectionProperties},TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Gets an existing data source from cache or creates a new one using the provided factory.
            </summary>
            <param name="name">Data source name</param>
            <param name="connectionFactory">Factory function to create connection properties</param>
            <param name="editor">DME Editor instance</param>
            <returns>Cached or newly created IDataSource instance</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper.ValidateDataSourceAsync(TheTechIdea.Beep.IDataSource)">
            <summary>
            Validates a data source's health and connectivity.
            </summary>
            <param name="dataSource">Data source to validate</param>
            <returns>True if data source is valid and functional</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper.OpenWithRetryAsync(TheTechIdea.Beep.IDataSource,System.Int32)">
            <summary>
            Opens a data source connection with retry logic and exponential backoff.
            </summary>
            <param name="dataSource">Data source to open</param>
            <param name="maxRetries">Maximum number of retry attempts</param>
            <returns>Final connection state</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper.RegisterDataSource(TheTechIdea.Beep.IDataSource)">
            <summary>
            Registers a data source in the internal cache.
            </summary>
            <param name="dataSource">Data source to register</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper.UnregisterDataSource(System.String)">
            <summary>
            Unregisters a data source from the cache without disposing it.
            </summary>
            <param name="name">Name of the data source to unregister</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper.DisposeDataSourceAsync(TheTechIdea.Beep.IDataSource)">
            <summary>
            Safely disposes a data source with proper cleanup.
            </summary>
            <param name="dataSource">Data source to dispose</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper.DisposeAllAsync">
            <summary>
            Disposes all cached data sources.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper.GetCachedDataSource(System.String)">
            <summary>
            Gets cached data source by name.
            </summary>
            <param name="name">Data source name</param>
            <returns>Cached data source or null if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataSourceLifecycleHelper.GetAllCachedDataSources">
            <summary>
            Gets all cached data sources.
            </summary>
            <returns>List of cached data sources</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository">
            <summary>
            Repository containing Accounting and Financial platform specific type mappings.
            </summary>
            <summary>
            Repository containing Analytics and Reporting platform specific type mappings.
            </summary>
            <summary>
            Repository containing Big Data and Columnar storage specific type mappings.
            </summary>
            <summary>
            Repository containing modern cloud database specific type mappings (Snowflake, BerkeleyDB, Azure Cosmos DB, etc.).
            </summary>
            <summary>
            Repository containing Cloud Platform specific type mappings (AWS, Google Cloud, Azure services).
            </summary>
            <summary>
            Repository containing SQLite and other lightweight database specific type mappings.
            </summary>
            <summary>
            Repository containing CRM (Customer Relationship Management) platform specific type mappings.
            </summary>
            <summary>
            Repository containing Cloud and Enterprise database specific type mappings (DB2, DynamoDB, InfluxDB, etc.).
            </summary>
            <summary>
            Repository containing File Format specific type mappings.
            </summary>
            <summary>
            Repository containing Firebird and LiteDB specific type mappings.
            </summary>
            <summary>
            Repository containing Graph Database specific type mappings (Neo4j, TigerGraph, JanusGraph).
            </summary>
            <summary>
            Repository containing IoT (Internet of Things) platform specific type mappings.
            </summary>
            <summary>
            Repository containing Machine Learning and File Format specific type mappings.
            </summary>
            <summary>
            Repository containing Modern Database specific type mappings (MariaDB, TimeScale, H2Database, Memcached, etc.).
            </summary>
            <summary>
            Repository containing NoSQL database specific type mappings (MongoDB, Redis, Cassandra, etc.).
            </summary>
            <summary>
            Repository containing database-specific type mappings for various database systems.
            </summary>
            <summary>
            Repository containing Payment Gateway and Financial Services specific type mappings.
            </summary>
            <summary>
            Repository containing PostgreSQL and MySQL specific type mappings.
            </summary>
            <summary>
            Repository containing File Format and Protocol specific type mappings.
            </summary>
            <summary>
            Repository containing search and analytics platform specific type mappings (ElasticSearch, Solr, ClickHouse).
            </summary>
            <summary>
            Repository containing Firebase, Supabase and other modern service type mappings.
            </summary>
            <summary>
            Repository containing Social Media platform specific type mappings.
            </summary>
            <summary>
            Repository containing SQL Server specific type mappings.
            </summary>
            <summary>
            Repository containing Streaming and Messaging platform specific type mappings.
            </summary>
            <summary>
            Repository containing Vector Database specific type mappings (PineCone, Qdrant, Weaviate, Milvus, etc.).
            </summary>
            <summary>
            Repository containing Workflow, IoT, Industrial, and Cloud Service specific type mappings.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetFreshBooksDataTypeMappings">
            <summary>Returns a list of FreshBooks data type mappings.</summary>
            <returns>A list of FreshBooks data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetWaveAppsDataTypeMappings">
            <summary>Returns a list of WaveApps data type mappings.</summary>
            <returns>A list of WaveApps data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSageBusinessCloudDataTypeMappings">
            <summary>Returns a list of Sage Business Cloud data type mappings.</summary>
            <returns>A list of Sage Business Cloud data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMYOBDataTypeMappings">
            <summary>Returns a list of MYOB data type mappings.</summary>
            <returns>A list of MYOB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetQuickBooksDataTypeMappings">
            <summary>Returns a list of QuickBooks data type mappings.</summary>
            <returns>A list of QuickBooks data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetXeroDataTypeMappings">
            <summary>Returns a list of Xero data type mappings.</summary>
            <returns>A list of Xero data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetBenchAccountingDataTypeMappings">
            <summary>Returns a list of BenchAccounting data type mappings.</summary>
            <returns>A list of BenchAccounting data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetGoogleAnalyticsDataTypeMappings">
            <summary>Returns a list of Google Analytics data type mappings.</summary>
            <returns>A list of Google Analytics data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMixpanelDataTypeMappings">
            <summary>Returns a list of Mixpanel data type mappings.</summary>
            <returns>A list of Mixpanel data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetHotjarDataTypeMappings">
            <summary>Returns a list of Hotjar data type mappings.</summary>
            <returns>A list of Hotjar data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAmplitudeDataTypeMappings">
            <summary>Returns a list of Amplitude data type mappings.</summary>
            <returns>A list of Amplitude data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetHeapDataTypeMappings">
            <summary>Returns a list of Heap data type mappings.</summary>
            <returns>A list of Heap data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetDataboxDataTypeMappings">
            <summary>Returns a list of Databox data type mappings.</summary>
            <returns>A list of Databox data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetGeckoboardDataTypeMappings">
            <summary>Returns a list of Geckoboard data type mappings.</summary>
            <returns>A list of Geckoboard data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetCyfeDataTypeMappings">
            <summary>Returns a list of Cyfe data type mappings.</summary>
            <returns>A list of Cyfe data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTableauDataTypeMappings">
            <summary>Returns a list of Tableau data type mappings.</summary>
            <returns>A list of Tableau data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPowerBIDataTypeMappings">
            <summary>Returns a list of Power BI data type mappings.</summary>
            <returns>A list of Power BI data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetHadoopDataTypeMappings">
            <summary>Returns a list of Apache Hadoop data type mappings.</summary>
            <returns>A list of Apache Hadoop data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetKuduDataTypeMappings">
            <summary>Returns a list of Apache Kudu data type mappings.</summary>
            <returns>A list of Apache Kudu data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetDruidDataTypeMappings">
            <summary>Returns a list of Apache Druid data type mappings.</summary>
            <returns>A list of Apache Druid data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPinotDataTypeMappings">
            <summary>Returns a list of Apache Pinot data type mappings.</summary>
            <returns>A list of Apache Pinot data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetParquetDataTypeMappings">
            <summary>Returns a list of Parquet data type mappings.</summary>
            <returns>A list of Parquet data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAvroDataTypeMappings">
            <summary>Returns a list of Avro data type mappings.</summary>
            <returns>A list of Avro data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetORCDataTypeMappings">
            <summary>Returns a list of ORC data type mappings.</summary>
            <returns>A list of ORC data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetFeatherDataTypeMappings">
            <summary>Returns a list of Feather data type mappings.</summary>
            <returns>A list of Feather data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetBerkeleyDBDataTypesMapping">
            <summary>Returns a list of datatype mappings for Berkeley DB.</summary>
            <returns>A list of datatype mappings for Berkeley DB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSnowflakeDataTypesMapping">
            <summary>Returns a list of Snowflake data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between Snowflake data types and their corresponding .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAzureCosmosDBDataTypesMapping">
            <summary>Returns a list of Azure Cosmos DB data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between Azure Cosmos DB data types and .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetVerticaDataTypesMapping">
            <summary>Returns a list of datatype mappings for Vertica database.</summary>
            <returns>A list of datatype mappings for Vertica database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTeradataDataTypeMappings">
            <summary>Returns a list of Teradata data type mappings.</summary>
            <returns>A list of Teradata data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetArangoDBDataTypeMappings">
            <summary>Returns a list of datatype mappings for ArangoDB.</summary>
            <returns>A list of datatype mappings for ArangoDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAWSRedshiftDataTypeMappings">
            <summary>Returns a list of AWS Redshift data type mappings.</summary>
            <returns>A list of AWS Redshift data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetGoogleBigQueryDataTypeMappings">
            <summary>Returns a list of Google BigQuery data type mappings.</summary>
            <returns>A list of Google BigQuery data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAzureSQLDataTypeMappings">
            <summary>Returns a list of Azure SQL data type mappings.</summary>
            <returns>A list of Azure SQL data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAWSRDSDataTypeMappings">
            <summary>Returns a list of AWS RDS data type mappings.</summary>
            <returns>A list of AWS RDS data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetHanaDataTypeMappings">
            <summary>Returns a list of SAP Hana data type mappings.</summary>
            <returns>A list of SAP Hana data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSpannerDataTypeMappings">
            <summary>Returns a list of Google Spanner data type mappings.</summary>
            <returns>A list of Google Spanner data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GenerateSQLiteDataTypesMapping">
            <summary>
            Generates a list of datatype mappings for SQLite.
            </summary>
            <returns>A list of datatype mappings for SQLite.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GenerateSqlCompactDataTypesMapping">
            <summary>
            Generates a list of datatype mappings for SQL Server Compact Edition.
            </summary>
            <returns>A list of datatype mappings for SQL Server Compact Edition.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetDuckDBDataTypesMapping">
            <summary>Returns a list of datatype mappings for DuckDB.</summary>
            <returns>A list of datatype mappings for DuckDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSalesforceDataTypeMappings">
            <summary>Returns a list of Salesforce data type mappings.</summary>
            <returns>A list of Salesforce data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetHubSpotDataTypeMappings">
            <summary>Returns a list of HubSpot data type mappings.</summary>
            <returns>A list of HubSpot data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetZohoDataTypeMappings">
            <summary>Returns a list of Zoho data type mappings.</summary>
            <returns>A list of Zoho data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPipedriveDataTypeMappings">
            <summary>Returns a list of Pipedrive data type mappings.</summary>
            <returns>A list of Pipedrive data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMicrosoftDynamics365DataTypeMappings">
            <summary>Returns a list of Microsoft Dynamics 365 data type mappings.</summary>
            <returns>A list of Microsoft Dynamics 365 data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSAPCRMDataTypeMappings">
            <summary>Returns a list of SAP CRM data type mappings.</summary>
            <returns>A list of SAP CRM data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetOracleCRMDataTypeMappings">
            <summary>Returns a list of Oracle CRM data type mappings.</summary>
            <returns>A list of Oracle CRM data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetDB2DataTypeMappings">
            <summary>Returns a list of datatype mappings for DB2.</summary>
            <returns>A list of datatype mappings for DB2.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetDynamoDBDataTypeMappings">
            <summary>Returns a list of DynamoDB data type mappings.</summary>
            <returns>A list of DynamoDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetInfluxDBDataTypeMappings">
            <summary>Returns a list of datatype mappings for InfluxDB.</summary>
            <returns>A list of datatype mappings for InfluxDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSybaseDataTypeMappings">
            <summary>Returns a list of datatype mappings for Sybase database.</summary>
            <returns>A list of datatype mappings for Sybase database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetHBaseDataTypeMappings">
            <summary>Returns a list of HBase data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between HBase data types and .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetCockroachDBDataTypeMappings">
            <summary>Returns a list of datatype mappings for CockroachDB.</summary>
            <returns>A list of datatype mappings for CockroachDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetFlatFileDataTypeMappings">
            <summary>Returns a list of Flat File data type mappings.</summary>
            <returns>A list of Flat File data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTSVDataTypeMappings">
            <summary>Returns a list of TSV (Tab-Separated Values) data type mappings.</summary>
            <returns>A list of TSV data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTextDataTypeMappings">
            <summary>Returns a list of Text file data type mappings.</summary>
            <returns>A list of Text file data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetYAMLDataTypeMappings">
            <summary>Returns a list of YAML data type mappings.</summary>
            <returns>A list of YAML data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMarkdownDataTypeMappings">
            <summary>Returns a list of Markdown data type mappings.</summary>
            <returns>A list of Markdown data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetHTMLDataTypeMappings">
            <summary>Returns a list of HTML data type mappings.</summary>
            <returns>A list of HTML data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSQLDataTypeMappings">
            <summary>Returns a list of SQL file data type mappings.</summary>
            <returns>A list of SQL file data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetINIDataTypeMappings">
            <summary>Returns a list of INI file data type mappings.</summary>
            <returns>A list of INI file data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetLogDataTypeMappings">
            <summary>Returns a list of Log file data type mappings.</summary>
            <returns>A list of Log file data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPDFDataTypeMappings">
            <summary>Returns a list of PDF data type mappings.</summary>
            <returns>A list of PDF data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetDocDataTypeMappings">
            <summary>Returns a list of Microsoft Word document data type mappings.</summary>
            <returns>A list of Microsoft Word document data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetDocxDataTypeMappings">
            <summary>Returns a list of Microsoft Word DOCX data type mappings.</summary>
            <returns>A list of Microsoft Word DOCX data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPPTDataTypeMappings">
            <summary>Returns a list of Microsoft PowerPoint data type mappings.</summary>
            <returns>A list of Microsoft PowerPoint data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPPTXDataTypeMappings">
            <summary>Returns a list of Microsoft PowerPoint PPTX data type mappings.</summary>
            <returns>A list of Microsoft PowerPoint PPTX data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetFireBirdDataTypesMapping">
            <summary>Returns a list of datatype mappings for Firebird database.</summary>
            <returns>A list of datatype mappings for Firebird database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetLiteDBDataTypesMapping">
            <summary>Returns a list of LiteDB data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between LiteDB data types and their corresponding .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetNeo4jDataTypeMappings">
            <summary>Returns a list of Neo4j data type mappings.</summary>
            <returns>A list of Neo4j data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTigerGraphDataTypeMappings">
            <summary>Returns a list of TigerGraph data type mappings.</summary>
            <returns>A list of TigerGraph data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetJanusGraphDataTypeMappings">
            <summary>Returns a list of JanusGraph data type mappings.</summary>
            <returns>A list of JanusGraph data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetOrientDBDataTypeMappings">
            <summary>Returns a list of OrientDB data type mappings.</summary>
            <returns>A list of OrientDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTwilioDataTypeMappings">
            <summary>Returns a list of Twilio data type mappings.</summary>
            <returns>A list of Twilio data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPlaidDataTypeMappings">
            <summary>Returns a list of Plaid data type mappings.</summary>
            <returns>A list of Plaid data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetDocuSignDataTypeMappings">
            <summary>Returns a list of DocuSign data type mappings.</summary>
            <returns>A list of DocuSign data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPhilipsHueDataTypeMappings">
            <summary>Returns a list of Philips Hue data type mappings.</summary>
            <returns>A list of Philips Hue data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetNestDataTypeMappings">
            <summary>Returns a list of Nest data type mappings.</summary>
            <returns>A list of Nest data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSmartThingsDataTypeMappings">
            <summary>Returns a list of SmartThings data type mappings.</summary>
            <returns>A list of SmartThings data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTuyaDataTypeMappings">
            <summary>Returns a list of Tuya data type mappings.</summary>
            <returns>A list of Tuya data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetParticleDataTypeMappings">
            <summary>Returns a list of Particle data type mappings.</summary>
            <returns>A list of Particle data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetArduinoCloudDataTypeMappings">
            <summary>Returns a list of Arduino Cloud data type mappings.</summary>
            <returns>A list of Arduino Cloud data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTFRecordDataTypeMappings">
            <summary>Returns a list of TFRecord data type mappings.</summary>
            <returns>A list of TFRecord data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetONNXDataTypeMappings">
            <summary>Returns a list of ONNX data type mappings.</summary>
            <returns>A list of ONNX data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPyTorchDataDataTypeMappings">
            <summary>Returns a list of PyTorch data type mappings.</summary>
            <returns>A list of PyTorch data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetScikitLearnDataDataTypeMappings">
            <summary>Returns a list of Scikit-Learn data type mappings.</summary>
            <returns>A list of Scikit-Learn data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetHdf5DataTypeMappings">
            <summary>Returns a list of HDF5 data type mappings.</summary>
            <returns>A list of HDF5 data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetLibSVMDataTypeMappings">
            <summary>Returns a list of LibSVM data type mappings.</summary>
            <returns>A list of LibSVM data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetGraphMLDataTypeMappings">
            <summary>Returns a list of GraphML data type mappings.</summary>
            <returns>A list of GraphML data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetDICOMDataTypeMappings">
            <summary>Returns a list of DICOM data type mappings.</summary>
            <returns>A list of DICOM data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetLASDataTypeMappings">
            <summary>Returns a list of LAS (Log ASCII Standard) data type mappings.</summary>
            <returns>A list of LAS data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetRecordIODataTypeMappings">
            <summary>Returns a list of RecordIO data type mappings.</summary>
            <returns>A list of RecordIO data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMariaDBDataTypeMappings">
            <summary>Returns a list of MariaDB data type mappings.</summary>
            <returns>A list of MariaDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTimeScaleDataTypeMappings">
            <summary>Returns a list of TimeScale data type mappings.</summary>
            <returns>A list of TimeScale data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetH2DatabaseDataTypeMappings">
            <summary>Returns a list of H2Database data type mappings.</summary>
            <returns>A list of H2Database data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMemcachedDataTypeMappings">
            <summary>Returns a list of Memcached data type mappings.</summary>
            <returns>A list of Memcached data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetGridGainDataTypeMappings">
            <summary>Returns a list of GridGain data type mappings.</summary>
            <returns>A list of GridGain data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetHazelcastDataTypeMappings">
            <summary>Returns a list of Hazelcast data type mappings.</summary>
            <returns>A list of Hazelcast data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetApacheIgniteDataTypeMappings">
            <summary>Returns a list of ApacheIgnite data type mappings.</summary>
            <returns>A list of ApacheIgnite data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetChronicleMapDataTypeMappings">
            <summary>Returns a list of ChronicleMap data type mappings.</summary>
            <returns>A list of ChronicleMap data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMongoDBDataTypeMappings">
            <summary>Returns a list of MongoDB data type mappings.</summary>
            <returns>A list of DataTypeMapping objects representing the mappings between .NET data types and MongoDB data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetCassandraDataTypeMappings">
            <summary>Returns a list of mappings between .NET data types and Cassandra data types.</summary>
            <returns>A list of <see cref="T:TheTechIdea.Beep.DriversConfigurations.DatatypeMapping"/> objects representing the mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetRedisDataTypeMappings">
            <summary>Returns a list of Redis data type mappings.</summary>
            <returns>A list of Redis data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetCouchbaseDataTypeMappings">
            <summary>Returns a list of Couchbase data type mappings.</summary>
            <returns>A list of Couchbase data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GenerateOracleDataTypesMapping">
            <summary>
            Generates a list of datatype mappings for Oracle database.
            </summary>
            <returns>A list of datatype mappings for Oracle database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetStripeDataTypeMappings">
            <summary>Returns a list of Stripe data type mappings.</summary>
            <returns>A list of Stripe data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPayPalDataTypeMappings">
            <summary>Returns a list of PayPal data type mappings.</summary>
            <returns>A list of PayPal data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSquareDataTypeMappings">
            <summary>Returns a list of Square data type mappings.</summary>
            <returns>A list of Square data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAuthorizeNetDataTypeMappings">
            <summary>Returns a list of Authorize.Net data type mappings.</summary>
            <returns>A list of Authorize.Net data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetBraintreeDataTypeMappings">
            <summary>Returns a list of Braintree data type mappings.</summary>
            <returns>A list of Braintree data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetWorldpayDataTypeMappings">
            <summary>Returns a list of Worldpay data type mappings.</summary>
            <returns>A list of Worldpay data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAdyenDataTypeMappings">
            <summary>Returns a list of Adyen data type mappings.</summary>
            <returns>A list of Adyen data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTwoCheckoutDataTypeMappings">
            <summary>Returns a list of TwoCheckout data type mappings.</summary>
            <returns>A list of TwoCheckout data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetRazorpayDataTypeMappings">
            <summary>Returns a list of Razorpay data type mappings.</summary>
            <returns>A list of Razorpay data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPayoneerDataTypeMappings">
            <summary>Returns a list of Payoneer data type mappings.</summary>
            <returns>A list of Payoneer data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetWiseDataTypeMappings">
            <summary>Returns a list of Wise data type mappings.</summary>
            <returns>A list of Wise data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetCoinbaseDataTypeMappings">
            <summary>Returns a list of Coinbase data type mappings.</summary>
            <returns>A list of Coinbase data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetVenmoDataTypeMappings">
            <summary>Returns a list of Venmo data type mappings.</summary>
            <returns>A list of Venmo data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetBitPayDataTypeMappings">
            <summary>Returns a list of BitPay data type mappings.</summary>
            <returns>A list of BitPay data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPostgreDataTypesMapping">
            <summary>Returns a list of datatype mappings for PostgreSQL.</summary>
            <returns>A list of datatype mappings for PostgreSQL.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMySqlDataTypesMapping">
            <summary>Returns a list of datatype mappings between MySQL and .NET data types.</summary>
            <returns>A list of datatype mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetWebApiDataTypeMappings">
            <summary>Returns a list of WebAPI data type mappings.</summary>
            <returns>A list of WebAPI data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetRestApiDataTypeMappings">
            <summary>Returns a list of REST API data type mappings.</summary>
            <returns>A list of REST API data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetGraphQLDataTypeMappings">
            <summary>Returns a list of GraphQL data type mappings.</summary>
            <returns>A list of GraphQL data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetODataDataTypeMappings">
            <summary>Returns a list of OData data type mappings.</summary>
            <returns>A list of OData data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetODBCDataTypeMappings">
            <summary>Returns a list of ODBC data type mappings.</summary>
            <returns>A list of ODBC data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetOLEDBDataTypeMappings">
            <summary>Returns a list of OLE DB data type mappings.</summary>
            <returns>A list of OLE DB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetADODataTypeMappings">
            <summary>Returns a list of ADO data type mappings.</summary>
            <returns>A list of ADO data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetProtocolDataTypeMappings">
            <summary>Returns a list of Protocol data type mappings for basic protocols.</summary>
            <returns>A list of Protocol data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetElasticSearchDataTypeMappings">
            <summary>Returns a list of ElasticSearch data type mappings.</summary>
            <returns>A list of ElasticSearch data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSolrDataTypeMappings">
            <summary>Returns a list of Solr data type mappings.</summary>
            <returns>A list of Solr data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetClickHouseDataTypeMappings">
            <summary>Returns a list of ClickHouse data type mappings.</summary>
            <returns>A list of ClickHouse data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetRavenDBDataTypeMappings">
            <summary>Returns a list of RavenDB data type mappings.</summary>
            <returns>A list of RavenDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetVistaDBDataTypeMappings">
            <summary>Returns a list of VistaDB data type mappings.</summary>
            <returns>A list of VistaDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetFirebaseDataTypeMappings">
            <summary>Returns a list of Firebase data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between Firebase data types and .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSupabaseDataTypeMappings">
            <summary>Returns a list of Supabase data type mappings.</summary>
            <returns>A list of Supabase data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetCouchDBDataTypeMappings">
            <summary>Returns a list of CouchDB data type mappings.</summary>
            <returns>A list of CouchDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetFacebookDataTypeMappings">
            <summary>Returns a list of Facebook data type mappings.</summary>
            <returns>A list of Facebook data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTwitterDataTypeMappings">
            <summary>Returns a list of Twitter data type mappings.</summary>
            <returns>A list of Twitter data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetInstagramDataTypeMappings">
            <summary>Returns a list of Instagram data type mappings.</summary>
            <returns>A list of Instagram data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetLinkedInDataTypeMappings">
            <summary>Returns a list of LinkedIn data type mappings.</summary>
            <returns>A list of LinkedIn data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPinterestDataTypeMappings">
            <summary>Returns a list of Pinterest data type mappings.</summary>
            <returns>A list of Pinterest data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetYouTubeDataTypeMappings">
            <summary>Returns a list of YouTube data type mappings.</summary>
            <returns>A list of YouTube data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTikTokDataTypeMappings">
            <summary>Returns a list of TikTok data type mappings.</summary>
            <returns>A list of TikTok data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetSnapchatDataTypeMappings">
            <summary>Returns a list of Snapchat data type mappings.</summary>
            <returns>A list of Snapchat data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetRedditDataTypeMappings">
            <summary>Returns a list of Reddit data type mappings.</summary>
            <returns>A list of Reddit data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetBufferDataTypeMappings">
            <summary>Returns a list of Buffer data type mappings.</summary>
            <returns>A list of Buffer data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetHootsuiteDataTypeMappings">
            <summary>Returns a list of Hootsuite data type mappings.</summary>
            <returns>A list of Hootsuite data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTikTokAdsDataTypeMappings">
            <summary>Returns a list of TikTokAds data type mappings.</summary>
            <returns>A list of TikTokAds data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetThreadsDataTypeMappings">
            <summary>Returns a list of Threads data type mappings.</summary>
            <returns>A list of Threads data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMastodonDataTypeMappings">
            <summary>Returns a list of Mastodon data type mappings.</summary>
            <returns>A list of Mastodon data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetBlueskyDataTypeMappings">
            <summary>Returns a list of Bluesky data type mappings.</summary>
            <returns>A list of Bluesky data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GenerateSqlServerDataTypesMapping">
            <summary>
            Generates a list of datatype mappings between SQL Server data types and corresponding .NET data types.
            </summary>
            <returns>A list of datatype mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetKafkaDataTypeMappings">
            <summary>Returns a list of Apache Kafka data type mappings.</summary>
            <returns>A list of Apache Kafka data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetRabbitMQDataTypeMappings">
            <summary>Returns a list of RabbitMQ data type mappings.</summary>
            <returns>A list of RabbitMQ data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetActiveMQDataTypeMappings">
            <summary>Returns a list of ActiveMQ data type mappings.</summary>
            <returns>A list of ActiveMQ data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPulsarDataTypeMappings">
            <summary>Returns a list of Apache Pulsar data type mappings.</summary>
            <returns>A list of Apache Pulsar data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetNatsDataTypeMappings">
            <summary>Returns a list of NATS data type mappings.</summary>
            <returns>A list of NATS data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetZeroMQDataTypeMappings">
            <summary>Returns a list of ZeroMQ data type mappings.</summary>
            <returns>A list of ZeroMQ data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAWSKinesisDataTypeMappings">
            <summary>Returns a list of AWS Kinesis data type mappings.</summary>
            <returns>A list of AWS Kinesis data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAWSSQSDataTypeMappings">
            <summary>Returns a list of AWS SQS data type mappings.</summary>
            <returns>A list of AWS SQS data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAWSSNSDataTypeMappings">
            <summary>Returns a list of AWS SNS data type mappings.</summary>
            <returns>A list of AWS SNS data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAzureServiceBusDataTypeMappings">
            <summary>Returns a list of Azure Service Bus data type mappings.</summary>
            <returns>A list of Azure Service Bus data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMassTransitDataTypeMappings">
            <summary>Returns a list of MassTransit data type mappings.</summary>
            <returns>A list of MassTransit data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetApacheFlinkDataTypeMappings">
            <summary>Returns a list of Apache Flink data type mappings.</summary>
            <returns>A list of Apache Flink data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetApacheStormDataTypeMappings">
            <summary>Returns a list of Apache Storm data type mappings.</summary>
            <returns>A list of Apache Storm data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetApacheSparkStreamingDataTypeMappings">
            <summary>Returns a list of Apache Spark Streaming data type mappings.</summary>
            <returns>A list of Apache Spark Streaming data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPineConeDataTypesMapping">
            <summary>Returns a list of datatype mappings for PineCone.</summary>
            <returns>A list of datatype mappings for PineCone.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetQdrantDataTypesMapping">
            <summary>Returns a list of datatype mappings for Qdrant.</summary>
            <returns>A list of datatype mappings for Qdrant.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetShapVectorDataTypesMapping">
            <summary>Returns a list of datatype mappings for ShapVector.</summary>
            <returns>A list of datatype mappings for ShapVector.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetWeaviateDataTypesMapping">
            <summary>Returns a list of datatype mappings for Weaviate.</summary>
            <returns>A list of datatype mappings for Weaviate.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMilvusDataTypesMapping">
            <summary>Returns a list of datatype mappings for Milvus.</summary>
            <returns>A list of datatype mappings for Milvus.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetRedisVectorDataTypesMapping">
            <summary>Returns a list of datatype mappings for RedisVector.</summary>
            <returns>A list of datatype mappings for RedisVector.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetZillizDataTypesMapping">
            <summary>Returns a list of datatype mappings for Zilliz.</summary>
            <returns>A list of datatype mappings for Zilliz.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetVespaDataTypesMapping">
            <summary>Returns a list of datatype mappings for Vespa.</summary>
            <returns>A list of datatype mappings for Vespa.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetChromaDBDataTypesMapping">
            <summary>Returns a list of datatype mappings for ChromaDB.</summary>
            <returns>A list of datatype mappings for ChromaDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAWSStepFunctionsDataTypeMappings">
            <summary>Returns a list of AWS Step Functions data type mappings.</summary>
            <returns>A list of AWS Step Functions data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAWSSWFDataTypeMappings">
            <summary>Returns a list of AWS Simple Workflow data type mappings.</summary>
            <returns>A list of AWS Simple Workflow data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAWSIoTDataTypeMappings">
            <summary>Returns a list of AWS IoT data type mappings.</summary>
            <returns>A list of AWS IoT data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAWSIoTCoreDataTypeMappings">
            <summary>Returns a list of AWS IoT Core data type mappings.</summary>
            <returns>A list of AWS IoT Core data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetAWSIoTAnalyticsDataTypeMappings">
            <summary>Returns a list of AWS IoT Analytics data type mappings.</summary>
            <returns>A list of AWS IoT Analytics data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetOPCDataTypeMappings">
            <summary>Returns a list of OPC data type mappings.</summary>
            <returns>A list of OPC data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetPrestoDataTypeMappings">
            <summary>Returns a list of Presto data type mappings.</summary>
            <returns>A list of Presto data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetTrinoDataTypeMappings">
            <summary>Returns a list of Trino data type mappings.</summary>
            <returns>A list of Trino data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetGoogleSheetsDataTypeMappings">
            <summary>Returns a list of Google Sheets data type mappings.</summary>
            <returns>A list of Google Sheets data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DatabaseTypeMappingRepository.GetMiModelDataTypeMappings">
            <summary>Returns a list of MiModel data type mappings.</summary>
            <returns>A list of MiModel data type mappings.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeBasicOperations">
            <summary>
            Helper class for basic .NET data type operations and utilities.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeBasicOperations.NetDataTypeDef1">
            <summary>
            A string representing a collection of .NET data types.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeBasicOperations.NetDataTypeDef2">
            <summary>
            A string representing a list of .NET data types.
            </summary>
            <remarks>
            The string contains a comma-separated list of .NET data types, including:
            - System.Byte[]
            - System.SByte[]
            - System.Byte
            - System.SByte
            - System.Int32
            - System.UInt32
            - System.Int16
            - System.UInt16
            - System.Int64
            - System.UInt64
            - System.Single
            - System.Double
            - System.Char
            - System.Boolean
            - System.Object
            - System.String
            - System.Decimal
            - System.DateTime
            - System.TimeSpan
            - System.DateTimeOffset
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeBasicOperations.GetNetDataTypes">
            <summary>Returns an array of .NET data types.</summary>
            <returns>An array of .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeBasicOperations.GetNetDataTypes2">
            <summary>Returns an array of .NET data types.</summary>
            <returns>An array of .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeBasicOperations.GetCustomDataType(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor,System.Func{System.String,System.String})">
            <summary>
            Gets a custom data type using a custom converter function.
            </summary>
            <param name="DSname">Data source name</param>
            <param name="fld">Entity field</param>
            <param name="DMEEditor">DME Editor instance</param>
            <param name="customTypeConverter">Custom type converter function</param>
            <returns>Custom data type string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeBasicOperations.IsValidFieldMapping(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Validates if a field mapping is valid for the given data source.
            </summary>
            <param name="DSname">Data source name</param>
            <param name="fld">Entity field</param>
            <param name="DMEEditor">DME Editor instance</param>
            <returns>True if valid field mapping exists</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper">
            <summary>
            Main helper class for mapping data types to field names.
            This class has been refactored into smaller, focused helper classes.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetNetDataTypes">
            <summary>Returns an array of .NET data types.</summary>
            <returns>An array of .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetNetDataTypes2">
            <summary>Returns an array of .NET data types.</summary>
            <returns>An array of .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetCustomDataType(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor,System.Func{System.String,System.String})">
            <summary>
            Gets a custom data type using a custom converter function.
            </summary>
            <param name="DSname">Data source name</param>
            <param name="fld">Entity field</param>
            <param name="DMEEditor">DME Editor instance</param>
            <param name="customTypeConverter">Custom type converter function</param>
            <returns>Custom data type string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.IsValidFieldMapping(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Validates if a field mapping is valid for the given data source.
            </summary>
            <param name="DSname">Data source name</param>
            <param name="fld">Entity field</param>
            <param name="DMEEditor">DME Editor instance</param>
            <returns>True if valid field mapping exists</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDataTypeMappingForString(System.String,System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the datatype mapping for a given class name, field type, entity field, and DME editor.</summary>
            <param name="className">The name of the class.</param>
            <param name="fieldType">The type of the field.</param>
            <param name="fld">The entity field.</param>
            <param name="DMEEditor">The DME editor.</param>
            <returns>The datatype mapping for the given parameters.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDataType(System.String,System.String,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type of a field in a specific data source.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="providerfldtype">The provider field type.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDataType(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type of a field in a specific data source.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The field for which to retrieve the data type.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDataTypeFromDataSourceClassName(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type of a field in a specific data source.</summary>
            <param name="className">The name of the data source class</param>
            <param name="fld">The field for which to retrieve the data type.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDataTypes(System.String,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type mappings for a specific data source.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The List of DataTypeMapping for DataSource.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDataTypes(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type mappings for a specific data source type.</summary>
            <param name="DSname">The type of the data source.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The List of DataTypeMapping for DataSource.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetFieldTypeWoConversion(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the field type without conversion.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The entity field.</param>
            <param name="DMEEditor">The DME editor.</param>
            <returns>The field type without conversion.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetMappings">
            <summary>Returns a comprehensive list of all datatype mappings for all supported databases.</summary>
            <returns>A comprehensive list of datatype mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GenerateOracleDataTypesMapping">
            <summary>
            Generates a list of datatype mappings for Oracle database.
            </summary>
            <returns>A list of datatype mappings for Oracle database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GenerateSQLiteDataTypesMapping">
            <summary>
            Generates a list of datatype mappings for SQLite.
            </summary>
            <returns>A list of datatype mappings for SQLite.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GenerateSqlServerDataTypesMapping">
            <summary>
            Generates a list of datatype mappings between SQL Server data types and corresponding .NET data types.
            </summary>
            <returns>A list of datatype mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GenerateSqlCompactDataTypesMapping">
            <summary>
            Generates a list of datatype mappings for SQL Server Compact Edition.
            </summary>
            <returns>A list of datatype mappings for SQL Server Compact Edition.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetPostgreDataTypesMapping">
            <summary>Returns a list of datatype mappings for PostgreSQL.</summary>
            <returns>A list of datatype mappings for PostgreSQL.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetMySqlDataTypesMapping">
            <summary>Returns a list of datatype mappings between MySQL and .NET data types.</summary>
            <returns>A list of datatype mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetFireBirdDataTypesMapping">
            <summary>Returns a list of datatype mappings for Firebird database.</summary>
            <returns>A list of datatype mappings for Firebird database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetLiteDBDataTypesMapping">
            <summary>Returns a list of LiteDB data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between LiteDB data types and their corresponding .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDuckDBDataTypesMapping">
            <summary>Returns a list of datatype mappings for DuckDB.</summary>
            <returns>A list of datatype mappings for DuckDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDB2DataTypeMappings">
            <summary>Returns a list of datatype mappings for DB2.</summary>
            <returns>A list of datatype mappings for DB2.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetMongoDBDataTypeMappings">
            <summary>Returns a list of MongoDB data type mappings.</summary>
            <returns>A list of DataTypeMapping objects representing the mappings between .NET data types and MongoDB data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetCassandraDataTypeMappings">
            <summary>Returns a list of mappings between .NET data types and Cassandra data types.</summary>
            <returns>A list of <see cref="T:TheTechIdea.Beep.DriversConfigurations.DatatypeMapping"/> objects representing the mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetRedisDataTypeMappings">
            <summary>Returns a list of Redis data type mappings.</summary>
            <returns>A list of Redis data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDynamoDBDataTypeMappings">
            <summary>Returns a list of DynamoDB data type mappings.</summary>
            <returns>A list of DynamoDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetInfluxDBDataTypeMappings">
            <summary>Returns a list of datatype mappings for InfluxDB.</summary>
            <returns>A list of datatype mappings for InfluxDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetSybaseDataTypeMappings">
            <summary>Returns a list of datatype mappings for Sybase database.</summary>
            <returns>A list of datatype mappings for Sybase database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetHBaseDataTypeMappings">
            <summary>Returns a list of HBase data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between HBase data types and .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetCockroachDBDataTypeMappings">
            <summary>Returns a list of datatype mappings for CockroachDB.</summary>
            <returns>A list of datatype mappings for CockroachDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetBerkeleyDBDataTypesMapping">
            <summary>Returns a list of datatype mappings for Berkeley DB.</summary>
            <returns>A list of datatype mappings for Berkeley DB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetSnowflakeDataTypesMapping">
            <summary>Returns a list of Snowflake data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between Snowflake data types and their corresponding .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAzureCosmosDBDataTypesMapping">
            <summary>Returns a list of Azure Cosmos DB data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between Azure Cosmos DB data types and .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetVerticaDataTypesMapping">
            <summary>Returns a list of datatype mappings for Vertica database.</summary>
            <returns>A list of datatype mappings for Vertica database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetTeradataDataTypeMappings">
            <summary>Returns a list of Teradata data type mappings.</summary>
            <returns>A list of Teradata data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetArangoDBDataTypeMappings">
            <summary>Returns a list of datatype mappings for ArangoDB.</summary>
            <returns>A list of datatype mappings for ArangoDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetFirebaseDataTypeMappings">
            <summary>Returns a list of Firebase data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between Firebase data types and .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetSupabaseDataTypeMappings">
            <summary>Returns a list of Supabase data type mappings.</summary>
            <returns>A list of Supabase data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetMariaDBDataTypeMappings">
            <summary>Returns a list of MariaDB data type mappings.</summary>
            <returns>A list of MariaDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetTimeScaleDataTypeMappings">
            <summary>Returns a list of TimeScale data type mappings.</summary>
            <returns>A list of TimeScale data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetH2DatabaseDataTypeMappings">
            <summary>Returns a list of H2Database data type mappings.</summary>
            <returns>A list of H2Database data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetNeo4jDataTypeMappings">
            <summary>Returns a list of Neo4j data type mappings.</summary>
            <returns>A list of Neo4j data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetTigerGraphDataTypeMappings">
            <summary>Returns a list of TigerGraph data type mappings.</summary>
            <returns>A list of TigerGraph data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetJanusGraphDataTypeMappings">
            <summary>Returns a list of JanusGraph data type mappings.</summary>
            <returns>A list of JanusGraph data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetOrientDBDataTypeMappings">
            <summary>Returns a list of OrientDB data type mappings.</summary>
            <returns>A list of OrientDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetElasticSearchDataTypeMappings">
            <summary>Returns a list of ElasticSearch data type mappings.</summary>
            <returns>A list of ElasticSearch data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetSolrDataTypeMappings">
            <summary>Returns a list of Solr data type mappings.</summary>
            <returns>A list of Solr data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetClickHouseDataTypeMappings">
            <summary>Returns a list of ClickHouse data type mappings.</summary>
            <returns>A list of datatype mappings for ClickHouse.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetRavenDBDataTypeMappings">
            <summary>Returns a list of RavenDB data type mappings.</summary>
            <returns>A list of RavenDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetVistaDBDataTypeMappings">
            <summary>Returns a list of VistaDB data type mappings.</summary>
            <returns>A list of VistaDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetMemcachedDataTypeMappings">
            <summary>Returns a list of Memcached data type mappings.</summary>
            <returns>A list of Memcached data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetGridGainDataTypeMappings">
            <summary>Returns a list of GridGain data type mappings.</summary>
            <returns>A list of GridGain data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetHazelcastDataTypeMappings">
            <summary>Returns a list of Hazelcast data type mappings.</summary>
            <returns>A list of Hazelcast data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetApacheIgniteDataTypeMappings">
            <summary>Returns a list of ApacheIgnite data type mappings.</summary>
            <returns>A list of ApacheIgnite data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetChronicleMapDataTypeMappings">
            <summary>Returns a list of ChronicleMap data type mappings.</summary>
            <returns>A list of ChronicleMap data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetPineConeDataTypesMapping">
            <summary>Returns a list of datatype mappings for PineCone.</summary>
            <returns>A list of datatype mappings for PineCone.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetQdrantDataTypesMapping">
            <summary>Returns a list of datatype mappings for Qdrant.</summary>
            <returns>A list of datatype mappings for Qdrant.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetShapVectorDataTypesMapping">
            <summary>Returns a list of datatype mappings for ShapVector.</summary>
            <returns>A list of datatype mappings for ShapVector.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetWeaviateDataTypesMapping">
            <summary>Returns a list of datatype mappings for Weaviate.</summary>
            <returns>A list of datatype mappings for Weaviate.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetMilvusDataTypesMapping">
            <summary>Returns a list of datatype mappings for Milvus.</summary>
            <returns>A list of datatype mappings for Milvus.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetRedisVectorDataTypesMapping">
            <summary>Returns a list of datatype mappings for RedisVector.</summary>
            <returns>A list of datatype mappings for RedisVector.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetZillizDataTypesMapping">
            <summary>Returns a list of datatype mappings for Zilliz.</summary>
            <returns>A list of datatype mappings for Zilliz.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetVespaDataTypesMapping">
            <summary>Returns a list of datatype mappings for Vespa.</summary>
            <returns>A list of datatype mappings for Vespa.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetChromaDBDataTypesMapping">
            <summary>Returns a list of datatype mappings for ChromaDB.</summary>
            <returns>A list of datatype mappings for ChromaDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetTFRecordDataTypeMappings">
            <summary>Returns a list of TFRecord data type mappings.</summary>
            <returns>A list of TFRecord data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetONNXDataTypeMappings">
            <summary>Returns a list of ONNX data type mappings.</summary>
            <returns>A list of ONNX data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetPyTorchDataDataTypeMappings">
            <summary>Returns a list of PyTorch data type mappings.</summary>
            <returns>A list of PyTorch data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetScikitLearnDataDataTypeMappings">
            <summary>Returns a list of Scikit-Learn data type mappings.</summary>
            <returns>A list of Scikit-Learn data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetHdf5DataTypeMappings">
            <summary>Returns a list of HDF5 data type mappings.</summary>
            <returns>A list of HDF5 data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetLibSVMDataTypeMappings">
            <summary>Returns a list of LibSVM data type mappings.</summary>
            <returns>A list of LibSVM data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetGraphMLDataTypeMappings">
            <summary>Returns a list of GraphML data type mappings.</summary>
            <returns>A list of GraphML data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDICOMDataTypeMappings">
            <summary>Returns a list of DICOM data type mappings.</summary>
            <returns>A list of DICOM data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetLASDataTypeMappings">
            <summary>Returns a list of LAS data type mappings.</summary>
            <returns>A list of LAS data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetRecordIODataTypeMappings">
            <summary>Returns a list of RecordIO data type mappings.</summary>
            <returns>A list of RecordIO data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAWSStepFunctionsDataTypeMappings">
            <summary>Returns a list of AWS Step Functions data type mappings.</summary>
            <returns>A list of AWS Step Functions data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAWSSWFDataTypeMappings">
            <summary>Returns a list of AWS Simple Workflow data type mappings.</summary>
            <returns>A list of AWS Simple Workflow data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAWSIoTDataTypeMappings">
            <summary>Returns a list of AWS IoT data type mappings.</summary>
            <returns>A list of AWS IoT data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAWSIoTCoreDataTypeMappings">
            <summary>Returns a list of AWS IoT Core data type mappings.</summary>
            <returns>A list of AWS IoT Core data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAWSIoTAnalyticsDataTypeMappings">
            <summary>Returns a list of AWS IoT Analytics data type mappings.</summary>
            <returns>A list of AWS IoT Analytics data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetOPCDataTypeMappings">
            <summary>Returns a list of OPC data type mappings.</summary>
            <returns>A list of OPC data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetPrestoDataTypeMappings">
            <summary>Returns a list of Presto data type mappings.</summary>
            <returns>A list of Presto data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetTrinoDataTypeMappings">
            <summary>Returns a list of Trino data type mappings.</summary>
            <returns>A list of Trino data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetGoogleSheetsDataTypeMappings">
            <summary>Returns a list of Google Sheets data type mappings.</summary>
            <returns>A list of Google Sheets data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetMiModelDataTypeMappings">
            <summary>Returns a list of MiModel data type mappings.</summary>
            <returns>A list of MiModel data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetWebApiDataTypeMappings">
            <summary>Returns a list of WebAPI data type mappings.</summary>
            <returns>A list of WebAPI data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetRestApiDataTypeMappings">
            <summary>Returns a list of REST API data type mappings.</summary>
            <returns>A list of REST API data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetGraphQLDataTypeMappings">
            <summary>Returns a list of GraphQL data type mappings.</summary>
            <returns>A list of GraphQL data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetODataDataTypeMappings">
            <summary>Returns a list of OData data type mappings.</summary>
            <returns>A list of OData data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetODBCDataTypeMappings">
            <summary>Returns a list of ODBC data type mappings.</summary>
            <returns>A list of ODBC data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetOLEDBDataTypeMappings">
            <summary>Returns a list of OLE DB data type mappings.</summary>
            <returns>A list of OLE DB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetADODataTypeMappings">
            <summary>Returns a list of ADO data type mappings.</summary>
            <returns>A list of ADO data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetProtocolDataTypeMappings">
            <summary>Returns a list of Protocol data type mappings.</summary>
            <returns>A list of Protocol data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAWSRedshiftDataTypeMappings">
            <summary>Returns a list of AWS Redshift data type mappings.</summary>
            <returns>A list of AWS Redshift data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetGoogleBigQueryDataTypeMappings">
            <summary>Returns a list of Google BigQuery data type mappings.</summary>
            <returns>A list of Google BigQuery data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAzureSQLDataTypeMappings">
            <summary>Returns a list of Azure SQL data type mappings.</summary>
            <returns>A list of Azure SQL data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAWSRDSDataTypeMappings">
            <summary>Returns a list of AWS RDS data type mappings.</summary>
            <returns>A list of AWS RDS data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetHanaDataTypeMappings">
            <summary>Returns a list of SAP Hana data type mappings.</summary>
            <returns>A list of SAP Hana data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetSpannerDataTypeMappings">
            <summary>Returns a list of Google Spanner data type mappings.</summary>
            <returns>A list of Google Spanner data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetKafkaDataTypeMappings">
            <summary>Returns a list of Apache Kafka data type mappings.</summary>
            <returns>A list of Apache Kafka data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetRabbitMQDataTypeMappings">
            <summary>Returns a list of RabbitMQ data type mappings.</summary>
            <returns>A list of RabbitMQ data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetActiveMQDataTypeMappings">
            <summary>Returns a list of ActiveMQ data type mappings.</summary>
            <returns>A list of ActiveMQ data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetPulsarDataTypeMappings">
            <summary>Returns a list of Apache Pulsar data type mappings.</summary>
            <returns>A list of Apache Pulsar data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetNatsDataTypeMappings">
            <summary>Returns a list of NATS data type mappings.</summary>
            <returns>A list of NATS data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetZeroMQDataTypeMappings">
            <summary>Returns a list of ZeroMQ data type mappings.</summary>
            <returns>A list of ZeroMQ data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAWSKinesisDataTypeMappings">
            <summary>Returns a list of AWS Kinesis data type mappings.</summary>
            <returns>A list of AWS Kinesis data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAWSSQSDataTypeMappings">
            <summary>Returns a list of AWS SQS data type mappings.</summary>
            <returns>A list of AWS SQS data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAWSSNSDataTypeMappings">
            <summary>Returns a list of AWS SNS data type mappings.</summary>
            <returns>A list of AWS SNS data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAzureServiceBusDataTypeMappings">
            <summary>Returns a list of Azure Service Bus data type mappings.</summary>
            <returns>A list of Azure Service Bus data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetMassTransitDataTypeMappings">
            <summary>Returns a list of MassTransit data type mappings.</summary>
            <returns>A list of MassTransit data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetApacheFlinkDataTypeMappings">
            <summary>Returns a list of Apache Flink data type mappings.</summary>
            <returns>A list of Apache Flink data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetApacheStormDataTypeMappings">
            <summary>Returns a list of Apache Storm data type mappings.</summary>
            <returns>A list of Apache Storm data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetApacheSparkStreamingDataTypeMappings">
            <summary>Returns a list of Apache Spark Streaming data type mappings.</summary>
            <returns>A list of Apache Spark Streaming data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetHadoopDataTypeMappings">
            <summary>Returns a list of Apache Hadoop data type mappings.</summary>
            <returns>A list of Apache Hadoop data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetKuduDataTypeMappings">
            <summary>Returns a list of Apache Kudu data type mappings.</summary>
            <returns>A list of Apache Kudu data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetDruidDataTypeMappings">
            <summary>Returns a list of Apache Druid data type mappings.</summary>
            <returns>A list of Apache Druid data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetPinotDataTypeMappings">
            <summary>Returns a list of Apache Pinot data type mappings.</summary>
            <returns>A list of Apache Pinot data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetParquetDataTypeMappings">
            <summary>Returns a list of Parquet data type mappings.</summary>
            <returns>A list of Parquet data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetAvroDataTypeMappings">
            <summary>Returns a list of Avro data type mappings.</summary>
            <returns>A list of Avro data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetORCDataTypeMappings">
            <summary>Returns a list of ORC data type mappings.</summary>
            <returns>A list of ORC data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetFeatherDataTypeMappings">
            <summary>Returns a list of Feather data type mappings.</summary>
            <returns>A list of Feather data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.GetCouchbaseDataTypeMappings">
            <summary>Returns a list of Couchbase data type mappings.</summary>
            <returns>A list of Couchbase data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeFieldMappingHelper.InitQueryDefaultValues">
            <summary>
            Initializes a list of default query values using comprehensive database type mappings.
            </summary>
            <returns>A comprehensive list of all database type mappings.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingLookup">
            <summary>
            Optimized helper class for data type mapping lookups and conversions between database and .NET types.
            Features caching, improved error handling, and modern C# patterns.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingLookup.GetDataTypeMappingForString(System.String,System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Gets the datatype mapping for a given class name, field type, entity field, and DME editor with caching.
            </summary>
            <param name="className">The name of the class.</param>
            <param name="fieldType">The type of the field.</param>
            <param name="fld">The entity field.</param>
            <param name="DMEEditor">The DME editor.</param>
            <returns>The datatype mapping for the given parameters.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingLookup.GetDataType(System.String,System.String,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Gets the data type of a field in a specific data source with enhanced error handling and caching.
            </summary>
            <param name="DSname">The name of the data source.</param>
            <param name="providerfldtype">The provider field type.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingLookup.GetDataType(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Gets the data type of a field in a specific data source with comprehensive mapping logic.
            </summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The field for which to retrieve the data type.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingLookup.GetDataTypeFromDataSourceClassName(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Gets the data type of a field from a specific data source class name.
            </summary>
            <param name="className">The name of the data source class</param>
            <param name="fld">The field for which to retrieve the data type.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingLookup.GetFieldTypeWoConversion(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Gets the field type without conversion with enhanced caching and error handling.
            </summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The entity field.</param>
            <param name="DMEEditor">The DME editor.</param>
            <returns>The field type without conversion.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingLookup.ClearCache">
            <summary>
            Clears all internal caches for memory management and fresh data loading.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingLookup.GetCacheStatistics">
            <summary>
            Gets cache statistics for monitoring and diagnostics.
            </summary>
            <returns>Dictionary containing cache statistics.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingRepository">
            <summary>
            Helper class for retrieving data type mappings for different data sources.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingRepository.GetDataTypes(System.String,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type mappings for a specific data source.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The List of DataTypeMapping for DataSource.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingRepository.GetDataTypes(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type mappings for a specific data source type.</summary>
            <param name="DSname">The type of the data source.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The List of DataTypeMapping for DataSource.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.DataTypeMappingRepository.GetAllMappings">
            <summary>Returns a comprehensive list of all datatype mappings for all supported databases.</summary>
            <returns>A comprehensive list of datatype mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.TypeHelper.GetInstance(System.Type)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which  
            the method is invoked.
            </summary>
            <param name="type"> 
            The type on which the method was invoked. 
            </param>
            <returns> 
            An instance of the <paramref name="type"/>. 
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.TypeHelper.GetInstance``1(System.Type,``0)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which  
            the method is invoked.
            </summary>
            <typeparam name="TArg"> 
            The type of the argument to pass to the constructor. 
            </typeparam>
            <param name="type"> 
            The type on which the method was invoked. 
            </param>
            <param name="argument"> 
            The argument to pass to the constructor. 
            </param>
            <returns> 
            An instance of the given <paramref name="type"/>. 
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.TypeHelper.GetInstance``2(System.Type,``0,``1)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which  
            the method is invoked.
            </summary>
            <typeparam name="TArg1"> 
            The type of the first argument to pass to the constructor. 
            </typeparam>
            <typeparam name="TArg2"> 
            The type of the second argument to pass to the constructor. 
            </typeparam>
            <param name="type"> 
            The type on which the method was invoked. 
            </param>
            <param name="argument1"> 
            The first argument to pass to the constructor. 
            </param>
            <param name="argument2"> 
            The second argument to pass to the constructor. 
            </param>
            <returns> 
            An instance of the given <paramref name="type"/>. 
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelpers.TypeHelper.GetInstance``3(System.Type,``0,``1,``2)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which 
            the method is invoked.
            </summary>
            <typeparam name="TArg1"> 
            The type of the first argument to pass to the constructor. 
            </typeparam>
            <typeparam name="TArg2"> 
            The type of the second argument to pass to the constructor. 
            </typeparam>
            <typeparam name="TArg3"> 
            The type of the third argument to pass to the constructor. 
            </typeparam>
            <param name="type"> 
            The type on which the method was invoked. 
            </param>
            <param name="argument1"> 
            The first argument to pass to the constructor. 
            </param>
            <param name="argument2"> 
            The second argument to pass to the constructor. 
            </param>
            <param name="argument3"> 
            The third argument to pass to the constructor. 
            </param>
            <returns> 
            An instance of the given <paramref name="type"/>. 
            </returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.DataTypesHelper">
            <summary>
            Optimized helper class for mapping data types to field names with caching and enhanced functionality.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Initializes a new instance of the DataTypesHelper class.</summary>
            <param name="pDMEEditor">The IDMEEditor instance to be associated with the helper.</param>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.DataTypesHelper.DMEEditor">
            <summary>Gets or sets the DME editor.</summary>
            <value>The DME editor.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.DataTypesHelper.mapping">
            <summary>Gets or sets the list of datatype mappings.</summary>
            <value>The list of datatype mappings.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.DataTypesHelper.DefaultStringSize">
            <summary>Gets or sets the default string size for database fields.</summary>
            <value>The default string size.</value>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.InitializeAsync">
            <summary>
            Initializes the helper asynchronously to avoid blocking constructor.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.InitializeMappingCache">
            <summary>
            Initializes the mapping cache with common data source mappings.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.InitializeNetTypesCache">
            <summary>
            Initializes the .NET types cache.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetDataClasses">
            <summary>Gets a list of data classes from the configuration editor.</summary>
            <returns>A list of data classes.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetDataType(System.String,TheTechIdea.Beep.DataBase.EntityField)">
            <summary>Gets the data type of a field in a specific data source with caching.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The field for which to retrieve the data type.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetFieldTypeWoConversion(System.String,TheTechIdea.Beep.DataBase.EntityField)">
            <summary>Gets the field type without conversion with enhanced error handling.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The entity field.</param>
            <returns>The field type without conversion.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetNetDataTypes">
            <summary>Returns an array of .NET data types with caching.</summary>
            <returns>An array of .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetNetDataTypes2">
            <summary>Returns an array of extended .NET data types with caching.</summary>
            <returns>An array of extended .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetDataTypeMappings(System.String)">
            <summary>Gets cached data type mappings for a specific data source.</summary>
            <param name="DSname">The name of the data source.</param>
            <returns>The list of datatype mappings for the data source.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.IsValidDataTypeMapping(System.String,TheTechIdea.Beep.DataBase.EntityField)">
            <summary>Validates if a data type mapping exists for the given parameters.</summary>
            <param name="DSname">The data source name.</param>
            <param name="fld">The entity field.</param>
            <returns>True if a valid mapping exists.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetCustomDataType(System.String,TheTechIdea.Beep.DataBase.EntityField,System.Func{System.String,System.String})">
            <summary>Gets a custom data type using a converter function.</summary>
            <param name="DSname">The data source name.</param>
            <param name="fld">The entity field.</param>
            <param name="customConverter">The custom type converter function.</param>
            <returns>The custom converted data type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.ClearCache">
            <summary>Clears the internal caches to free memory and force refresh.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetCacheStatistics">
            <summary>Gets comprehensive statistics about the cached data.</summary>
            <returns>A dictionary containing cache statistics.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetFallbackDataType(TheTechIdea.Beep.DataBase.EntityField)">
            <summary>
            Gets a fallback data type based on field characteristics.
            </summary>
            <param name="fld">The entity field.</param>
            <returns>A fallback .NET data type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetFallbackFieldType(TheTechIdea.Beep.DataBase.EntityField)">
            <summary>
            Gets a fallback field type for database schema.
            </summary>
            <param name="fld">The entity field.</param>
            <returns>A fallback database field type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.Dispose">
            <summary>
            Releases all resources used by the DataTypesHelper.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ErrorHandlingHelper">
            <summary>
            Helper class providing consistent error handling, logging, and exception management
            across the data management engine with structured error reporting and recovery strategies.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ErrorHandlingHelper.HandleException(System.Exception,System.String,TheTechIdea.Beep.Editor.IDMEEditor,System.Boolean)">
            <summary>
            Handles an exception with consistent logging and error reporting.
            </summary>
            <param name="ex">Exception to handle</param>
            <param name="context">Contextual information about where the error occurred</param>
            <param name="editor">DME Editor instance for logging</param>
            <param name="includeStackTrace">Whether to include stack trace in logging</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ErrorHandlingHelper.ExecuteWithErrorHandlingAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,TheTechIdea.Beep.Editor.IDMEEditor,``0,System.Int32)">
            <summary>
            Executes an async operation with comprehensive error handling and recovery.
            </summary>
            <typeparam name="T">Return type of the operation</typeparam>
            <param name="operation">Async operation to execute</param>
            <param name="context">Context description for error reporting</param>
            <param name="editor">DME Editor instance for logging</param>
            <param name="defaultValue">Default value to return on error</param>
            <param name="retryCount">Number of retry attempts</param>
            <returns>Result of operation or default value on error</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ErrorHandlingHelper.ExecuteWithErrorHandling``1(System.Func{``0},System.String,TheTechIdea.Beep.Editor.IDMEEditor,``0)">
            <summary>
            Executes a synchronous operation with comprehensive error handling.
            </summary>
            <typeparam name="T">Return type of the operation</typeparam>
            <param name="operation">Operation to execute</param>
            <param name="context">Context description for error reporting</param>
            <param name="editor">DME Editor instance for logging</param>
            <param name="defaultValue">Default value to return on error</param>
            <returns>Result of operation or default value on error</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ErrorHandlingHelper.CreateErrorInfo(System.Exception,System.String)">
            <summary>
            Creates a comprehensive error info object from an exception.
            </summary>
            <param name="ex">Exception to create error info from</param>
            <param name="context">Contextual information</param>
            <returns>Structured error information object</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ErrorHandlingHelper.LogStructuredException(System.Exception,System.String,TheTechIdea.Beep.Logger.IDMLogger,System.Boolean)">
            <summary>
            Logs a structured exception with detailed information.
            </summary>
            <param name="ex">Exception to log</param>
            <param name="context">Context where the exception occurred</param>
            <param name="logger">Logger instance</param>
            <param name="includeStackTrace">Whether to include stack trace</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ErrorHandlingHelper.SafeDispose(System.IDisposable,System.String,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Safely executes a disposal operation with error handling.
            </summary>
            <param name="disposable">Object to dispose</param>
            <param name="objectName">Name of the object for logging</param>
            <param name="editor">DME Editor for logging</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ErrorHandlingHelper.EnsureSuccess(System.Boolean,System.String,System.String)">
            <summary>
            Validates that an operation completed successfully and throws if not.
            </summary>
            <param name="condition">Condition that should be true for success</param>
            <param name="errorMessage">Error message if condition is false</param>
            <param name="context">Context for the validation</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ErrorHandlingHelper.TryExecute(System.Action,System.String,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Wraps an action with a try-catch that suppresses exceptions.
            </summary>
            <param name="action">Action to execute</param>
            <param name="context">Context for error reporting</param>
            <param name="editor">Editor for logging (optional)</param>
            <returns>True if action completed successfully, false if an exception was caught</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ErrorHandlingHelper.GetUserFriendlyMessage(System.Exception)">
            <summary>
            Gets a user-friendly error message from an exception.
            </summary>
            <param name="ex">Exception to get message from</param>
            <returns>User-friendly error message</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper">
            <summary>
            Helper class that provides methods for file operations and management.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.GetFileExtensions(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Retrieves supported file extensions for data drivers.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.GetFileDataSources(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Retrieves a list of file-based data sources.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.GetSupportedFilesInDirectory(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.Boolean)">
            <summary>
            Gets all files with supported extensions in a directory
            </summary>
            <param name="DMEEditor">The DME editor instance</param>
            <param name="directoryPath">Directory path to search</param>
            <param name="searchSubdirectories">Whether to search subdirectories</param>
            <returns>List of file paths with supported extensions</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ExtensionExists(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Checks if a specific file extension is supported.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.GetMimeType(System.String)">
            <summary>
            Gets the MIME type for a file based on its extension
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>MIME type as string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.FileExists(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Checks if a file exists in the configuration.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.IsFileAccessible(System.String)">
            <summary>
            Checks if a file is accessible for read/write operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ValidateCsvStructure(System.String,System.Int32)">
            <summary>
            Validates the structure of a CSV file against expected column count
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.GetFileSize(System.String)">
            <summary>
            Gets the size of a file in bytes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.GetFileCreationDate(System.String)">
            <summary>
            Gets the creation date of a file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.GetFileModificationDate(System.String)">
            <summary>
            Gets the last modification date of a file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ComputeFileHash(System.String)">
            <summary>
            Computes the MD5 hash of a file
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>MD5 hash as a string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.CompareFiles(System.String,System.String)">
            <summary>
            Compares two files to check if their contents are identical
            </summary>
            <param name="filePath1">Path to the first file</param>
            <param name="filePath2">Path to the second file</param>
            <returns>True if files are identical, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.LoadFiles(TheTechIdea.Beep.Editor.IDMEEditor,System.Collections.Generic.List{System.String})">
            <summary>
            Loads files and returns their connection properties.
            </summary>
            <param name="DMEEditor">The DME editor instance</param>
            <param name="filenames">List of file paths to load</param>
            <returns>List of ConnectionProperties for the loaded files</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.GetDataSourceTypeFromExtension(System.String)">
            <summary>
            Gets the appropriate DataSourceType based on file extension
            </summary>
            <param name="extension">File extension (without dot)</param>
            <returns>The appropriate DataSourceType for the extension</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.UpdateFileStructure(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.Boolean)">
            <summary>
            Updates the file structure by adding or removing a column.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.AddColumnToFile(System.String,System.String,System.String)">
            <summary>
            Adds a column to a CSV file with a default value.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.BackupFile(System.String)">
            <summary>
            Creates a backup of a file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.RestoreFromBackup(System.String,System.String)">
            <summary>
            Restores a file from a backup
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.DeleteIfEmpty(System.String)">
            <summary>
            Deletes a file if it's empty
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.CleanTemporaryFiles(System.String)">
            <summary>
            Cleans temporary files from a directory
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.CompressFile(System.String,System.String)">
            <summary>
            Compresses a file into a ZIP archive
            </summary>
            <param name="filePath">Path to the file to compress</param>
            <param name="zipFilePath">Path for the output ZIP file</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ExtractZipFile(System.String,System.String)">
            <summary>
            Extracts a file from a ZIP archive
            </summary>
            <param name="zipFilePath">Path to the ZIP file</param>
            <param name="extractPath">Path to extract files to</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.CountRows(System.String)">
            <summary>
            Counts the number of rows in a text file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.AppendContentToFile(System.String,System.String)">
            <summary>
            Appends content to a file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ReadLastNLines(System.String,System.Int32)">
            <summary>
            Reads the last N lines from a file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ConvertFileEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Converts a file's encoding
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ConvertCsvToJson(System.String)">
            <summary>
            Converts a CSV file to a JSON string
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ConvertJsonToCsv(System.String,System.String)">
            <summary>
            Converts a JSON file to CSV format
            </summary>
            <param name="jsonFilePath">Path to the JSON file</param>
            <param name="outputCsvPath">Path to save the CSV file</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ParseJsonFile``1(System.String)">
            <summary>
            Parses a JSON file to a generic object structure
            </summary>
            <typeparam name="T">Type to deserialize to</typeparam>
            <param name="jsonFilePath">Path to the JSON file</param>
            <returns>Deserialized object or default(T) if failed</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ParseXmlFile(System.String)">
            <summary>
            Parses an XML file to an XDocument
            </summary>
            <param name="xmlFilePath">Path to the XML file</param>
            <returns>XDocument or null if failed</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.QueryCsvFile(System.String,System.String,System.String)">
            <summary>
            Queries a CSV file for specific data
            </summary>
            <param name="csvFilePath">Path to the CSV file</param>
            <param name="columnName">Column to filter on</param>
            <param name="filterValue">Value to filter for</param>
            <returns>List of matching rows as string arrays</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ReadFileAsync(System.String)">
            <summary>
            Asynchronously reads all text from a file
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>File content as string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.WriteFileAsync(System.String,System.String)">
            <summary>
            Asynchronously writes text to a file
            </summary>
            <param name="filePath">Path to the file</param>
            <param name="content">Content to write</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.CopyFileAsync(System.String,System.String,System.Int32)">
            <summary>
            Asynchronously copies a file
            </summary>
            <param name="sourceFile">Source file path</param>
            <param name="destinationFile">Destination file path</param>
            <param name="bufferSize">Buffer size in bytes</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.DataTableToCsvFile(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Converts a DataTable to a CSV file
            </summary>
            <param name="dataTable">DataTable to convert</param>
            <param name="filePath">Path to save the CSV file</param>
            <param name="includeHeaders">Whether to include column headers</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.ListToCsvFile``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Converts a list to a CSV file
            </summary>
            <param name="list">List to convert</param>
            <param name="filePath">Path to save the CSV file</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.EscapeCsvField(System.String)">
            <summary>
            Escapes a field value for CSV format
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.CreateDataTableFromCsvFile(System.String,System.Boolean)">
            <summary>
            Creates a DataTable from a CSV file
            </summary>
            <param name="filePath">Path to the CSV file</param>
            <param name="hasHeader">Whether the CSV file has headers</param>
            <returns>DataTable with the CSV data</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.SplitCsvLine(System.String)">
            <summary>
            Splits a CSV line into individual fields, handling quoted fields correctly
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.DownloadFile(System.String,System.String,System.String)">
            <summary>
            Downloads a file from a URL to a local path
            </summary>
            <param name="url">URL to download from</param>
            <param name="downloadFileName">Name of the file to save</param>
            <param name="downloadFilePath">Path to save the file</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.DownloadFileAsync(System.String,System.String,System.String)">
            <summary>
            Downloads a file asynchronously from a URL to a local path
            </summary>
            <param name="url">URL to download from</param>
            <param name="downloadFileName">Name of the file to save</param>
            <param name="downloadFilePath">Path to save the file</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.IsFileValid(System.String)">
            <summary>
            Checks if a file is valid (exists and not locked)
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>True if the file is valid, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.GetFileInfo(System.String)">
            <summary>
            Creates a FileInfo object for the given file path
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>FileInfo object or null if file doesn't exist</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.CreateFileDataConnection(System.String)">
            <summary>
            Creates a connection properties object from a file path
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>ConnectionProperties object</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.CreateFileConnections(System.String[])">
            <summary>
            Creates a list of connection properties from an array of file paths
            </summary>
            <param name="filePaths">Array of file paths</param>
            <returns>List of ConnectionProperties objects</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.CreateFileExtensionString(System.String)">
            <summary>
            Creates a string for use in file dialogs listing all supported extensions
            </summary>
            <param name="extensions">Optional list of specific extensions to include</param>
            <returns>File dialog filter string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.EnsureDirectoryExists(System.String)">
            <summary>
            Ensures a directory exists, creating it if necessary
            </summary>
            <param name="directoryPath">Path to the directory</param>
            <returns>True if the directory exists or was created, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.GetDirectorySize(System.String,System.Boolean)">
            <summary>
            Gets the size of a directory in bytes
            </summary>
            <param name="directoryPath">Path to the directory</param>
            <param name="includeSubdirectories">Whether to include subdirectories in the calculation</param>
            <returns>Size of the directory in bytes</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileHelper.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory and its contents to another location
            </summary>
            <param name="sourceDir">Source directory path</param>
            <param name="destinationDir">Destination directory path</param>
            <param name="overwrite">Whether to overwrite existing files</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper">
            <summary>
            Helper class for file and folder operations, including loading, validation, and folder structure management.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.DMEEditor">
            <summary>
            Gets the editor instance for configuration and logging.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.Initialize(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes the FileOperationHelper with the required editor.
            </summary>
            <param name="editor">The editor instance for configuration and logging.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if already initialized.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.Reset">
            <summary>
            Resets the FileOperationHelper, clearing the editor.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.LoadFile(System.String)">
            <summary>
            Loads a single file from the provided file path and creates connection properties for it.
            </summary>
            <param name="filePath">The path of the file to load.</param>
            <returns>The connection properties for the loaded file, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.LoadFileAsync(System.String)">
            <summary>
            Asynchronously loads a single file from the provided file path and creates connection properties for it.
            </summary>
            <param name="filePath">The path of the file to load.</param>
            <returns>A task that returns the connection properties for the loaded file, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.LoadFiles(System.Collections.Generic.List{System.String})">
            <summary>
            Loads files from the provided list of file paths and creates connection properties for valid files.
            </summary>
            <param name="filenames">List of file paths to load.</param>
            <returns>A list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.LoadFilesAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Asynchronously loads files from the provided list of file paths and creates connection properties for valid files.
            </summary>
            <param name="filenames">List of file paths to load.</param>
            <returns>A task that returns a list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.LoadFiles(System.String[])">
            <summary>
            Loads connection properties for the specified file paths.
            </summary>
            <param name="filenames">Array of file paths to load.</param>
            <returns>A list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.LoadFilesAsync(System.String[])">
            <summary>
            Asynchronously loads connection properties for the specified file paths.
            </summary>
            <param name="filenames">Array of file paths to load.</param>
            <returns>A task that returns a list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.AddFile(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Adds a single file as a data connection if valid.
            </summary>
            <param name="file">The connection properties for the file.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.AddFileAsync(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Asynchronously adds a single file as a data connection if valid.
            </summary>
            <param name="file">The connection properties for the file.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.AddFiles(System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.ConnectionProperties})">
            <summary>
            Adds multiple files as data connections if valid.
            </summary>
            <param name="files">List of connection properties for the files.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.AddFilesAsync(System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.ConnectionProperties})">
            <summary>
            Asynchronously adds multiple files as data connections if valid.
            </summary>
            <param name="files">List of connection properties for the files.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.IsFileValid(System.String)">
            <summary>
            Checks if a file has a valid extension supported by the data drivers.
            </summary>
            <param name="filename">The name or path of the file to validate.</param>
            <returns>True if the file extension is supported, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.GetSupportedFileExtensions">
            <summary>
            Gets supported file extensions from the configuration.
            </summary>
            <returns>A list of supported file extensions.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.ValidateFilePath(System.String)">
            <summary>
            Validates a file path for existence, readability, and supported format.
            </summary>
            <param name="filePath">The file path to validate.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.CreateFolderStructure(System.String)">
            <summary>
            Creates a folder structure for the specified path, including files and subfolders.
            </summary>
            <param name="path">The folder path to process.</param>
            <returns>The created folder structure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileandFolderHelpers.FileOperationHelper.CreateFolderStructureAsync(System.String)">
            <summary>
            Asynchronously creates a folder structure for the specified path, including files and subfolders.
            </summary>
            <param name="path">The folder path to process.</param>
            <returns>A task that returns the created folder structure.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectCreationHelper">
            <summary>
            Helper class for project creation and management operations.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectCreationHelper.CreateProject(TheTechIdea.Beep.Editor.IDMEEditor,System.String,TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Creates a new project from the specified folder path.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="folderpath">The folder path for the new project.</param>
            <param name="folderType">The type of project folder (e.g., Files, Project).</param>
            <returns>A tuple containing error information and the created project folder, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectCreationHelper.CreateProjectAsync(TheTechIdea.Beep.Editor.IDMEEditor,System.String,TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Asynchronously creates a new project from the specified folder path.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="folderpath">The folder path for the new project.</param>
            <param name="folderType">The type of project folder (e.g., Files, Project).</param>
            <returns>A task that returns a tuple containing error information and the created project folder, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectCreationHelper.CreateProjectWithMetadata(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String,System.String,System.String,TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Creates a new project with custom configuration and metadata.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="folderpath">The folder path for the project.</param>
            <param name="description">The project description.</param>
            <param name="author">The project author.</param>
            <param name="version">The project version.</param>
            <param name="folderType">The type of project folder.</param>
            <returns>A tuple containing error information and the created project folder.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectCreationHelper.AddFolder(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Adds a folder as a project using the specified folder path.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="foldername">The path of the folder to add as a project.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectCreationHelper.AddFolderAsync(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Asynchronously adds a folder as a project using the specified folder path.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="foldername">The path of the folder to add as a project.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectLifecycleHelper">
            <summary>
            Helper class for project lifecycle management operations including removal, archiving, and validation.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectLifecycleHelper.RemoveProject(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Removes a project from the configuration.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project to remove.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectLifecycleHelper.ArchiveProject(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Archives a project by marking it as inactive.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project to archive.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectLifecycleHelper.ActivateProject(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Activates an archived project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project to activate.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectLifecycleHelper.DuplicateProject(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String)">
            <summary>
            Duplicates a project with a new name.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="sourceProjectName">The name of the project to duplicate.</param>
            <param name="newProjectName">The name for the new project.</param>
            <param name="newFolderPath">The folder path for the new project.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectLifecycleHelper.ValidateProjectPath(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Validates a project path for existence, write permissions, and valid files.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="path">The folder path to validate.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectLifecycleHelper.IsProjectNameUnique(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Validates that a project name is unique.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The project name to validate.</param>
            <returns>True if the name is unique, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectLifecycleHelper.RenameProject(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Renames a project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="oldProjectName">The current name of the project.</param>
            <param name="newProjectName">The new name for the project.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectLifecycleHelper.GetProjectStatistics(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Gets project statistics including file count, size, etc.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <returns>A dictionary containing project statistics.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectLifecycleHelper.ExportProjectMetadata(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Exports project metadata to a dictionary.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <returns>A dictionary containing project metadata.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper">
            <summary>
            Main facade for project and library management operations, delegating to specialized helper classes.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.DMEEditor">
            <summary>
            Gets the editor instance for configuration and logging.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.ProjectCreated">
            <summary>
            Event raised when a project is created.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.ProjectUpdated">
            <summary>
            Event raised when a project is updated.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.ProjectRemoved">
            <summary>
            Event raised when a project is removed.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.Initialize(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes the ProjectManagementHelper with the required editor.
            </summary>
            <param name="editor">The editor instance for configuration and logging.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if already initialized.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.Reset">
            <summary>
            Resets the ProjectManagementHelper, clearing the editor.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.AddFolder(System.String)">
            <summary>
            Adds a folder as a project using the specified folder path.
            </summary>
            <param name="foldername">The path of the folder to add as a project.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.AddFolderAsync(System.String)">
            <summary>
            Asynchronously adds a folder as a project using the specified folder path.
            </summary>
            <param name="foldername">The path of the folder to add as a project.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.CreateProject(System.String,TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Creates a new project from the specified folder path.
            </summary>
            <param name="folderpath">The folder path for the new project.</param>
            <param name="folderType">The type of project folder (e.g., Files, Project).</param>
            <returns>A tuple containing error information and the created project folder, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.CreateProjectAsync(System.String,TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Asynchronously creates a new project from the specified folder path.
            </summary>
            <param name="folderpath">The folder path for the new project.</param>
            <param name="folderType">The type of project folder (e.g., Files, Project).</param>
            <returns>A task that returns a tuple containing error information and the created project folder, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.CreateProjectWithMetadata(System.String,System.String,System.String,System.String,System.String,TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Creates a new project with custom configuration and metadata.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="folderpath">The folder path for the project.</param>
            <param name="description">The project description.</param>
            <param name="author">The project author.</param>
            <param name="version">The project version.</param>
            <param name="folderType">The type of project folder.</param>
            <returns>A tuple containing error information and the created project folder.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.GetProjects(TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Retrieves a list of projects filtered by folder type.
            </summary>
            <param name="folderType">The type of project folder to filter (e.g., Files, Project).</param>
            <returns>A list of projects matching the specified folder type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.GetAllProjects(System.Boolean)">
            <summary>
            Retrieves all projects, optionally filtered by active status.
            </summary>
            <param name="onlyActive">If true, returns only active projects.</param>
            <returns>A list of projects.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.GetProjectByName(System.String)">
            <summary>
            Gets a project by name.
            </summary>
            <param name="projectName">The name of the project to retrieve.</param>
            <returns>The project if found, otherwise null.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.GetProjectsByAuthor(System.String)">
            <summary>
            Gets projects by author.
            </summary>
            <param name="author">The author name to filter by.</param>
            <returns>A list of projects by the specified author.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.UpdateProjectMetadata(System.String,System.Action{TheTechIdea.Beep.FileManager.RootFolder})">
            <summary>
            Updates metadata for a specified project.
            </summary>
            <param name="projectName">The name of the project to update.</param>
            <param name="updateAction">The action to update the project's metadata.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.UpdateProjectDescription(System.String,System.String)">
            <summary>
            Updates the description of a project.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="description">The new description.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.UpdateProjectVersion(System.String,System.String)">
            <summary>
            Updates the version of a project.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="version">The new version.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.SetProjectActiveStatus(System.String,System.Boolean)">
            <summary>
            Sets the active status of a project.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="isActive">The active status to set.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.RefreshProject(System.String)">
            <summary>
            Refreshes the metadata for a specified project by re-scanning its folder for new files.
            </summary>
            <param name="projectName">The name of the project to refresh.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.RefreshProjectAsync(System.String)">
            <summary>
            Asynchronously refreshes the metadata for a specified project by re-scanning its folder for new files.
            </summary>
            <param name="projectName">The name of the project to refresh.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.SynchronizeAllProjects">
            <summary>
            Synchronizes all projects by refreshing their file listings.
            </summary>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.RemoveProject(System.String)">
            <summary>
            Removes a project from the configuration.
            </summary>
            <param name="projectName">The name of the project to remove.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.ArchiveProject(System.String)">
            <summary>
            Archives a project by marking it as inactive.
            </summary>
            <param name="projectName">The name of the project to archive.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.ActivateProject(System.String)">
            <summary>
            Activates an archived project.
            </summary>
            <param name="projectName">The name of the project to activate.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.DuplicateProject(System.String,System.String,System.String)">
            <summary>
            Duplicates a project with a new name.
            </summary>
            <param name="sourceProjectName">The name of the project to duplicate.</param>
            <param name="newProjectName">The name for the new project.</param>
            <param name="newFolderPath">The folder path for the new project.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.ValidateProjectPath(System.String)">
            <summary>
            Validates a project path for existence, write permissions, and valid files.
            </summary>
            <param name="path">The folder path to validate.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectManagementHelper.IsProjectNameUnique(System.String)">
            <summary>
            Validates that a project name is unique.
            </summary>
            <param name="projectName">The project name to validate.</param>
            <returns>True if the name is unique, false otherwise.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper">
            <summary>
            Helper class for project metadata management operations.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.UpdateProjectMetadata(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.Action{TheTechIdea.Beep.FileManager.RootFolder})">
            <summary>
            Updates metadata for a specified project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project to update.</param>
            <param name="updateAction">The action to update the project's metadata.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.UpdateProjectDescription(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Updates the description of a project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="description">The new description.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.UpdateProjectVersion(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Updates the version of a project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="version">The new version.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.UpdateProjectAuthor(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Updates the author of a project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="author">The new author.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.UpdateProjectTags(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Updates the tags of a project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="tags">The new tags.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.UpdateProjectIcon(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Updates the icon of a project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="icon">The new icon path or name.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.SetProjectActiveStatus(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.Boolean)">
            <summary>
            Sets the active status of a project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="isActive">The active status to set.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.SetProjectPrivateStatus(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.Boolean)">
            <summary>
            Sets the private status of a project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="isPrivate">The private status to set.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.UpdateProjectFolderType(TheTechIdea.Beep.Editor.IDMEEditor,System.String,TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Updates the folder type of a project.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="folderType">The new folder type.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.UpdateProjectProperties(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Updates multiple project properties in a single operation.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="description">The new description (optional).</param>
            <param name="version">The new version (optional).</param>
            <param name="author">The new author (optional).</param>
            <param name="tags">The new tags (optional).</param>
            <param name="icon">The new icon (optional).</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.AddProjectTag(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Adds a tag to a project's existing tags.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="tag">The tag to add.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectMetadataHelper.RemoveProjectTag(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Removes a tag from a project's existing tags.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project.</param>
            <param name="tag">The tag to remove.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectRetrievalHelper">
            <summary>
            Helper class for project retrieval and filtering operations.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectRetrievalHelper.GetProjects(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Retrieves a list of projects filtered by folder type.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="folderType">The type of project folder to filter (e.g., Files, Project).</param>
            <returns>A list of projects matching the specified folder type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectRetrievalHelper.GetAllProjects(TheTechIdea.Beep.Editor.IDMEEditor,System.Boolean)">
            <summary>
            Retrieves all projects, optionally filtered by active status.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="onlyActive">If true, returns only active projects.</param>
            <returns>A list of projects.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectRetrievalHelper.GetProjectByName(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Gets a project by name.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project to retrieve.</param>
            <returns>The project if found, otherwise null.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectRetrievalHelper.GetProjectsByAuthor(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Gets projects by author.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="author">The author name to filter by.</param>
            <returns>A list of projects by the specified author.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectRetrievalHelper.GetProjectsByVersion(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Gets projects by version.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="version">The version to filter by.</param>
            <returns>A list of projects with the specified version.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectRetrievalHelper.GetProjectsByTag(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Gets projects by tags.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="tag">The tag to filter by.</param>
            <returns>A list of projects containing the specified tag.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectRetrievalHelper.GetProjectsByDateRange(TheTechIdea.Beep.Editor.IDMEEditor,System.DateTime,System.DateTime)">
            <summary>
            Gets projects modified within a date range.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="startDate">The start date for the range.</param>
            <param name="endDate">The end date for the range.</param>
            <returns>A list of projects modified within the specified date range.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectRetrievalHelper.SearchProjectsByName(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Searches projects by name pattern.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="pattern">The search pattern (supports wildcards).</param>
            <returns>A list of projects matching the search pattern.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectSynchronizationHelper">
            <summary>
            Helper class for project refresh and synchronization operations.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectSynchronizationHelper.RefreshProject(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Refreshes the metadata for a specified project by re-scanning its folder for new files.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project to refresh.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectSynchronizationHelper.RefreshProjectAsync(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Asynchronously refreshes the metadata for a specified project by re-scanning its folder for new files.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project to refresh.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectSynchronizationHelper.SynchronizeAllProjects(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Synchronizes all projects by refreshing their file listings.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectSynchronizationHelper.SynchronizeAllProjectsAsync(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Asynchronously synchronizes all projects by refreshing their file listings.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectSynchronizationHelper.RebuildProjectStructure(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Rebuilds a project's folder structure from the file system.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project to rebuild.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ProjectandLibraryHelpers.ProjectSynchronizationHelper.RebuildProjectStructureAsync(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Asynchronously rebuilds a project's folder structure from the file system.
            </summary>
            <param name="dmeEditor">The DME Editor instance.</param>
            <param name="projectName">The name of the project to rebuild.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature">
            <summary>
            Defines the database features that can be supported by different data sources
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature.WindowFunctions">
            <summary>Window functions like ROW_NUMBER(), RANK(), etc.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature.Json">
            <summary>Native JSON data type and operations</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature.Xml">
            <summary>Native XML data type and operations</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature.TemporalTables">
            <summary>Temporal tables for time-based data tracking</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature.FullTextSearch">
            <summary>Full-text search capabilities</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature.Partitioning">
            <summary>Table partitioning support</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature.ColumnStore">
            <summary>Columnar storage format</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.TransactionOperation">
            <summary>
            Defines transaction operations that can be performed
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.TransactionOperation.Begin">
            <summary>Begin a new transaction</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.TransactionOperation.Commit">
            <summary>Commit the current transaction</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.TransactionOperation.Rollback">
            <summary>Rollback the current transaction</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper">
            <summary>
            Helper class for database feature detection, sequence operations, and transaction management.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.GenerateFetchNextSequenceValueQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates a query to fetch the next value from a sequence in a specific database.
            </summary>
            <param name="rdbms">The type of the database.</param>
            <param name="sequenceName">The name of the sequence.</param>
            <returns>A query string to fetch the next value from the specified sequence in the given database.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the sequence name is null or empty.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.GenerateFetchLastIdentityQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates a query to fetch the last inserted identity value based on the specified RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="sequenceName">The name of the sequence or generator (optional for some RDBMS).</param>
            <returns>A query string to fetch the last inserted identity value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.GetTransactionStatement(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.RDBMSHelpers.TransactionOperation)">
            <summary>
            Generates SQL statements for transaction operations
            </summary>
            <param name="databaseType">Database type</param>
            <param name="operation">Transaction operation (Begin, Commit, Rollback)</param>
            <returns>SQL statement for the transaction operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.SupportsFeature(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature)">
            <summary>
            Determines if the database type supports specific features
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="feature">Feature to check</param>
            <returns>True if the feature is supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.GetSupportedFeatures(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets all supported features for a given database type.
            </summary>
            <param name="dataSourceType">Database type to check</param>
            <returns>List of supported database features</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.SupportsSequences(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if a database supports sequences (auto-incrementing values).
            </summary>
            <param name="dataSourceType">Database type to check</param>
            <returns>True if sequences are supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.SupportsAutoIncrement(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if a database supports auto-increment/identity columns.
            </summary>
            <param name="dataSourceType">Database type to check</param>
            <returns>True if auto-increment is supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.GetMaxIdentifierLength(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets the maximum identifier length for a given database type.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Maximum identifier length in characters</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.SupportsStoredProcedures(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if a database type supports stored procedures.
            </summary>
            <param name="dataSourceType">Database type to check</param>
            <returns>True if stored procedures are supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.SupportsUserDefinedFunctions(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if a database type supports user-defined functions.
            </summary>
            <param name="dataSourceType">Database type to check</param>
            <returns>True if user-defined functions are supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.SupportsViews(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if a database type supports views.
            </summary>
            <param name="dataSourceType">Database type to check</param>
            <returns>True if views are supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeatureHelper.GetDatabaseInfo(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets database-specific information including version requirements for features.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Dictionary containing database information</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper">
            <summary>
            Helper class for generating SQL queries for creating tables, indexes, and other database objects.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.GenerateCreateTableSQL(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates SQL to create a table based on an EntityStructure.
            </summary>
            <param name="entity">The EntityStructure containing entity definition</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.GeneratePrimaryKeyQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates a SQL query to add a primary key to a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="primaryKey">The name of the primary key column.</param>
            <param name="type">The data type of the primary key column.</param>
            <returns>A SQL query to add a primary key to the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.GeneratePrimaryKeyFromEntity(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates SQL to add a primary key to a table based on its entity structure.
            </summary>
            <param name="entity">The entity structure containing table and primary key information.</param>
            <returns>A tuple containing the SQL statement, success flag, and error message (if any).</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.GenerateCreateIndexQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a query to create an index
            </summary>
            <param name="databaseType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="indexName">Name of the index</param>
            <param name="columns">Array of column names</param>
            <param name="options">Optional index creation options</param>
            <returns>SQL statement to create the index</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.GenerateUniqueIndexFromEntity(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates SQL to create a unique index on a table based on its entity structure.
            </summary>
            <param name="entity">The entity structure containing table and index information.</param>
            <returns>A tuple containing the SQL statement, success flag, and error message (if any).</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.GetDropEntity(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates SQL to drop an entity
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="entityName">Name of the entity to drop</param>
            <returns>SQL statement to drop the entity</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.GetTruncateTableQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to truncate a table
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table to truncate</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to truncate the table</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.GenerateCreateTableSQLInternal(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Internal method to generate CREATE TABLE SQL from EntityStructure.
            </summary>
            <param name="entity">The entity structure</param>
            <returns>CREATE TABLE SQL statement</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.GenerateColumnDefinition(TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Generates a column definition for CREATE TABLE statements.
            </summary>
            <param name="field">The entity field</param>
            <param name="databaseType">The target database type</param>
            <returns>Column definition string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.MapDataType(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Maps .NET data types to database-specific data types.
            </summary>
            <param name="fieldType">The .NET field type</param>
            <param name="databaseType">The target database type</param>
            <returns>Database-specific data type</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseObjectCreationHelper.GetIdentityClause(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets the identity clause SQL syntax for a specific database type
            </summary>
            <param name="databaseType">The database type</param>
            <returns>The identity clause syntax</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseQueryRepositoryHelper">
            <summary>
            Helper class for managing and accessing predefined SQL query repositories for different database types.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseQueryRepositoryHelper.GetQuery(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Utilities.Sqlcommandtype)">
            <summary>
            Gets a predefined query for the specified database type and query type.
            </summary>
            <param name="dataSourceType">The database type</param>
            <param name="queryType">The type of query needed</param>
            <returns>The SQL query string, or empty string if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseQueryRepositoryHelper.GetQueriesForDatabase(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets all available queries for a specific database type.
            </summary>
            <param name="dataSourceType">The database type</param>
            <returns>Dictionary of query types and their corresponding SQL</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseQueryRepositoryHelper.GetDatabasesForQueryType(TheTechIdea.Beep.Utilities.Sqlcommandtype)">
            <summary>
            Gets all database types that have queries for a specific query type.
            </summary>
            <param name="queryType">The query type</param>
            <returns>List of database types that support this query type</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseQueryRepositoryHelper.QueryExists(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Utilities.Sqlcommandtype)">
            <summary>
            Checks if a query exists for the specified database and query type combination.
            </summary>
            <param name="dataSourceType">The database type</param>
            <param name="queryType">The query type</param>
            <returns>True if the query exists</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseQueryRepositoryHelper.IsSqlStatementValid(System.String)">
            <summary>
            Checks if a given SQL statement is valid by looking for common SQL keywords.
            </summary>
            <param name="sqlString">The SQL statement to be validated.</param>
            <returns>True if the SQL statement is valid, false otherwise.</returns>
            <remarks>
            The method checks if the SQL statement contains any of the common SQL keywords such as SELECT, INSERT, UPDATE, DELETE, etc.
            It uses a regular expression pattern to match the keywords in a case-insensitive manner.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseQueryRepositoryHelper.CreateQuerySqlRepos">
            <summary>
            Creates a comprehensive list of QuerySqlRepo objects for different database types and operations.
            </summary>
            <returns>A list of QuerySqlRepo objects representing different query configurations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseQueryRepositoryHelper.GetQueryStatistics">
            <summary>
            Gets query statistics for analysis and debugging purposes.
            </summary>
            <returns>Dictionary with statistics about the query repository</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseQueryRepositoryHelper.ValidateAllQueries">
            <summary>
            Validates all queries in the repository for basic syntax issues.
            </summary>
            <returns>List of validation issues found</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseSchemaQueryHelper">
            <summary>
            Helper class for generating database schema and metadata queries for different RDBMS types.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseSchemaQueryHelper.GetSchemasorDatabases(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Gets the query for fetching schemas or databases that the specified user has access to.
            </summary>
            <param name="rdbms">The type of database system.</param>
            <param name="userName">The username to check privileges for (can be null for some database systems).</param>
            <returns>A SQL query string to retrieve accessible schemas or databases, or empty string if not supported.</returns>
            <remarks>
            This method generates system-specific queries to list schemas/databases based on the database type.
            For relational databases, it returns SQL queries that consider user permissions.
            For NoSQL and other database types, it returns appropriate commands or empty string if listing
            is not supported through standard queries.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseSchemaQueryHelper.GetSchemasorDatabasesSafe(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Boolean)">
            <summary>
            Gets the query for fetching schemas or databases with built-in error handling.
            </summary>
            <param name="rdbms">The type of database system.</param>
            <param name="userName">The username to check privileges for.</param>
            <param name="throwOnError">Whether to throw exceptions for errors (default: false).</param>
            <returns>A tuple containing the query string and a success indicator.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseSchemaQueryHelper.ValidateSchemaQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Validates a generated database schema query and provides error information.
            </summary>
            <param name="rdbms">Database type for the query</param>
            <param name="userName">Username used in the query</param>
            <param name="query">The generated query string (if already created)</param>
            <returns>A QueryValidationResult containing validation status and details</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseSchemaQueryHelper.GetTableExistsQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to check if a table exists
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table to check</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to check table existence</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseSchemaQueryHelper.GetColumnInfoQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to get column information for a table
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to get column information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseSchemaQueryHelper.IsValidDatabaseCommand(System.String)">
            <summary>
            Checks if a command is valid for database operations (SQL or database-specific commands).
            </summary>
            <param name="command">The command to validate.</param>
            <returns>True if the command appears valid, false otherwise.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryValidationResult">
            <summary>
            Result class for query validation containing error information.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryValidationResult.IsValid">
            <summary>
            Gets or sets a value indicating whether the query is valid.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryValidationResult.Query">
            <summary>
            Gets or sets the validated query string.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryValidationResult.ErrorMessage">
            <summary>
            Gets or sets the error message when validation fails.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryValidationResult.ErrorType">
            <summary>
            Gets or sets the type of error encountered.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryValidationResult.Suggestion">
            <summary>
            Gets or sets suggestion for resolving the error.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryValidationResult.Warnings">
            <summary>
            Gets the list of warnings that don't invalidate the query but should be considered.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryValidationResult.AddWarning(System.String)">
            <summary>
            Adds a warning to the validation result.
            </summary>
            <param name="warning">Warning message to add</param>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryErrorType">
            <summary>
            Defines the types of errors that can occur in query validation.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryErrorType.None">
            <summary>No error.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryErrorType.UnsupportedDatabase">
            <summary>The database type is not supported.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryErrorType.SyntaxError">
            <summary>The query contains syntax errors.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryErrorType.PermissionIssue">
            <summary>The operation requires permissions the user may not have.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryErrorType.SecurityRisk">
            <summary>The query contains potential security risks.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelpers.QueryErrorType.Other">
            <summary>Other error types.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLAdvancedQueryGenerator">
            <summary>
            Helper class for advanced query generation including JOINs, aggregations, and window functions.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLAdvancedQueryGenerator.GenerateSelectQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Generates a SELECT query with optional filtering, ordering, and paging.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="columns">Columns to select (null for all)</param>
            <param name="whereClause">Optional WHERE clause</param>
            <param name="orderBy">Optional ORDER BY clause</param>
            <param name="pageNumber">Optional page number (1-based)</param>
            <param name="pageSize">Optional page size</param>
            <returns>Generated SELECT query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLAdvancedQueryGenerator.GenerateJoinQuery(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.JoinSpecification)">
            <summary>
            Generates a complex JOIN query with multiple tables.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="joinSpec">Join specification containing tables and conditions</param>
            <returns>Generated JOIN query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLAdvancedQueryGenerator.GenerateAggregationQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Generates aggregation queries with GROUP BY and HAVING clauses.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="selectColumns">Columns to select (including aggregates)</param>
            <param name="groupByColumns">Columns to group by</param>
            <param name="havingClause">Optional HAVING clause</param>
            <param name="whereClause">Optional WHERE clause</param>
            <returns>Generated aggregation query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLAdvancedQueryGenerator.GenerateWindowFunctionQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.WindowFunctionSpec)">
            <summary>
            Generates window function queries for advanced analytics.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="windowSpec">Window function specification</param>
            <returns>Generated window function query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLAdvancedQueryGenerator.GenerateConditionalInsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates conditional INSERT (INSERT IF NOT EXISTS) for databases that support it.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="columns">Columns to insert</param>
            <param name="values">Values to insert</param>
            <param name="conflictColumns">Columns to check for conflicts</param>
            <returns>Conditional insert query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLAdvancedQueryGenerator.GenerateExistsQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates optimized EXISTS clause for better performance than IN.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="mainTable">Main table name</param>
            <param name="subqueryTable">Subquery table name</param>
            <param name="joinCondition">Join condition between tables</param>
            <returns>EXISTS clause query</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLBasicOperations">
            <summary>
            Helper class for basic DML operations (INSERT, UPDATE, DELETE) across different database types.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLBasicOperations.GenerateInsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a SQL query to insert data into a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="data">The data to insert, in key-value pair format.</param>
            <returns>A SQL query to insert the data into the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS or table name is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLBasicOperations.GenerateUpdateQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a SQL query to update data in a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="data">The data to update, in key-value pair format.</param>
            <param name="conditions">The conditions for the update, in key-value pair format.</param>
            <returns>A SQL query to update the data in the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS or table name is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLBasicOperations.GenerateDeleteQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a SQL query to delete data from a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="conditions">The conditions for the deletion, in key-value pair format.</param>
            <returns>A SQL query to delete the data from the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS or table name is not supported.</exception>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLBulkOperations">
            <summary>
            Helper class for bulk database operations with optimized performance.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLBulkOperations.GenerateBulkInsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Generates bulk insert SQL for multiple records with optimized performance.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="columns">Column names</param>
            <param name="batchSize">Number of records per batch (default: 1000)</param>
            <returns>Optimized bulk insert SQL</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLBulkOperations.GenerateUpsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates an UPSERT (INSERT or UPDATE) query for database-specific merge operations.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="keyColumns">Key columns for matching</param>
            <param name="updateColumns">Columns to update</param>
            <param name="insertColumns">Columns for insert</param>
            <returns>Database-specific UPSERT query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLBulkOperations.GenerateBulkDeleteQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.Int32)">
            <summary>
            Generates bulk delete query with IN clause optimization.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="keyColumn">Key column for deletion</param>
            <param name="batchSize">Number of IDs per batch</param>
            <returns>Optimized bulk delete query</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper">
            <summary>
            Main helper class for generating SQL DML (Data Manipulation Language) queries for different database types.
            This class serves as a facade that delegates to specialized helper classes.
            </summary>
            <summary>
            Partial class containing legacy methods for backward compatibility.
            These methods are marked as obsolete and delegate to the new specialized helper classes.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateInsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a SQL query to insert data into a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="data">The data to insert, in key-value pair format.</param>
            <returns>A SQL query to insert the data into the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS or table name is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateUpdateQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a SQL query to update data in a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="data">The data to update, in key-value pair format.</param>
            <param name="conditions">The conditions for the update, in key-value pair format.</param>
            <returns>A SQL query to update the data in the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS or table name is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateDeleteQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a SQL query to delete data from a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="conditions">The conditions for the deletion, in key-value pair format.</param>
            <returns>A SQL query to delete the data from the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS or table name is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateBulkInsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Generates bulk insert SQL for multiple records with optimized performance.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="columns">Column names</param>
            <param name="batchSize">Number of records per batch (default: 1000)</param>
            <returns>Optimized bulk insert SQL</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateUpsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates an UPSERT (INSERT or UPDATE) query for database-specific merge operations.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="keyColumns">Key columns for matching</param>
            <param name="updateColumns">Columns to update</param>
            <param name="insertColumns">Columns for insert</param>
            <returns>Database-specific UPSERT query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateBulkDeleteQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.Int32)">
            <summary>
            Generates bulk delete query with IN clause optimization.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="keyColumn">Key column for deletion</param>
            <param name="batchSize">Number of IDs per batch</param>
            <returns>Optimized bulk delete query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateSelectQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Generates a SELECT query with optional filtering, ordering, and paging.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="columns">Columns to select (null for all)</param>
            <param name="whereClause">Optional WHERE clause</param>
            <param name="orderBy">Optional ORDER BY clause</param>
            <param name="pageNumber">Optional page number (1-based)</param>
            <param name="pageSize">Optional page size</param>
            <returns>Generated SELECT query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateJoinQuery(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.JoinSpecification)">
            <summary>
            Generates a complex JOIN query with multiple tables.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="joinSpec">Join specification containing tables and conditions</param>
            <returns>Generated JOIN query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateAggregationQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Generates aggregation queries with GROUP BY and HAVING clauses.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="selectColumns">Columns to select (including aggregates)</param>
            <param name="groupByColumns">Columns to group by</param>
            <param name="havingClause">Optional HAVING clause</param>
            <param name="whereClause">Optional WHERE clause</param>
            <returns>Generated aggregation query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateWindowFunctionQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.WindowFunctionSpec)">
            <summary>
            Generates window function queries for advanced analytics.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="windowSpec">Window function specification</param>
            <returns>Generated window function query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateConditionalInsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates conditional INSERT (INSERT IF NOT EXISTS) for databases that support it.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="columns">Columns to insert</param>
            <param name="values">Values to insert</param>
            <param name="conflictColumns">Columns to check for conflicts</param>
            <returns>Conditional insert query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateExistsQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates optimized EXISTS clause for better performance than IN.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="mainTable">Main table name</param>
            <param name="subqueryTable">Subquery table name</param>
            <param name="joinCondition">Join condition between tables</param>
            <returns>EXISTS clause query</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateParameterizedInsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a parameterized INSERT query with proper parameter placeholders for each database type.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="columns">The column names for the insert.</param>
            <returns>A parameterized SQL INSERT query.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateParameterizedUpdateQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a parameterized UPDATE query with proper parameter placeholders for each database type.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="updateColumns">The columns to update.</param>
            <param name="whereColumns">The columns for the WHERE clause.</param>
            <returns>A parameterized SQL UPDATE query.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateParameterizedDeleteQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a parameterized DELETE query with proper parameter placeholders for each database type.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="whereColumns">The columns for the WHERE clause.</param>
            <returns>A parameterized SQL DELETE query.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GetPagingSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.Int32,System.Int32)">
            <summary>
            Gets the SQL syntax for paging results
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="pageNumber">Page number (1-based)</param>
            <param name="pageSize">Number of records per page</param>
            <returns>SQL paging syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GetRecordCountQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates SQL to get the count of records in a table
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <param name="whereClause">Optional WHERE clause</param>
            <returns>SQL statement to count records</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.SafeQuote(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Safely quotes a string value for SQL to prevent injection attacks.
            </summary>
            <param name="value">The value to quote</param>
            <param name="dataSourceType">The database type</param>
            <returns>Safely quoted string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateValuePlaceholders(System.Int32,System.Int32)">
            <summary>
            Generates value placeholders for parameterized queries.
            </summary>
            <param name="columnCount">Number of columns</param>
            <param name="batchSize">Number of records per batch</param>
            <returns>Placeholder string for values</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GenerateOracleInsertAll(System.String,System.String,System.Int32)">
            <summary>
            Generates Oracle-specific INSERT ALL syntax for bulk operations.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="columnList">Comma-separated column list</param>
            <param name="batchSize">Number of records to insert</param>
            <returns>Oracle INSERT ALL syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GetParameterPrefix(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets database-specific parameter prefix for parameterized queries.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Parameter prefix string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.IsValidTableName(System.String)">
            <summary>
            Validates table name to prevent SQL injection and ensure valid identifier format.
            </summary>
            <param name="tableName">Table name to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.IsValidColumnName(System.String)">
            <summary>
            Validates column name to prevent SQL injection and ensure valid identifier format.
            </summary>
            <param name="columnName">Column name to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GetIdentifierQuoteChar(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets the appropriate quote character for identifiers based on database type.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Quote character for identifiers</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.QuoteIdentifierIfNeeded(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Quotes an identifier if necessary based on database type and identifier content.
            </summary>
            <param name="identifier">The identifier to quote</param>
            <param name="dataSourceType">Database type</param>
            <returns>Quoted identifier if necessary</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GetAutoIncrementSyntax(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets database-specific syntax for auto-increment/identity columns.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Auto-increment syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLHelper.GetCurrentTimestampSyntax(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets database-specific syntax for current timestamp.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Current timestamp syntax</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLParameterizedQueries">
            <summary>
            Helper class for generating parameterized queries with proper parameter placeholders for each database type.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLParameterizedQueries.GenerateParameterizedInsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a parameterized INSERT query with proper parameter placeholders for each database type.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="columns">The column names for the insert.</param>
            <returns>A parameterized SQL INSERT query.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLParameterizedQueries.GenerateParameterizedUpdateQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a parameterized UPDATE query with proper parameter placeholders for each database type.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="updateColumns">The columns to update.</param>
            <param name="whereColumns">The columns for the WHERE clause.</param>
            <returns>A parameterized SQL UPDATE query.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLParameterizedQueries.GenerateParameterizedDeleteQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a parameterized DELETE query with proper parameter placeholders for each database type.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="whereColumns">The columns for the WHERE clause.</param>
            <returns>A parameterized SQL DELETE query.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers">
            <summary>
            Database-specific helper methods for generating SQL syntax and handling database-specific requirements.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GenerateValuePlaceholders(System.Int32,System.Int32)">
            <summary>
            Generates value placeholders for parameterized queries.
            </summary>
            <param name="columnCount">Number of columns</param>
            <param name="batchSize">Number of records per batch</param>
            <returns>Placeholder string for values</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GenerateOracleInsertAll(System.String,System.String,System.Int32)">
            <summary>
            Generates Oracle-specific INSERT ALL syntax for bulk operations.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="columnList">Comma-separated column list</param>
            <param name="batchSize">Number of records to insert</param>
            <returns>Oracle INSERT ALL syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GetParameterPrefix(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets database-specific parameter prefix for parameterized queries.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Parameter prefix string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GenerateParameterPlaceholder(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Generates database-specific parameter placeholder for a column.
            </summary>
            <param name="columnName">Name of the column</param>
            <param name="dataSourceType">Database type</param>
            <returns>Parameter placeholder string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GetAutoIncrementSyntax(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets database-specific syntax for auto-increment/identity columns.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Auto-increment syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GetCurrentTimestampSyntax(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets database-specific syntax for current timestamp.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Current timestamp syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GetConcatenationSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.String[])">
            <summary>
            Gets database-specific syntax for string concatenation.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="expressions">Expressions to concatenate</param>
            <returns>Concatenation syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GetCaseWhenSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Gets database-specific syntax for CASE WHEN expressions.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="whenClauses">Dictionary of condition -> result pairs</param>
            <param name="elseClause">Optional ELSE clause</param>
            <returns>CASE WHEN syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GetTopLimitSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.Int32)">
            <summary>
            Gets database-specific syntax for TOP/LIMIT clause.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="count">Number of records to limit</param>
            <returns>TOP/LIMIT syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GetDateFormatSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Gets database-specific syntax for date formatting.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="dateExpression">Date expression to format</param>
            <param name="format">Desired format</param>
            <returns>Date formatting syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLSpecificHelpers.GetNullHandlingSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Gets database-specific syntax for NULL handling.
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="expression">Expression to check</param>
            <param name="defaultValue">Default value if NULL</param>
            <returns>NULL handling syntax</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.JoinSpecification">
            <summary>
            Specification for JOIN operations
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.JoinClause">
            <summary>
            Individual JOIN clause specification
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.WindowFunctionSpec">
            <summary>
            Specification for window functions
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLUtilities">
            <summary>
            Utility methods for database operations including paging, counting, and value handling.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLUtilities.GetPagingSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.Int32,System.Int32)">
            <summary>
            Gets the SQL syntax for paging results
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="pageNumber">Page number (1-based)</param>
            <param name="pageSize">Number of records per page</param>
            <returns>SQL paging syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLUtilities.GetRecordCountQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates SQL to get the count of records in a table
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <param name="whereClause">Optional WHERE clause</param>
            <returns>SQL statement to count records</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLUtilities.SafeQuote(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Safely quotes a string value for SQL to prevent injection attacks.
            </summary>
            <param name="value">The value to quote</param>
            <param name="dataSourceType">The database type</param>
            <returns>Safely quoted string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLUtilities.IsValidTableName(System.String)">
            <summary>
            Validates table name to prevent SQL injection and ensure valid identifier format.
            </summary>
            <param name="tableName">Table name to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLUtilities.IsValidColumnName(System.String)">
            <summary>
            Validates column name to prevent SQL injection and ensure valid identifier format.
            </summary>
            <param name="columnName">Column name to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLUtilities.GetIdentifierQuoteChar(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets the appropriate quote character for identifiers based on database type.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Quote character for identifiers</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLUtilities.QuoteIdentifierIfNeeded(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Quotes an identifier if necessary based on database type and identifier content.
            </summary>
            <param name="identifier">The identifier to quote</param>
            <param name="dataSourceType">Database type</param>
            <returns>Quoted identifier if necessary</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers.DatabaseDMLUtilities.IsReservedKeyword(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if an identifier is a reserved keyword for basic SQL operations.
            </summary>
            <param name="identifier">The identifier to check</param>
            <param name="dataSourceType">Database type</param>
            <returns>True if it's a reserved keyword</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityAnalyzer">
            <summary>
            Helper class for analyzing and providing insights about entity structures.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityAnalyzer.GetEntityCompatibilityInfo(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Gets entity compatibility information for different database types.
            </summary>
            <param name="entity">The entity to analyze</param>
            <returns>Dictionary containing compatibility information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityAnalyzer.SuggestEntityImprovements(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Suggests improvements for an entity structure.
            </summary>
            <param name="entity">The entity to analyze</param>
            <returns>List of improvement suggestions</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityAnalyzer.GetEntityStatistics(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Gets statistics about the entity structure.
            </summary>
            <param name="entity">The entity to analyze</param>
            <returns>Dictionary containing entity statistics</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper">
            <summary>
            Main helper class for validating entity structures and generating operations on database entities.
            This class serves as a facade that delegates to specialized helper classes.
            </summary>
            <summary>
            Partial class containing legacy methods for backward compatibility.
            These methods are marked as obsolete and delegate to the new specialized helper classes.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.GenerateDeleteEntityWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to delete records from an entity with provided values.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.GenerateInsertWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to insert records into an entity with provided values.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing field values to insert</param>
            <returns>A tuple containing the SQL statement, parameters, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.GenerateUpdateEntityWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to update records in an entity with provided values and conditions.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing field values to update</param>
            <param name="conditions">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates an entity structure and returns errors if any.
            </summary>
            <param name="entity">The EntityStructure to validate</param>
            <returns>Tuple with validation result and error list</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.GetEntityCompatibilityInfo(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Gets entity compatibility information for different database types.
            </summary>
            <param name="entity">The entity to analyze</param>
            <returns>Dictionary containing compatibility information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.SuggestEntityImprovements(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Suggests improvements for an entity structure.
            </summary>
            <param name="entity">The entity to analyze</param>
            <returns>List of improvement suggestions</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.GetEntityStatistics(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Gets statistics about the entity structure.
            </summary>
            <param name="entity">The entity to analyze</param>
            <returns>Dictionary containing entity statistics</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.CreateBasicField(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a basic EntityField with common defaults.
            </summary>
            <param name="fieldName">Name of the field</param>
            <param name="fieldType">Type of the field</param>
            <param name="allowNull">Whether the field allows null values</param>
            <param name="isKey">Whether the field is a primary key</param>
            <returns>A new EntityField with the specified properties</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.ValidateEntityFields(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityField})">
            <summary>
            Validates entity fields for common issues.
            </summary>
            <param name="fields">List of entity fields to validate</param>
            <returns>List of validation errors</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.ValidateNamingConventions(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates naming conventions for entity and field names.
            </summary>
            <param name="entity">The entity to validate</param>
            <returns>List of naming convention errors</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.IsValidIdentifier(System.String)">
            <summary>
            Checks if a string is a valid database identifier.
            </summary>
            <param name="identifier">The identifier to check</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.IsNumericType(System.String)">
            <summary>
            Checks if a field type is numeric.
            </summary>
            <param name="fieldType">The field type to check</param>
            <returns>True if numeric, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.IsReservedKeyword(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if an identifier is a reserved keyword for the given database type.
            </summary>
            <param name="identifier">The identifier to check</param>
            <param name="databaseType">The database type</param>
            <returns>True if it's a reserved keyword</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.GetDefaultSizeForType(System.String)">
            <summary>
            Gets the default size for a field type.
            </summary>
            <param name="fieldType">The field type</param>
            <returns>Default size for the field type</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityHelper.GetFieldCategoryForType(System.String)">
            <summary>
            Gets the field category for a field type.
            </summary>
            <param name="fieldType">The field type</param>
            <returns>DbFieldCategory for the field type</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityNamingValidator">
            <summary>
            Helper class for validating naming conventions for entities and fields.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityNamingValidator.ValidateNamingConventions(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates naming conventions for entity and field names.
            </summary>
            <param name="entity">The entity to validate</param>
            <returns>List of naming convention errors</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityNamingValidator.IsValidIdentifier(System.String)">
            <summary>
            Checks if a string is a valid database identifier.
            </summary>
            <param name="identifier">The identifier to check</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityReservedKeywordChecker">
            <summary>
            Helper class for checking reserved keywords across different database types.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityReservedKeywordChecker.IsReservedKeyword(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if an identifier is a reserved keyword for the given database type.
            </summary>
            <param name="identifier">The identifier to check</param>
            <param name="databaseType">The database type</param>
            <returns>True if it's a reserved keyword</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityReservedKeywordChecker.GetCommonReservedKeywords">
            <summary>
            Gets common reserved keywords across most databases.
            </summary>
            <returns>HashSet of common reserved keywords</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityReservedKeywordChecker.IsSqlServerReservedKeyword(System.String)">
            <summary>
            Checks SQL Server specific reserved keywords.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityReservedKeywordChecker.IsMySqlReservedKeyword(System.String)">
            <summary>
            Checks MySQL specific reserved keywords.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityReservedKeywordChecker.IsPostgreSQLReservedKeyword(System.String)">
            <summary>
            Checks PostgreSQL specific reserved keywords.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityReservedKeywordChecker.IsOracleReservedKeyword(System.String)">
            <summary>
            Checks Oracle specific reserved keywords.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityReservedKeywordChecker.IsSQLiteReservedKeyword(System.String)">
            <summary>
            Checks SQLite specific reserved keywords.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntitySqlGenerator">
            <summary>
            Helper class for generating SQL operations on database entities.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntitySqlGenerator.GenerateDeleteEntityWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to delete records from an entity with provided values.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntitySqlGenerator.GenerateInsertWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to insert records into an entity with provided values.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing field values to insert</param>
            <returns>A tuple containing the SQL statement, parameters, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntitySqlGenerator.GenerateUpdateEntityWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to update records in an entity with provided values and conditions.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing field values to update</param>
            <param name="conditions">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityTypeHelper">
            <summary>
            Helper class for working with field types and creating basic entity fields.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityTypeHelper.IsNumericType(System.String)">
            <summary>
            Checks if a field type is numeric.
            </summary>
            <param name="fieldType">The field type to check</param>
            <returns>True if numeric, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityTypeHelper.CreateBasicField(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a basic EntityField with common defaults.
            </summary>
            <param name="fieldName">Name of the field</param>
            <param name="fieldType">Type of the field</param>
            <param name="allowNull">Whether the field allows null values</param>
            <param name="isKey">Whether the field is a primary key</param>
            <returns>A new EntityField with the specified properties</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityTypeHelper.GetDefaultSizeForType(System.String)">
            <summary>
            Gets the default size for a field type.
            </summary>
            <param name="fieldType">The field type</param>
            <returns>Default size for the field type</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityTypeHelper.GetFieldCategoryForType(System.String)">
            <summary>
            Gets the field category for a field type.
            </summary>
            <param name="fieldType">The field type</param>
            <returns>DbFieldCategory for the field type</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityValidator">
            <summary>
            Helper class for validating entity structures and fields.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityValidator.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates an entity structure and returns errors if any.
            </summary>
            <param name="entity">The EntityStructure to validate</param>
            <returns>Tuple with validation result and error list</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.EntityHelpers.DatabaseEntityValidator.ValidateEntityFields(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityField})">
            <summary>
            Validates entity fields for common issues.
            </summary>
            <param name="fields">List of entity fields to validate</param>
            <returns>List of validation errors</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper">
            <summary>
            Core facade helper class for interacting with Relational Database Management Systems (RDBMS).
            Delegates operations to specialized helper classes for better maintainability.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetSchemasorDatabases(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Gets the query for fetching schemas or databases that the specified user has access to.
            </summary>
            <param name="rdbms">The type of database system.</param>
            <param name="userName">The username to check privileges for (can be null for some database systems).</param>
            <returns>A SQL query string to retrieve accessible schemas or databases, or empty string if not supported.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetSchemasorDatabasesSafe(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Boolean)">
            <summary>
            Gets the query for fetching schemas or databases with built-in error handling.
            </summary>
            <param name="rdbms">The type of database system.</param>
            <param name="userName">The username to check privileges for.</param>
            <param name="throwOnError">Whether to throw exceptions for errors (default: false).</param>
            <returns>A tuple containing the query string and a success indicator.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.ValidateSchemaQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Validates a generated database schema query and provides error information.
            </summary>
            <param name="rdbms">Database type for the query</param>
            <param name="userName">Username used in the query</param>
            <param name="query">The generated query string (if already created)</param>
            <returns>A QueryValidationResult containing validation status and details</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetTableExistsQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to check if a table exists
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table to check</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to check table existence</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetColumnInfoQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to get column information for a table
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to get column information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateCreateTableSQL(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates SQL to create a table based on an EntityStructure.
            </summary>
            <param name="entity">The EntityStructure containing entity definition</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GeneratePrimaryKeyQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates a SQL query to add a primary key to a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="primaryKey">The name of the primary key column.</param>
            <param name="type">The data type of the primary key column.</param>
            <returns>A SQL query to add a primary key to the specified table in the specified RDBMS.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GeneratePrimaryKeyFromEntity(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates SQL to add a primary key to a table based on its entity structure.
            </summary>
            <param name="entity">The entity structure containing table and primary key information.</param>
            <returns>A tuple containing the SQL statement, success flag, and error message (if any).</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateCreateIndexQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a query to create an index
            </summary>
            <param name="databaseType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="indexName">Name of the index</param>
            <param name="columns">Array of column names</param>
            <param name="options">Optional index creation options</param>
            <returns>SQL statement to create the index</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateUniqueIndexFromEntity(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates SQL to create a unique index on a table based on its entity structure.
            </summary>
            <param name="entity">The entity structure containing table and index information.</param>
            <returns>A tuple containing the SQL statement, success flag, and error message (if any).</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetDropEntity(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates SQL to drop an entity
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="entityName">Name of the entity to drop</param>
            <returns>SQL statement to drop the entity</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetTruncateTableQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to truncate a table
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table to truncate</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to truncate the table</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateInsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a SQL query to insert data into a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="data">The data to insert, in key-value pair format.</param>
            <returns>A SQL query to insert the data into the specified table in the specified RDBMS.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateUpdateQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a SQL query to update data in a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="data">The data to update, in key-value pair format.</param>
            <param name="conditions">The conditions for the update, in key-value pair format.</param>
            <returns>A SQL query to update the data in the specified table in the specified RDBMS.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateDeleteQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a SQL query to delete data from a table in a specific RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="conditions">The conditions for the deletion, in key-value pair format.</param>
            <returns>A SQL query to delete the data from the specified table in the specified RDBMS.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetPagingSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.Int32,System.Int32)">
            <summary>
            Gets the SQL syntax for paging results
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="pageNumber">Page number (1-based)</param>
            <param name="pageSize">Number of records per page</param>
            <returns>SQL paging syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetRecordCountQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates SQL to get the count of records in a table
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <param name="whereClause">Optional WHERE clause</param>
            <returns>SQL statement to count records</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.SafeQuote(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Safely quotes a string value for SQL to prevent injection attacks.
            </summary>
            <param name="value">The value to quote</param>
            <param name="dataSourceType">The database type</param>
            <returns>Safely quoted string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateFetchNextSequenceValueQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates a query to fetch the next value from a sequence in a specific database.
            </summary>
            <param name="rdbms">The type of the database.</param>
            <param name="sequenceName">The name of the sequence.</param>
            <returns>A query string to fetch the next value from the specified sequence in the given database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateFetchLastIdentityQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates a query to fetch the last inserted identity value based on the specified RDBMS.
            </summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="sequenceName">The name of the sequence or generator (optional for some RDBMS).</param>
            <returns>A query string to fetch the last inserted identity value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetTransactionStatement(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.RDBMSHelpers.TransactionOperation)">
            <summary>
            Generates SQL statements for transaction operations
            </summary>
            <param name="databaseType">Database type</param>
            <param name="operation">Transaction operation (Begin, Commit, Rollback)</param>
            <returns>SQL statement for the transaction operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.SupportsFeature(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.RDBMSHelpers.DatabaseFeature)">
            <summary>
            Determines if the database type supports specific features
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="feature">Feature to check</param>
            <returns>True if the feature is supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetSupportedFeatures(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets all supported features for a given database type.
            </summary>
            <param name="dataSourceType">Database type to check</param>
            <returns>List of supported database features</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.SupportsSequences(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if a database supports sequences (auto-incrementing values).
            </summary>
            <param name="dataSourceType">Database type to check</param>
            <returns>True if sequences are supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.SupportsAutoIncrement(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if a database supports auto-increment/identity columns.
            </summary>
            <param name="dataSourceType">Database type to check</param>
            <returns>True if auto-increment is supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetMaxIdentifierLength(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets the maximum identifier length for a given database type.
            </summary>
            <param name="dataSourceType">Database type</param>
            <returns>Maximum identifier length in characters</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.CreateQuerySqlRepos">
            <summary>
            Creates a comprehensive list of QuerySqlRepo objects for different database types and operations.
            </summary>
            <returns>A list of QuerySqlRepo objects representing different query configurations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetQuery(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Utilities.Sqlcommandtype)">
            <summary>
            Gets a predefined query for the specified database type and query type.
            </summary>
            <param name="dataSourceType">The database type</param>
            <param name="queryType">The type of query needed</param>
            <returns>The SQL query string, or empty string if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.IsSqlStatementValid(System.String)">
            <summary>
            Checks if a given SQL statement is valid by looking for common SQL keywords.
            </summary>
            <param name="sqlString">The SQL statement to be validated.</param>
            <returns>True if the SQL statement is valid, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateDeleteEntityWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to delete records from an entity with provided values.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateInsertWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to insert records into an entity with provided values.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing field values to insert</param>
            <returns>A tuple containing the SQL statement, parameters, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GenerateUpdateEntityWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to update records in an entity with provided values and conditions.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing field values to update</param>
            <param name="conditions">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates an entity structure and returns errors if any.
            </summary>
            <param name="entity">The EntityStructure to validate</param>
            <returns>Tuple with validation result and error list</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.GetEntityCompatibilityInfo(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Gets entity compatibility information for different database types.
            </summary>
            <param name="entity">The entity to analyze</param>
            <returns>Dictionary containing compatibility information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelpers.RDBMSHelper.SuggestEntityImprovements(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Suggests improvements for an entity structure.
            </summary>
            <param name="entity">The entity to analyze</param>
            <returns>List of improvement suggestions</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToList(System.String)">
            <summary>
            Converts a string to a list of strings, splitting by commas.
            </summary>
            <param name="input">The input string.</param>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts a snake_case string to PascalCase
            </summary>
            <param name="str">The snake_case string to convert</param>
            <returns>The string in PascalCase format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts a string to camelCase
            </summary>
            <param name="str">The string to convert</param>
            <returns>The string in camelCase format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToSnakeCase(System.String)">
            <summary>
            Converts a PascalCase or camelCase string to snake_case
            </summary>
            <param name="str">The string to convert</param>
            <returns>The string in snake_case format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToKebabCase(System.String)">
            <summary>
            Converts a PascalCase or camelCase string to kebab-case
            </summary>
            <param name="str">The string to convert</param>
            <returns>The string in kebab-case format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.Truncate(System.String,System.Int32,System.Boolean)">
            <summary>
            Truncates a string to the specified maximum length
            </summary>
            <param name="str">The string to truncate</param>
            <param name="maxLength">Maximum length</param>
            <param name="appendEllipsis">Whether to append "..." if truncated</param>
            <returns>The truncated string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Removes diacritics (accents) from a string
            </summary>
            <param name="text">The string to normalize</param>
            <returns>String without diacritics</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidEmail(System.String)">
            <summary>
            Checks if a string is a valid email address
            </summary>
            <param name="email">String to validate</param>
            <returns>True if valid email format, otherwise false</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsNumeric(System.String)">
            <summary>
            Checks if a string contains only numeric characters
            </summary>
            <param name="str">The string to check</param>
            <returns>True if string contains only numbers</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidDate(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Checks if a string is a valid date according to the specified format
            </summary>
            <param name="dateString">The date string to validate</param>
            <param name="format">The expected date format (null for culture default)</param>
            <param name="culture">The culture to use (null for current culture)</param>
            <returns>True if valid date, otherwise false</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ExtractNumbers(System.String)">
            <summary>
            Extracts all numeric digits from a string
            </summary>
            <param name="str">The input string</param>
            <returns>A string containing only the numeric digits</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.Capitalize(System.String)">
            <summary>
            Converts first character of the string to uppercase
            </summary>
            <param name="str">The string to capitalize</param>
            <returns>String with first letter capitalized</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.SplitCamelCase(System.String)">
            <summary>
            Splits a string by capital letters (useful for breaking apart identifiers)
            </summary>
            <param name="str">The string to split</param>
            <returns>A string with spaces before capital letters</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidJson(System.String)">
            <summary>
            Checks if a string is valid JSON
            </summary>
            <param name="strInput">String to check</param>
            <returns>True if valid JSON, otherwise false</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToList(System.String,System.Char)">
            <summary>
            Converts a delimited string to a list of strings
            </summary>
            <param name="input">The delimited string</param>
            <param name="delimiter">The delimiter character</param>
            <returns>A list of strings</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ContainsAny(System.String,System.String[])">
            <summary>
            Checks if a string contains any of the specified substrings
            </summary>
            <param name="str">The string to check</param>
            <param name="values">The substrings to look for</param>
            <returns>True if string contains any of the specified substrings</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ContainsAll(System.String,System.String[])">
            <summary>
            Checks if a string contains all the specified substrings
            </summary>
            <param name="str">The string to check</param>
            <param name="values">The substrings to look for</param>
            <returns>True if string contains all the specified substrings</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.DefaultIfEmpty(System.String,System.String)">
            <summary>
            Returns the string or a default value if the string is null or empty
            </summary>
            <param name="str">The string to check</param>
            <param name="defaultValue">The default value to return if string is null or empty</param>
            <returns>The original string or the default value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidFilePath(System.String)">
            <summary>
            Checks if a string is a valid file path
            </summary>
            <param name="path">The path to validate</param>
            <returns>True if valid file path, otherwise false</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.Between(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Extracts a substring between two specified strings
            </summary>
            <param name="source">The source string</param>
            <param name="start">The starting string</param>
            <param name="end">The ending string</param>
            <param name="includeStartEnd">Whether to include the start and end strings</param>
            <returns>The extracted substring or empty if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses a string
            </summary>
            <param name="str">The string to reverse</param>
            <returns>The reversed string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.EscapeSql(System.String,System.Char)">
            <summary>
            Properly escapes a string for SQL to prevent SQL injection
            </summary>
            <param name="str">String to be escaped</param>
            <param name="quoteChar">Quote character (default is single quote)</param>
            <returns>SQL-safe string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToSqlInClause(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a delimited SQL string (IN clause) from a list of strings
            </summary>
            <param name="values">Collection of string values</param>
            <returns>Delimited string for SQL IN clause</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToSqlIdentifier(System.String)">
            <summary>
            Convert a string to a valid SQL identifier by removing invalid characters
            </summary>
            <param name="str">String to convert</param>
            <returns>Valid SQL identifier</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.FormatAsPhoneNumber(System.String)">
            <summary>
            Format a string as a phone number
            </summary>
            <param name="phoneNumber">String to format</param>
            <returns>Formatted phone number</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.FormatAsSSN(System.String)">
            <summary>
            Format a string as a social security number (XXX-XX-XXXX)
            </summary>
            <param name="ssn">String to format as SSN</param>
            <returns>Formatted SSN</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.FormatAsCreditCard(System.String,System.Char)">
            <summary>
            Format a credit card number with dashes and mask middle digits
            </summary>
            <param name="cardNumber">Card number to format</param>
            <param name="maskChar">Character to use for masking (default '*')</param>
            <returns>Masked credit card number</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidUrl(System.String)">
            <summary>
            Checks if a string is a valid URL
            </summary>
            <param name="url">URL to validate</param>
            <returns>True if valid URL</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsGuid(System.String)">
            <summary>
            Validates if a string follows the GUID format
            </summary>
            <param name="str">The string to check</param>
            <returns>True if the string is a valid GUID format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsAlphaOnly(System.String)">
            <summary>
            Checks if a string contains only letters (no numbers or special characters)
            </summary>
            <param name="str">String to check</param>
            <returns>True if contains only letters</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidIpAddress(System.String)">
            <summary>
            Checks if a string is a valid IPv4 or IPv6 address
            </summary>
            <param name="ipAddress">String to validate</param>
            <returns>True if valid IP address</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidCreditCardNumber(System.String)">
            <summary>
            Checks if a string is a valid credit card number (using Luhn algorithm)
            </summary>
            <param name="cardNumber">Card number to validate</param>
            <returns>True if valid credit card number</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToEnum``1(System.String,System.Boolean,``0)">
            <summary>
            Tries to parse a string to a specific enum type
            </summary>
            <typeparam name="TEnum">Type of enum</typeparam>
            <param name="value">String value to parse</param>
            <param name="ignoreCase">Whether to ignore case</param>
            <param name="defaultValue">Default value if parsing fails</param>
            <returns>Parsed enum value or default</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.FromBase64(System.String)">
            <summary>
            Converts a base64 string to bytes
            </summary>
            <param name="base64String">Base64 encoded string</param>
            <returns>Decoded byte array or null if invalid</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts a string to bytes using the specified encoding
            </summary>
            <param name="str">String to convert</param>
            <param name="encoding">Text encoding to use (default UTF8)</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToDateTime(System.String,System.String,System.DateTime,System.IFormatProvider)">
            <summary>
            Attempts to convert a string to a DateTime with specified format and culture
            </summary>
            <param name="dateString">Date string to parse</param>
            <param name="format">Format specifier</param>
            <param name="defaultValue">Default value if parsing fails</param>
            <param name="provider">Format provider (culture)</param>
            <returns>Parsed DateTime or default</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToMD5Hash(System.String)">
            <summary>
            Computes MD5 hash of a string (for checksums, not for passwords)
            </summary>
            <param name="input">Input string</param>
            <returns>MD5 hash as a hex string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToSHA256Hash(System.String)">
            <summary>
            Computes SHA256 hash of a string
            </summary>
            <param name="input">Input string</param>
            <returns>SHA256 hash as a hex string</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ValidationResult">
            <summary>
            Result of a validation operation containing success status and any error messages.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.ValidationResult.IsValid">
            <summary>
            Gets or sets whether the validation was successful.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.ValidationResult.Errors">
            <summary>
            Gets or sets the list of validation error messages.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.ValidationResult.Warnings">
            <summary>
            Gets or sets the list of validation warning messages.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of ValidationResult.
            </summary>
            <param name="isValid">Initial validation state</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationResult.AddError(System.String)">
            <summary>
            Adds an error message and sets IsValid to false.
            </summary>
            <param name="error">Error message to add</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationResult.AddWarning(System.String)">
            <summary>
            Adds a warning message.
            </summary>
            <param name="warning">Warning message to add</param>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationResult.Success">
            <summary>
            Creates a successful validation result.
            </summary>
            <returns>Successful validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationResult.Failure(System.String)">
            <summary>
            Creates a failed validation result with an error message.
            </summary>
            <param name="error">Error message</param>
            <returns>Failed validation result</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.ValidationHelper">
            <summary>
            Helper class providing comprehensive validation capabilities for data management operations.
            Includes validation for connection properties, data source names, entity structures, and more.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationHelper.ValidateConnectionProperties(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Validates connection properties for completeness and correctness.
            </summary>
            <param name="properties">Connection properties to validate</param>
            <returns>Validation result with any errors or warnings</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationHelper.ValidateDataSourceName(System.String)">
            <summary>
            Validates a data source name for correctness and uniqueness constraints.
            </summary>
            <param name="name">Data source name to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationHelper.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates an entity structure for completeness and data integrity.
            </summary>
            <param name="entity">Entity structure to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationHelper.ValidateConnectionAsync(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Validates a connection asynchronously by attempting to establish connectivity.
            </summary>
            <param name="properties">Connection properties to validate</param>
            <returns>Async validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationHelper.IsValidGuid(System.String)">
            <summary>
            Validates if a string is a valid GUID format.
            </summary>
            <param name="guidString">String to validate as GUID</param>
            <returns>True if valid GUID format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationHelper.IsValidConnectionString(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Validates a connection string for a specific database type.
            </summary>
            <param name="connectionString">Connection string to validate</param>
            <param name="dbType">Database type for validation context</param>
            <returns>True if connection string appears valid</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationHelper.IsValidName(System.String)">
            <summary>
            Validates if a name follows valid naming conventions.
            </summary>
            <param name="name">Name to validate</param>
            <returns>True if name is valid</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ValidationHelper.ValidateBatchConnections(System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.ConnectionProperties})">
            <summary>
            Validates batch connection properties.
            </summary>
            <param name="connections">List of connection properties to validate</param>
            <returns>Dictionary of validation results by connection name</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.GenerateVectorDatabaseCommand(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.VectorDatabaseHelper.VectorDatabaseOperation,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates vector database-specific query commands based on database type
            </summary>
            <param name="dataSourceType">Vector database type</param>
            <param name="operationType">Operation to perform (search, insert, delete)</param>
            <param name="parameters">Dictionary of parameters specific to the operation</param>
            <returns>A command string for the specified vector database operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.IsVectorDatabase(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if a given data source type is a vector database
            </summary>
            <param name="dataSourceType">The data source type to check</param>
            <returns>True if the data source is a vector database, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.GetVectorDatabaseCollections(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Generates metadata queries for vector databases to list collections or schemas
            </summary>
            <param name="dataSourceType">Vector database type</param>
            <returns>A query string to list collections/tables in the vector database</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.GenerateVectorSimilaritySearchQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Int32,System.Int32)">
            <summary>
            Generates a vector similarity search query for the specified database
            </summary>
            <param name="dataSourceType">Vector database type</param>
            <param name="collectionName">Name of the collection to search</param>
            <param name="vectorDimension">Dimension of the vector</param>
            <param name="topK">Number of results to return</param>
            <returns>A similarity search query template for the specified vector database</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.CreateVectorDatabaseQueries">
            <summary>
            Creates a list of QuerySqlRepo objects for vector databases.
            </summary>
            <returns>A list of QuerySqlRepo objects for vector databases.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.VectorDatabaseOperation">
            <summary>
            Operations that can be performed on vector databases
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.ValidateVectorDatabaseParameters(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.VectorDatabaseHelper.VectorDatabaseOperation,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Validates parameters for vector database operations
            </summary>
            <param name="dataSourceType">Vector database type</param>
            <param name="operation">Operation to perform</param>
            <param name="parameters">Parameters for the operation</param>
            <returns>Tuple with validation result and error message</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Json.JsonDataSource">
            <summary>
            JsonDataSource provides CRUD operations on a JSON file acting as a data source.
            It implements IDataSource and manages entities derived from JSON objects/arrays.
            This class supports reading, writing, updating, and deleting JSON objects from a file,
            and includes the ability to generate EntityStructures dynamically.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.#ctor(System.String,TheTechIdea.Beep.Logger.IDMLogger,TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.ConfigUtil.IErrorsInfo)">
            <summary>
            Constructor initializing JsonDataSource with a specified data source name, logger, editor, and datasource type.
            It attempts to load the JSON file associated with the connection specified in the DMEEditor.ConfigEditor.
            </summary>
            <param name="datasourcename">Name of the data source</param>
            <param name="logger">Logger implementation</param>
            <param name="pDMEEditor">Editor reference</param>
            <param name="databasetype">Type of the data source</param>
            <param name="per">Error object to accumulate errors</param>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.ColumnDelimiter">
            <summary>
            Delimiter used to separate columns if needed.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.ParameterDelimiter">
            <summary>
            Delimiter used to separate parameters if needed.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.GuidID">
            <summary>
            GUID of the data source instance.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.DatasourceType">
            <summary>
            Type of the data source (e.g., Json).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.Category">
            <summary>
            Category of the data source (e.g., FILE).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.Dataconnection">
            <summary>
            Data connection used to manage file paths and properties.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.DatasourceName">
            <summary>
            Name of the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.ErrorObject">
            <summary>
            Error object instance used to store and report errors.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.Id">
            <summary>
            Identifier for this data source instance.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.Logger">
            <summary>
            Logger instance for logging operations.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.EntitiesNames">
            <summary>
            List of entity names recognized by this data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.Entities">
            <summary>
            List of entity structures representing schema-like information for each entity.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.DMEEditor">
            <summary>
            Reference to the main editor instance.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.ConnectionStatus">
            <summary>
            Current connection state of the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.FileName">
            <summary>
            Path to the JSON file managed by this data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.ObjectsCreated">
            <summary>
            Indicates whether objects (structures, types) have been created.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.DataStruct">
            <summary>
            Holds the current entity structure being operated on.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.Json.JsonDataSource.PassEvent">
            <summary>
            Event triggered to pass arguments between components.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.BeginTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Begin a database transaction. Not implemented for JSON.
            </summary>
            <param name="args">Passed arguments</param>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.Commit(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Commit a database transaction. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.EndTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Ends a database transaction. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.ExecuteSql(System.String)">
            <summary>
            Executes a SQL query against the data source. Not applicable for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.RunScript(TheTechIdea.Beep.Editor.ETLScriptDet)">
            <summary>
            Runs a provided script (DML/DDL). Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.Openconnection">
            <summary>
            Opens a connection to the JSON file by reading and parsing it.
            Returns the resulting state.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.Closeconnection">
            <summary>
            Closes the connection to the JSON file and ensures that any changes are saved.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.CheckEntityExist(System.String)">
            <summary>
            Checks if an entity with the specified name exists in the data source.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.CreateEntities(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>
            Creates multiple entities as specified by a list of EntityStructure objects.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.CreateEntityAs(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Creates a single entity based on the provided EntityStructure.
            Note: This implementation assumes a root JSON array and adds a new JSON object for the entity schema.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.DeleteEntity(System.String,System.Object)">
            <summary>
            Deletes an entity (or an item within it) matching certain criteria.
            Currently, the method is a placeholder. You need to provide a 'MatchesCriteria' extension or logic.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetCreateEntityScript(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>
            Returns a list of scripts to create entities, if applicable. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntitesList">
            <summary>
            Returns a list of entity names managed by this data source.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Retrieves entity data as objects. Each object is constructed dynamically from the JSON array.
            </summary>
            <param name="entityName">Name of the entity to retrieve</param>
            <param name="filter">Filter criteria (not fully implemented)</param>
            <returns>Collection of objects representing the entity data</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter},System.Int32,System.Int32)">
            <summary>
            Retrieves a paginated subset of the entity data.
            This version returns dynamic objects (ExpandoObjects).
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityAsync(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Asynchronously retrieves entity data. Uses GetEntity internally.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityforeignkeys(System.String,System.String)">
            <summary>
            Returns foreign keys for an entity. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityIdx(System.String)">
            <summary>
            Returns the index of a given entity in the Entities list.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityStructure(System.String,System.Boolean)">
            <summary>
            Retrieves the EntityStructure for a given entity name.
            If refresh is true, it may re-parse the entity structure.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure,System.Boolean)">
            <summary>
            Overload that retrieves the EntityStructure from an existing structure object.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityType(System.String)">
            <summary>
            Dynamically constructs a .NET Type for the given entity based on its fields.
            Uses DMTypeBuilder utility.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetScalar(System.String)">
            <summary>
            Retrieves a scalar value from the data source. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetScalarAsync(System.String)">
            <summary>
            Asynchronously retrieves a scalar value. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.RunQuery(System.String)">
            <summary>
            Runs a given query against the JSON data using JSONPath-like syntax.
            Attempts to match entity structure and return a list of objects.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.UpdateEntities(System.String,System.Object,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Updates multiple entities at once by replacing the root JSON array content.
            Expects UploadData to be a JArray that replaces the entire root array.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.UpdateEntity(System.String,System.Object)">
            <summary>
            Updates a single entity by locating it (e.g., via an '_id') and replacing fields from UploadDataRow.
            Expects UploadDataRow to be a JObject containing updated fields.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.InsertEntity(System.String,System.Object)">
            <summary>
            Inserts a new entity/object into the JSON array.
            Expects InsertedData to be an object (e.g., JObject) that can be converted to JToken.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.Dispose(System.Boolean)">
            <summary>
            Dispose pattern implementation to clean up resources.
            </summary>
            <param name="disposing">True if managed resources should be disposed.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.Dispose">
            <summary>
            Public Dispose method to clean up resources.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.SaveJson(System.String)">
            <summary>
            Writes the current _rootJsonArray to the file with indentation.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.ReadJson(System.String)">
            <summary>
            Reads the JSON content from the specified file and initializes internal structures.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.ParseJsonObject(Newtonsoft.Json.Linq.JObject,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Parses a JSON object as if it's the first record in an array.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.ParseJsonArray(Newtonsoft.Json.Linq.JArray,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Parses a JSON array to create an EntityStructure and discover fields.
            Expects uniform objects or at least compatible structures.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.InitializeRootJsonObject">
            <summary>
            Initializes _rootJsonObject by reading and parsing the file at FileName.
            If file does not exist or is empty, initializes an empty JArray.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetRootJsonArray">
            <summary>
            Returns the root JSON array if available. If not, returns null.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.CreateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Constructs an EntityStructure with given name and path.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.CreateEntityField(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Creates an EntityField from a JSON property, determining field type dynamically.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.UpdateEntityStructureWithMissingFields(Newtonsoft.Json.Linq.JObject,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Ensures that any fields present in the given JObject but not defined in the EntityStructure are added.
            This keeps the entity schema consistent with the data.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.SetObjects(System.String)">
            <summary>
            Prepares objects for operations on a specified entity if not done or if a different entity is requested.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.SynchronizeEntityStructure">
            <summary>
            Synchronizes the JSON data with the current EntityStructure.
            Adds missing fields and removes fields not present in the EntityStructure.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.ValidateSchema">
            <summary>
            Validates that the JSON schema matches the current EntityStructure.
            Logs discrepancies for missing or extra fields.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.HandleSchemaChanges">
            <summary>
            Handles schema changes dynamically, including adding and removing fields.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetChildTablesList(System.String,System.String,System.String)">
            <summary>
            Returns a list of child relations for a given table. Not implemented for JSON.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Rules.BuiltinRules.GetRecordCount.RuleText">
            <summary>
            The textual expression that defines the rule's logic.
            For example:Rule Test Should be 
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Rules.BuiltinRules.GetSystemDate.RuleText">
            <summary>
            The textual expression that defines the rule's logic.
            For example: ":Entity1.LastName == 'Smith'" or other valid expressions.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.ClassCreator">
            <summary>
            Partial class for documentation, utilities, and advanced features
            </summary>
            <summary>
            Enhanced ClassCreator with modular architecture using partial classes and helper pattern.
            Provides comprehensive class generation capabilities with separation of concerns.
            </summary>
            <summary>
            Partial class for database-related class generation functionality
            </summary>
            <summary>
            Partial class for DLL creation and compilation functionality
            </summary>
            <summary>
            Partial class for testing and validation functionality
            </summary>
            <summary>
            Partial class for Web API generation functionality
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.DocumentationGenerator">
            <summary>Gets the documentation generator helper (lazy-loaded)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.UiComponentGenerator">
            <summary>Gets the UI component generator helper (lazy-loaded)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.ServerlessGenerator">
            <summary>Gets the serverless generator helper (lazy-loaded)</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateEntityDocumentation(TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Generates XML documentation from entity structure
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateEntityDiffReport(TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates a difference report between two versions of an entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateGraphQLSchema(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String)">
            <summary>
            Generates GraphQL type definitions from entity structures
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateBlazorComponent(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates Blazor component for displaying and editing entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateGrpcService(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates gRPC service definitions for entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.ValidateEntityForAdvancedGeneration(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates an entity structure before advanced generation
            </summary>
            <param name="entity">The entity to validate</param>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.outputFileName">
            <summary>Gets or sets the output file name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.outputpath">
            <summary>Gets or sets the output path</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.DMEEditor">
            <summary>Gets or sets the DME Editor instance</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.PocoGenerator">
            <summary>Gets the POCO class generator helper</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.ModernGenerator">
            <summary>Gets the modern class generator helper</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.GenerationHelper">
            <summary>Gets the class generation helper utilities</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes a new instance of the ClassCreator with dependency injection
            </summary>
            <param name="dmeEditor">The DME Editor instance</param>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CompileClassFromText(System.String,System.String)">
            <summary>
            Compiles a class from text using Roslyn compiler
            </summary>
            <param name="sourceString">The source code string</param>
            <param name="output">The output file path</param>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateCSharpCode(System.String)">
            <summary>
            Generates C# code from a file
            </summary>
            <param name="fileName">The file name to generate code from</param>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateAssemblyFromCode(System.String)">
            <summary>
            Creates an assembly from source code
            </summary>
            <param name="code">The source code</param>
            <returns>The compiled assembly</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateTypeFromCode(System.String,System.String)">
            <summary>
            Creates a type from source code
            </summary>
            <param name="code">The source code</param>
            <param name="outputTypeName">The name of the output type</param>
            <returns>The created type</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateClass(System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityField},System.String,System.String,System.Boolean)">
            <summary>
            Creates a class from entity field list (legacy method)
            </summary>
            <param name="classname">The class name</param>
            <param name="flds">The entity fields</param>
            <param name="outputPath">The output path</param>
            <param name="nameSpacestring">The namespace</param>
            <param name="generateCSharpCodeFiles">Whether to generate files</param>
            <returns>The generated class code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Creates a class from entity structure (legacy method)
            </summary>
            <param name="classname">The class name</param>
            <param name="entity">The entity structure</param>
            <param name="outputPath">The output path</param>
            <param name="nameSpacestring">The namespace</param>
            <param name="generateCSharpCodeFiles">Whether to generate files</param>
            <returns>The generated class code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreatePOCOClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a POCO class using the helper
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateINotifyClass(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a class with INotifyPropertyChanged implementation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreatEntityClass(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an Entity class that inherits from Entity base class (legacy interface method)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateEntityClass(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an Entity class that inherits from Entity base class (modern method)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateClassFromTemplate(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a class from a template with field substitution
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateRecordClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Creates a modern C# record class
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateNullableAwareClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Creates a nullable-aware class
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateDDDAggregateRoot(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Creates a DDD aggregate root class
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateServerlessFunctions(TheTechIdea.Beep.DataBase.EntityStructure,System.String,TheTechIdea.Beep.Utilities.CloudProviderType)">
            <summary>
            Generates serverless function code (Azure Functions/AWS Lambda) for entity operations
            This method delegates to the advanced partial class that implements the actual functionality
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates the given EntityStructure to ensure it meets class generation requirements
            </summary>
            <param name="entity">The EntityStructure to validate</param>
            <returns>A list of validation errors. If empty, the entity is valid</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.LogMessage(System.String,TheTechIdea.Beep.ConfigUtil.Errors)">
            <summary>
            Logs a message using the DME Editor
            </summary>
            <param name="message">The message to log</param>
            <param name="errorType">The error type</param>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.EnsureOutputDirectory(System.String)">
            <summary>
            Ensures the output directory exists
            </summary>
            <param name="outputPath">The output path</param>
            <returns>The validated output path</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateBasicServerlessFunction(TheTechIdea.Beep.DataBase.EntityStructure,System.String,TheTechIdea.Beep.Utilities.CloudProviderType)">
            <summary>
            Generates a basic serverless function implementation
            </summary>
            <param name="entity">The entity structure</param>
            <param name="className">The class name</param>
            <param name="cloudProvider">The cloud provider type</param>
            <returns>The generated code</returns>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.DatabaseGenerator">
            <summary>Gets the database class generator helper (lazy-loaded)</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateDataAccessLayer(TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Generates a data access layer class for an entity
            </summary>
            <param name="entity">The EntityStructure to generate the DAL class for</param>
            <param name="outputPath">The output path to save the class file</param>
            <returns>The path to the generated DAL class file</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateDbContext(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String)">
            <summary>
            Generates an EF DbContext class for the given list of entities
            </summary>
            <param name="entities">The list of EntityStructures</param>
            <param name="namespaceString">The namespace for the DbContext class</param>
            <param name="outputPath">The output path for the generated DbContext file</param>
            <returns>Path to the generated DbContext file</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateEntityConfiguration(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates EF Core configuration classes for the given entity
            </summary>
            <param name="entity">The EntityStructure to generate configuration for</param>
            <param name="namespaceString">The namespace for the configuration class</param>
            <param name="outputPath">The output path for the generated configuration file</param>
            <returns>Path to the generated configuration file</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateRepositoryImplementation(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Generates repository pattern implementation for an entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <param name="interfaceOnly">Whether to generate interface only</param>
            <returns>The generated repository code path</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateEFCoreMigration(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates Entity Framework Core migration code for entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>The migration code path</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.ValidateEntityForGeneration(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates an entity structure before database class generation
            </summary>
            <param name="entity">The entity to validate</param>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateDLL(System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.String,System.Boolean)">
            <summary>
            Creates a DLL from a collection of entities
            </summary>
            <param name="dllname">The name of the DLL to create</param>
            <param name="entities">The entities to include</param>
            <param name="outputpath">The output path</param>
            <param name="progress">Progress reporting interface</param>
            <param name="token">Cancellation token</param>
            <param name="nameSpacestring">The namespace to use</param>
            <param name="generateCSharpCodeFiles">Whether to generate C# code files</param>
            <returns>Success message or error details</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateDLLFromFilesPath(System.String,System.String,System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.String)">
            <summary>
            Creates a DLL from existing C# files in a directory
            </summary>
            <param name="dllname">The name of the DLL to create</param>
            <param name="filepath">The path containing C# files</param>
            <param name="outputpath">The output path for the DLL</param>
            <param name="progress">Progress reporting interface</param>
            <param name="token">Cancellation token</param>
            <param name="nameSpacestring">The namespace to use</param>
            <returns>Success message or error details</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.ReportProgress(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Reports progress to the provided progress interface
            </summary>
            <param name="progress">The progress reporting interface</param>
            <param name="message">The progress message</param>
            <param name="eventType">The event type</param>
            <param name="current">Current item index</param>
            <param name="total">Total items count</param>
            <param name="errorMessage">Optional error message</param>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.ValidationTestingGenerator">
            <summary>Gets the validation and testing generator helper (lazy-loaded)</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateUnitTestClass(TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Generates a unit test class template for an entity
            </summary>
            <param name="entity">The EntityStructure to generate the test class for</param>
            <param name="outputPath">The output path to save the test class file</param>
            <returns>The path to the generated test class file</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateFluentValidators(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates FluentValidation validators for entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>The validator class code</returns>
        </member>
        <member name="P:TheTechIdea.Beep.Tools.ClassCreator.WebApiGenerator">
            <summary>Gets the Web API generator helper (lazy-loaded)</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateWebApiControllers(System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String)">
            <summary>
            Generates Web API controller classes for the provided entities in a specified data source
            </summary>
            <param name="dataSourceName">The name of the data source</param>
            <param name="entities">List of entity structures to generate controllers for</param>
            <param name="outputPath">The directory to save the generated controller files</param>
            <param name="namespaceName">The namespace for the generated controllers</param>
            <returns>A list of paths to the generated controller files</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateWebApiControllerForEntityWithParams(System.String,System.String,System.String)">
            <summary>
            Generates a Web API controller class for a single entity, with data source and entity name as parameters in API methods
            </summary>
            <param name="className">The name of the controller class to be generated</param>
            <param name="outputPath">The directory to save the generated controller file</param>
            <param name="namespaceName">The namespace for the generated controller</param>
            <returns>The path to the generated controller file</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateMinimalWebApi(System.String,System.String)">
            <summary>
            Generates a minimal Web API for an entity using .NET 8's Minimal API approach
            </summary>
            <param name="outputPath">The directory to save the generated API file</param>
            <param name="namespaceName">The namespace for the generated API</param>
            <returns>The path to the generated API file</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.DocumentationGeneratorHelper">
            <summary>
            Helper class for generating documentation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.DocumentationGeneratorHelper.GenerateEntityDocumentation(TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Generates XML documentation from entity structure
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.DocumentationGeneratorHelper.GenerateEntityDiffReport(TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates a difference report between two versions of an entity
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.UiComponentGeneratorHelper">
            <summary>
            Helper class for generating UI components
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.UiComponentGeneratorHelper.GenerateGraphQLSchema(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String)">
            <summary>
            Generates GraphQL schema from entities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.UiComponentGeneratorHelper.GenerateBlazorComponent(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates Blazor component for entity
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.ServerlessGeneratorHelper">
            <summary>
            Helper class for generating serverless functions
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ServerlessGeneratorHelper.GenerateServerlessFunctions(TheTechIdea.Beep.DataBase.EntityStructure,System.String,TheTechIdea.Beep.Utilities.CloudProviderType)">
            <summary>
            Generates serverless functions for entity operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ServerlessGeneratorHelper.GenerateGrpcService(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates gRPC service definitions
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.ValidationAndTestingGeneratorHelper">
            <summary>
            Helper class for generating testing and validation classes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ValidationAndTestingGeneratorHelper.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates the given EntityStructure to ensure it meets class generation requirements
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ValidationAndTestingGeneratorHelper.GenerateUnitTestClass(TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Generates a unit test class template for an entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ValidationAndTestingGeneratorHelper.GenerateFluentValidators(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates FluentValidation validators for entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ValidationAndTestingGeneratorHelper.GenerateTestMethods(System.Text.StringBuilder,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates test methods for the entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ValidationAndTestingGeneratorHelper.GetTestValue(System.String)">
            <summary>
            Gets a test value for a given field type
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper">
            <summary>
            Helper class for common class generation utilities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates entity structure for class generation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.GenerateSafePropertyName(System.String,System.Int32)">
            <summary>
            Generates a safe C# property name from a field name
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.GenerateBackingFieldName(System.String)">
            <summary>
            Generates a backing field name from a property name
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.IsReferenceType(System.String)">
            <summary>
            Determines if a type is a reference type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.IsNumericType(System.String)">
            <summary>
            Determines if a type is numeric
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.IsIntegralType(System.String)">
            <summary>
            Determines if a type is an integral type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.MapFieldTypeToSqlType(System.String)">
            <summary>
            Maps C# field types to SQL Server types
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.MapCSharpToProtoType(System.String)">
            <summary>
            Maps C# types to protobuf types
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.ToSnakeCase(System.String)">
            <summary>
            Converts a name to snake_case
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.ToPascalCase(System.String)">
            <summary>
            Converts a name to PascalCase
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.ToCamelCase(System.String)">
            <summary>
            Converts a name to camelCase
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.GetDisplayName(System.String)">
            <summary>
            Gets a user-friendly display name from a field name
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.EnsureOutputDirectory(System.String)">
            <summary>
            Ensures output directory exists
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.LogMessage(System.String,System.String,TheTechIdea.Beep.ConfigUtil.Errors)">
            <summary>
            Logs a message using the DMEEditor
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.GenerateStandardUsings(System.String[])">
            <summary>
            Generates standard using statements for class files
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.WrapInNamespace(System.String,System.String)">
            <summary>
            Generates a complete namespace wrapper around class content
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.WriteToFile(System.String,System.String,System.String)">
            <summary>
            Writes content to file with proper error handling
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.GenerateDefaultConstructor(System.String)">
            <summary>
            Generates a default constructor for a class
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.GenerateParameterizedConstructor(System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityField})">
            <summary>
            Generates a parameterized constructor for a class
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.GenerateFullProperty(System.String,System.String)">
            <summary>
            Generates a full property with getter and setter
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.FileExists(System.String)">
            <summary>
            Checks if a file exists
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ClassGenerationHelper.ReadFileContent(System.String)">
            <summary>
            Reads content from a file
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Helpers.DatabaseClassGeneratorHelper">
            <summary>
            Helper class for generating database-related classes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.DatabaseClassGeneratorHelper.GenerateDataAccessLayer(TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Generates a data access layer class for an entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.DatabaseClassGeneratorHelper.GenerateDbContext(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String)">
            <summary>
            Generates an EF DbContext class for the given list of entities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.DatabaseClassGeneratorHelper.GenerateEntityConfiguration(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates EF Core configuration classes for the given entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.DatabaseClassGeneratorHelper.GenerateRepositoryImplementation(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Generates repository pattern implementation for an entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.DatabaseClassGeneratorHelper.GenerateEFCoreMigration(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates Entity Framework Core migration code for entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.DatabaseClassGeneratorHelper.GenerateDataAccessMethods(System.Text.StringBuilder,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates data access methods for repository
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.DatabaseClassGeneratorHelper.GenerateRepositoryInterfaceMethods(System.Text.StringBuilder,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates repository interface methods
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.DatabaseClassGeneratorHelper.GenerateRepositoryImplementation(System.Text.StringBuilder,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates repository implementation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.DatabaseClassGeneratorHelper.GenerateMigrationUpMethod(System.Text.StringBuilder,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates migration Up method
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Helpers.ModernClassGeneratorHelper">
            <summary>
            Helper class for generating modern C# class patterns
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ModernClassGeneratorHelper.CreateRecordClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Creates a C# record class for immutable data models
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ModernClassGeneratorHelper.CreateNullableAwareClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Creates a class with support for nullable reference types
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.ModernClassGeneratorHelper.CreateDDDAggregateRoot(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Creates a domain-driven design style aggregate root class
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Helpers.PocoClassGeneratorHelper">
            <summary>
            Helper class for generating POCO classes and basic class structures
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.PocoClassGeneratorHelper.CreatePOCOClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a simple POCO class with basic properties
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.PocoClassGeneratorHelper.CreateINotifyClass(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a class that implements INotifyPropertyChanged
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.PocoClassGeneratorHelper.CreateEntityClass(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an Entity class that inherits from Entity base class
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.PocoClassGeneratorHelper.CreateClassFromTemplate(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a class from a template with field substitution
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.PocoClassGeneratorHelper.GenerateNotifyPropertyTemplate">
            <summary>
            Generates the template for INotifyPropertyChanged properties
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper">
            <summary>
            Helper class for generating Web API controllers and related components
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateWebApiControllers(System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String)">
            <summary>
            Generates Web API controller classes for the provided entities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateWebApiControllerForEntityWithParams(System.String,System.String,System.String)">
            <summary>
            Generates a Web API controller class with data source and entity name as parameters
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateMinimalWebApi(System.String,System.String)">
            <summary>
            Generates a minimal Web API for entities using .NET 8's Minimal API approach
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateControllerCode(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates the code for a Web API controller for a specific entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateControllerCodeWithParams(System.String,System.String)">
            <summary>
            Generates controller code with parameters for dynamic entities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateMinimalApiCode(System.String)">
            <summary>
            Generates minimal API code using .NET 8 patterns
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateGetAllMethod(System.Text.StringBuilder,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates GetAll method for controller
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateGetByIdMethod(System.Text.StringBuilder,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates GetById method for controller
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateCreateMethod(System.Text.StringBuilder,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates Create method for controller
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateUpdateMethod(System.Text.StringBuilder,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates Update method for controller
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateDeleteMethod(System.Text.StringBuilder,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates Delete method for controller
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateParameterizedCrudMethods(System.Text.StringBuilder)">
            <summary>
            Generates parameterized CRUD methods
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.Helpers.WebApiGeneratorHelper.GenerateMinimalApiEndpoints(System.Text.StringBuilder)">
            <summary>
            Generates minimal API endpoints
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Interfaces.IClassCreatorCore">
            <summary>
            Core interface for class creation functionality
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Interfaces.IPocoClassGenerator">
            <summary>
            Interface for basic POCO class generation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Interfaces.IModernClassGenerator">
            <summary>
            Interface for modern class generation patterns
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Interfaces.IWebApiGenerator">
            <summary>
            Interface for web API generation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Interfaces.IDatabaseClassGenerator">
            <summary>
            Interface for database-related class generation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Interfaces.IServerlessGenerator">
            <summary>
            Interface for serverless and cloud generation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Interfaces.IUiComponentGenerator">
            <summary>
            Interface for UI component generation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Interfaces.IValidationAndTestingGenerator">
            <summary>
            Interface for validation and testing
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Interfaces.IDocumentationGenerator">
            <summary>
            Interface for documentation and utilities
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.Interfaces.IDllCreator">
            <summary>
            Interface for DLL creation and compilation
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIAuthenticationHelper">
            <summary>
            Authentication helper for Web API connections supporting various auth methods
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPICacheHelper">
            <summary>
            Caching helper for Web API responses with TTL support
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper">
            <summary>
            Configuration management helper for Web API DataSource
            Handles connection properties, endpoint configurations, and API-specific settings
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.BaseUrl">
            <summary>Base URL for the API</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.ApiVersion">
            <summary>API version</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.AuthenticationType">
            <summary>Authentication type</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.TimeoutMs">
            <summary>Request timeout in milliseconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.MaxRetries">
            <summary>Maximum retry attempts</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.RetryDelayMs">
            <summary>Retry delay in milliseconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.CacheEnabled">
            <summary>Enable response caching</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.CacheDurationMinutes">
            <summary>Cache duration in minutes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.RateLimitEnabled">
            <summary>Enable rate limiting</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.RequestsPerSecond">
            <summary>Requests per second limit</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PagingEnabled">
            <summary>Enable pagination</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PageSize">
            <summary>Default page size</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.MaxConcurrentRequests">
            <summary>Maximum concurrent requests</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.#ctor(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.Logger.IDMLogger,System.String)">
            <summary>
            Initializes the configuration helper
            </summary>
            <param name="connectionProperties">Connection properties</param>
            <param name="logger">Logger instance</param>
            <param name="datasourceName">Data source name</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.GetConfigValue``1(System.String,``0)">
            <summary>
            Gets a configuration value with type conversion
            </summary>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="key">Configuration key</param>
            <param name="defaultValue">Default value if key not found</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.SetConfigValue(System.String,System.Object)">
            <summary>
            Sets a configuration value
            </summary>
            <param name="key">Configuration key</param>
            <param name="value">Configuration value</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.GetHeaders">
            <summary>
            Gets HTTP headers from configuration
            </summary>
            <returns>Dictionary of headers</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.GetEndpointConfiguration(System.String)">
            <summary>
            Gets endpoint configuration for a specific entity
            </summary>
            <param name="entityName">Entity name</param>
            <returns>Endpoint configuration</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.GetAuthenticationConfiguration">
            <summary>
            Gets authentication configuration from connection properties
            </summary>
            <returns>The WebAPIConnectionProperties instance with authentication settings</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.GetPaginationConfiguration">
            <summary>
            Gets pagination configuration
            </summary>
            <returns>Pagination configuration</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.ValidateConfiguration">
            <summary>
            Validates the current configuration
            </summary>
            <returns>Validation result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.Dispose">
            <summary>
            Disposes resources used by the configuration helper
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration">
            <summary>
            Endpoint configuration for specific entities
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration.EntityName">
            <summary>Entity name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration.GetEndpoint">
            <summary>GET endpoint path</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration.PostEndpoint">
            <summary>POST endpoint path</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration.PutEndpoint">
            <summary>PUT endpoint path</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration.DeleteEndpoint">
            <summary>DELETE endpoint path</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration.ListEndpoint">
            <summary>LIST endpoint path</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration.HttpMethod">
            <summary>HTTP method for queries</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration.RequiresAuth">
            <summary>Whether authentication is required</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration.CacheDuration">
            <summary>Cache duration in minutes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.EndpointConfiguration.RateLimit">
            <summary>Rate limit for this endpoint</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.ConfigurationValidationResult">
            <summary>
            Result of configuration validation
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.ConfigurationValidationResult.IsValid">
            <summary>Whether configuration is valid</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.ConfigurationValidationResult.Errors">
            <summary>List of validation errors</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.ConfigurationValidationResult.Warnings">
            <summary>List of validation warnings</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.ConfigurationValidationResult.AddError(System.String,System.String)">
            <summary>Adds an error with a key prefix</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.ConfigurationValidationResult.AddWarning(System.String,System.String)">
            <summary>Adds a warning with a key prefix</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PaginationConfiguration">
            <summary>
            Pagination configuration
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PaginationConfiguration.Enabled">
            <summary>Whether pagination is enabled</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PaginationConfiguration.DefaultPageSize">
            <summary>Default page size</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PaginationConfiguration.MaxPageSize">
            <summary>Maximum page size</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PaginationConfiguration.PageParameterName">
            <summary>Page parameter name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PaginationConfiguration.SizeParameterName">
            <summary>Size parameter name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PaginationConfiguration.OffsetParameterName">
            <summary>Offset parameter name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PaginationConfiguration.LimitParameterName">
            <summary>Limit parameter name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIConfigurationHelper.PaginationConfiguration.Style">
            <summary>Pagination style (PageSize, OffsetLimit, Cursor)</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIDataHelper">
            <summary>
            Data processing helper for Web API responses
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIDataHelper.BuildEntityEndpoint(System.String,System.String)">
            <summary>Builds entity endpoint for specific ID</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIDataHelper.ExtractIdValue(System.Object)">
            <summary>Extracts ID value from data object</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIDataHelper.ParseEntitiesFromDiscoveryResponse(System.String)">
            <summary>Parses entities from discovery API response</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIDataHelper.InferEntityStructureFromSample(System.String,System.Text.Json.JsonElement)">
            <summary>Infers entity structure from sample data</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIDataHelper.GenerateCacheKey(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter},System.Int32,System.Int32)">
            <summary>Generates cache key from multiple parameters</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper">
            <summary>
            Error handling and retry logic helper for Web API operations
            Implements exponential backoff, circuit breaker pattern, and comprehensive error categorization
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.DefaultMaxRetries">
            <summary>Default maximum retry attempts</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.DefaultBaseDelayMs">
            <summary>Default base delay for exponential backoff in milliseconds</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.DefaultFailureThreshold">
            <summary>Default circuit breaker failure threshold</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.DefaultRecoveryTimeoutSeconds">
            <summary>Default circuit breaker recovery timeout in seconds</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.#ctor(TheTechIdea.Beep.Logger.IDMLogger,System.String)">
            <summary>
            Initializes the error helper
            </summary>
            <param name="logger">Logger instance</param>
            <param name="datasourceName">Data source name for logging</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.HandleErrorResponseAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles and logs an error from an HttpResponseMessage.
            </summary>
            <param name="response">The HTTP response message.</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CategorizeErrorAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
            Analyzes an HttpResponseMessage to categorize the error.
            </summary>
            <param name="response">The HTTP response to analyze.</param>
            <returns>A WebApiError object with categorized error information.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ExecuteWithRetryAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Executes an operation with retry logic and circuit breaker protection
            </summary>
            <typeparam name="T">Return type of the operation</typeparam>
            <param name="operation">Operation to execute</param>
            <param name="operationName">Name of the operation for logging</param>
            <param name="maxRetries">Maximum retry attempts</param>
            <param name="baseDelayMs">Base delay for exponential backoff</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.AnalyzeError(System.Exception)">
            <summary>
            Analyzes an exception and returns error information
            </summary>
            <param name="exception">Exception to analyze</param>
            <returns>Error analysis result</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.GetCircuitBreakerStatus(System.String)">
            <summary>
            Gets circuit breaker status for an operation
            </summary>
            <param name="operationName">Name of the operation</param>
            <returns>Circuit breaker status</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ResetCircuitBreaker(System.String)">
            <summary>
            Resets circuit breaker for an operation
            </summary>
            <param name="operationName">Name of the operation</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.Dispose">
            <summary>
            Disposes resources used by the error helper
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiError">
            <summary>
            Web API error information
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiError.Category">
            <summary>Error category</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiError.Message">
            <summary>Error message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiError.StatusCode">
            <summary>HTTP status code</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiError.Content">
            <summary>Response content</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiError.Timestamp">
            <summary>Error timestamp</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiErrorCategory">
            <summary>
            Web API error category enumeration
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiErrorCategory.ClientError">
            <summary>Client-side errors (4xx)</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiErrorCategory.AuthenticationError">
            <summary>Authentication errors</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiErrorCategory.AuthorizationError">
            <summary>Authorization errors</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiErrorCategory.ServerError">
            <summary>Server-side errors (5xx)</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiErrorCategory.NetworkError">
            <summary>Network or connectivity errors</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.WebApiErrorCategory.Unknown">
            <summary>Unknown or uncategorized errors</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorAnalysisResult">
            <summary>
            Error analysis result
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorAnalysisResult.OriginalException">
            <summary>Original exception</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorAnalysisResult.ErrorMessage">
            <summary>Error message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorAnalysisResult.ErrorType">
            <summary>Error type name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorAnalysisResult.Category">
            <summary>Error category</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorAnalysisResult.IsRetryable">
            <summary>Whether the error is retryable</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorAnalysisResult.SuggestedAction">
            <summary>Suggested action to resolve the error</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorAnalysisResult.Timestamp">
            <summary>Error timestamp</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CircuitBreakerState">
            <summary>
            Circuit breaker state enumeration
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CircuitBreakerState.Closed">
            <summary>Circuit breaker is closed (normal operation)</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CircuitBreakerState.Open">
            <summary>Circuit breaker is open (failing fast)</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CircuitBreakerState.HalfOpen">
            <summary>Circuit breaker is half-open (testing recovery)</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CircuitBreakerStatus">
            <summary>
            Circuit breaker status information
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CircuitBreakerStatus.OperationName">
            <summary>Operation name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CircuitBreakerStatus.State">
            <summary>Current state</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CircuitBreakerStatus.FailureCount">
            <summary>Failure count</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CircuitBreakerStatus.LastFailureTime">
            <summary>Last failure time</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorCategory">
            <summary>
            Error category enumeration
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorCategory.Network">
            <summary>Network-related errors</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorCategory.Authentication">
            <summary>Authentication/authorization errors</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorCategory.Configuration">
            <summary>Configuration errors</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorCategory.Timeout">
            <summary>Timeout errors</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorCategory.Logic">
            <summary>Logic errors</summary>
        </member>
        <member name="F:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.ErrorCategory.Unknown">
            <summary>Unknown errors</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIErrorHelper.CircuitBreaker">
            <summary>
            Circuit breaker implementation with state management
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRateLimitHelper">
            <summary>
            Rate limiting helper to manage API request throttling and quota compliance
            Implements token bucket algorithm for smooth rate limiting
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRateLimitHelper.DefaultRequestsPerSecond">
            <summary>Default requests per second if not configured</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRateLimitHelper.DefaultBurstCapacity">
            <summary>Default burst capacity</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRateLimitHelper.CleanupIntervalMinutes">
            <summary>Bucket cleanup interval in minutes</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRateLimitHelper.#ctor(TheTechIdea.Beep.Logger.IDMLogger,System.String)">
            <summary>
            Initializes the rate limit helper
            </summary>
            <param name="logger">Logger instance</param>
            <param name="datasourceName">Data source name for logging</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRateLimitHelper.WaitForPermissionAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for rate limit permission before proceeding
            </summary>
            <param name="endpoint">API endpoint identifier</param>
            <param name="requestsPerSecond">Requests per second limit</param>
            <param name="burstCapacity">Burst capacity</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task that completes when permission is granted</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRateLimitHelper.CanMakeRequest(System.String,System.Int32,System.Int32)">
            <summary>
            Checks if a request can be made immediately
            </summary>
            <param name="endpoint">API endpoint identifier</param>
            <param name="requestsPerSecond">Requests per second limit</param>
            <param name="burstCapacity">Burst capacity</param>
            <returns>True if request can be made immediately</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRateLimitHelper.GetStatus(System.String)">
            <summary>
            Gets current rate limit status for an endpoint
            </summary>
            <param name="endpoint">API endpoint identifier</param>
            <returns>Rate limit status information</returns>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRateLimitHelper.TokenBucket">
            <summary>
            Token bucket implementation for rate limiting
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRateLimitHelper.RateLimitStatus">
            <summary>
            Rate limit status information
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPIRequestHelper">
            <summary>
            HTTP request helper with retry logic, rate limiting, and error handling
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper">
            <summary>
            Schema discovery and validation helper for Web APIs
            Supports OpenAPI/Swagger, JSON Schema, and dynamic schema inference
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.SchemaCacheExpirationMinutes">
            <summary>Schema cache expiration time in minutes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.MaxNestingDepth">
            <summary>Maximum depth for nested object analysis</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.MinSampleSize">
            <summary>Minimum sample size for schema inference</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.#ctor(TheTechIdea.Beep.Logger.IDMLogger,System.String)">
            <summary>
            Initializes the schema helper
            </summary>
            <param name="logger">Logger instance</param>
            <param name="datasourceName">Data source name for logging</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.InferSchemaFromJsonAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Infers entity structure from JSON response data
            </summary>
            <param name="entityName">Name of the entity</param>
            <param name="jsonData">JSON data samples</param>
            <param name="forceRefresh">Force schema refresh</param>
            <returns>Inferred entity structure</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.InferSchemaFromJson(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Infers entity structure from JSON response data (synchronous version)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.ValidateSchemaAsync(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validates entity structure against actual data
            </summary>
            <param name="entity">Entity structure to validate</param>
            <param name="jsonData">JSON data samples</param>
            <returns>Validation results</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.ValidateSchema(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validates entity structure against actual data (synchronous version)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.UpdateSchemaAsync(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates entity structure based on new data
            </summary>
            <param name="entity">Current entity structure</param>
            <param name="jsonData">New JSON data samples</param>
            <returns>Updated entity structure</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.TryGetCachedSchema(System.String,TheTechIdea.Beep.DataBase.EntityStructure@)">
            <summary>
            Gets cached schema if available and not expired
            </summary>
            <param name="entityName">Entity name</param>
            <param name="schema">Output schema if found</param>
            <returns>True if cached schema is available</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.ClearCache">
            <summary>
            Clears schema cache
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.Dispose">
            <summary>
            Disposes resources used by the schema helper
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.SchemaValidationResult">
            <summary>
            Schema validation result
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.SchemaValidationResult.EntityName">
            <summary>Name of the validated entity</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.SchemaValidationResult.IsValid">
            <summary>Indicates if the schema is valid</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.SchemaValidationResult.Issues">
            <summary>List of validation issues found</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.Helpers.WebAPISchemaHelper.SchemaValidationResult.SuggestedChanges">
            <summary>List of suggested changes to fix issues</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties">
            <summary>
            Enhanced connection properties for Web API connections with comprehensive settings.
            This class extends IConnectionProperties with Web API-specific configuration options
            including authentication, caching, rate limiting, and response handling.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ID">
            <summary>
            Unique identifier for this connection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.GuidID">
            <summary>
            Globally unique identifier for this connection instance
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ConnectionName">
            <summary>
            Human-readable name for this connection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ConnectionString">
            <summary>
            Base URL for the Web API (e.g., "https://api.example.com/v1")
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Database">
            <summary>
            Database name (may be used for API versioning or endpoint identification)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.OracleSIDorService">
            <summary>
            Oracle-specific SID or service name (not typically used for Web APIs)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.DatabaseType">
            <summary>
            Type of data source (always WebApi for this class)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Category">
            <summary>
            Category of the data source (always WEBAPI for this class)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.DriverName">
            <summary>
            Name of the driver handling this connection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.DriverVersion">
            <summary>
            Version of the driver
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Host">
            <summary>
            Hostname or IP address of the API server
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Parameters">
            <summary>
            Additional connection parameters as semicolon-separated key-value pairs
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Password">
            <summary>
            Password for basic authentication
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Port">
            <summary>
            Port number for the API server (typically 80 for HTTP, 443 for HTTPS)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.SchemaName">
            <summary>
            Schema name (may be used for API versioning)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.UserID">
            <summary>
            Username for basic authentication
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.FilePath">
            <summary>
            File path (not typically used for Web APIs)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.FileName">
            <summary>
            File name (not typically used for Web APIs)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Ext">
            <summary>
            Extended configuration data (JSON format)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Drawn">
            <summary>
            Whether this connection has been drawn in the UI
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.CertificatePath">
            <summary>
            Path to SSL certificate file
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Url">
            <summary>
            Alternative URL (may be used for redirects or fallbacks)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.KeyToken">
            <summary>
            Security token for authentication
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ApiKey">
            <summary>
            API key for authentication
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Databases">
            <summary>
            List of available databases/endpoints
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Entities">
            <summary>
            List of entity structures discovered from the API
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Headers">
            <summary>
            Custom HTTP headers to include in requests
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.DatasourceDefaults">
            <summary>
            Default values for data source parameters
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Delimiter">
            <summary>
            Field delimiter character (not typically used for Web APIs)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Favourite">
            <summary>
            Whether this connection is marked as favorite
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IsLocal">
            <summary>
            Whether this is a local connection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IsRemote">
            <summary>
            Whether this is a remote connection (always true for Web APIs)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IsWebApi">
            <summary>
            Whether this is a Web API connection (always true for this class)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IsFile">
            <summary>
            Whether this is a file-based connection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IsDatabase">
            <summary>
            Whether this is a database connection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IsComposite">
            <summary>
            Whether this is a composite connection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IsCloud">
            <summary>
            Whether this is a cloud-based connection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IsFavourite">
            <summary>
            Whether this connection is marked as favorite
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IsDefault">
            <summary>
            Whether this is the default connection
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IsInMemory">
            <summary>
            Whether this is an in-memory connection
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ApiVersion" -->
        <member name="F:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties._authType">
            <summary>
            Type of authentication to use
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ClientId">
            <summary>
            Client ID for OAuth2 authentication
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ClientSecret">
            <summary>
            Client secret for OAuth2 authentication
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.AuthUrl">
            <summary>
            OAuth2 authorization URL
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.TokenUrl">
            <summary>
            OAuth2 token endpoint URL
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.Scope">
            <summary>
            OAuth2 scope parameter
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.GrantType">
            <summary>
            OAuth2 grant type (client_credentials, password, authorization_code)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ApiKeyHeader">
            <summary>
            HTTP header name for API key authentication (default: "X-API-Key")
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.RedirectUri">
            <summary>
            OAuth2 redirect URI for authorization code flow
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.AuthCode">
            <summary>
            OAuth2 authorization code for authorization code flow
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.AccessToken">
            <summary>
            Access token for Instagram Basic Display API - maps to ApiKey
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.AppId">
            <summary>
            Instagram App ID - maps to ClientId
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.AppSecret">
            <summary>
            Instagram App Secret - maps to ClientSecret
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.TimeoutMs">
            <summary>
            Request timeout in milliseconds (default: 30000)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.MaxRetries">
            <summary>
            Maximum number of retry attempts for failed requests (default: 3)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.RetryIntervalMs">
            <summary>
            Delay between retry attempts in milliseconds (default: 1000)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.UseProxy">
            <summary>
            Whether to use a proxy server
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ProxyUrl">
            <summary>
            Proxy server URL
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ProxyPort">
            <summary>
            Proxy server port
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ProxyUser">
            <summary>
            Username for proxy authentication
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ProxyPassword">
            <summary>
            Password for proxy authentication
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.BypassProxyOnLocal">
            <summary>
            Whether to bypass proxy for local addresses
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.UseDefaultProxyCredentials">
            <summary>
            Whether to use default proxy credentials
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.IgnoreSSLErrors">
            <summary>
            Whether to ignore SSL certificate errors
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ValidateServerCertificate">
            <summary>
            Whether to validate server SSL certificates
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ClientCertificatePath">
            <summary>
            Path to client certificate file for mutual TLS
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ClientCertificatePassword">
            <summary>
            Password for client certificate
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.RequiresAuthentication">
            <summary>
            Whether the API requires authentication
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.RequiresTokenRefresh">
            <summary>
            Whether tokens need to be automatically refreshed
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.RetryCount">
            <summary>
            Number of retry attempts for failed requests (default: 3)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.RetryDelayMs">
            <summary>
            Delay between retry attempts in milliseconds (default: 1000)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.CacheExpiryMinutes">
            <summary>
            Cache expiry time in minutes (default: 15)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.MaxConcurrentRequests">
            <summary>
            Maximum number of concurrent requests (default: 10)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.EnableCaching">
            <summary>
            Whether to enable response caching (default: true)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.EnableCompression">
            <summary>
            Whether to enable HTTP compression (default: true)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.UserAgent">
            <summary>
            User agent string for HTTP requests (default: "BeepDM-WebAPI/1.0")
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.RateLimitRequestsPerMinute">
            <summary>
            Maximum number of requests per minute (default: 60)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.EnableRateLimit">
            <summary>
            Whether to enable rate limiting (default: true)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ResponseFormat">
            <summary>
            Expected response format: "json", "xml", "csv", "text" (default: "json")
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.DataPath">
            <summary>
            JSONPath or XPath expression to extract data from response
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.TotalCountPath">
            <summary>
            JSONPath or XPath expression to extract total count from response
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.PageNumberParameter">
            <summary>
            Query parameter name for page number (default: "page")
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.PageSizeParameter">
            <summary>
            Query parameter name for page size (default: "limit")
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.DefaultPageSize">
            <summary>
            Default page size for requests (default: 100)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.MaxPageSize">
            <summary>
            Maximum allowed page size (default: 1000)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.#ctor">
            <summary>
            Initializes a new instance of WebAPIConnectionProperties with default values
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.GetParameterValue(System.String)">
            <summary>
            Gets a connection parameter value by name from the Parameters string
            </summary>
            <param name="paramName">Name of the parameter to retrieve</param>
            <returns>Parameter value if found, null otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.SetParameterValue(System.String,System.String)">
            <summary>
            Sets a connection parameter value in the Parameters string
            </summary>
            <param name="paramName">Name of the parameter to set</param>
            <param name="value">Value to set for the parameter</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ParseParameters(System.String)">
            <summary>
            Parses the Parameters string into a dictionary
            </summary>
            <param name="parametersString">Semicolon-separated key-value pairs</param>
            <returns>Dictionary containing the parsed parameters</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.UpdateAuthenticationRequirements">
            <summary>
            Updates authentication requirement flags based on the current AuthType
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.ValidateConfiguration">
            <summary>
            Validates that all required properties for the current AuthType are set
            </summary>
            <returns>True if validation passes, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIConnectionProperties.GetValidationErrors">
            <summary>
            Gets a description of missing required configuration for the current AuthType
            </summary>
            <returns>Description of missing configuration, or empty string if valid</returns>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.WebAPIDataConnection">
            <summary>
            Enhanced WebAPI Data Connection implementation using WebAPIConnectionProperties
            Provides optimized connection management for Web API data sources
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.ConnectionProp">
            <summary>Connection properties specific to Web APIs</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.ConnectionStatus">
            <summary>Current connection status</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.Logger">
            <summary>Logger instance for connection operations</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.ErrorObject">
            <summary>Error information object</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.DMEEditor">
            <summary>Reference to the data management editor</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.Id">
            <summary>Unique identifier for this connection</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.ConnectionString">
            <summary>Connection string (derived from properties)</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.DatabaseType">
            <summary>Database type for this connection</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.ReplcaDataSourceType">
            <summary>Replica database type</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.WebAPIProperties">
            <summary>Web API specific connection properties</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.InMemory">
            <summary>Legacy property for compatibility</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.GuidID">
            <summary>Legacy GUID identifier</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.ID">
            <summary>Legacy ID property</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.DataSourceDriver">
            <summary>Data source driver configuration</summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.DbConn">
            <summary>Database connection instance</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.#ctor">
            <summary>
            Initializes a new WebAPIDataConnection instance
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.#ctor(TheTechIdea.Beep.ConfigUtil.IConnectionProperties)">
            <summary>
            Initializes WebAPIDataConnection with existing connection properties
            </summary>
            <param name="connectionProperties">Connection properties to use</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.OpenConnection">
            <summary>Opens the Web API connection</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.OpenConnection(TheTechIdea.Beep.ConfigUtil.IConnectionProperties)">
            <summary>Opens connection with specific properties</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.OpenConnection(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>Opens connection with database type and connection string</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.OpenConnection(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>Opens connection with individual parameters</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.CloseConn">
            <summary>Closes the Web API connection</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.ReplaceValueFromConnectionString">
            <summary>Legacy method for replacing values in connection string</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.ValidateConnectionProperties">
            <summary>Validates that required connection properties are provided</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.ValidateWebAPIAuthentication">
            <summary>Validates Web API specific authentication settings</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.TestConnection">
            <summary>Tests the connection by attempting to reach the API</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.BuildConnectionString">
            <summary>Builds connection string from properties</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.ParseConnectionString(System.String)">
            <summary>Parses connection string into properties</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.Dispose(System.Boolean)">
            <summary>Disposes the connection resources</summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataConnection.Dispose">
            <summary>Disposes the Web API connection</summary>
        </member>
        <member name="T:TheTechIdea.Beep.WebAPI.WebAPIDataSource">
            <summary>
            Connection and transaction skeleton implementations.
            </summary>
            <summary>
            Core partial containing only state (properties/fields), constructor and disposal logic.
            All IDataSource method implementations are split into separate partial skeleton files.
            </summary>
            <summary>
            Data retrieval &amp; CRUD operations using helpers.
            </summary>
            <summary>
            HTTP convenience methods for common Web API calls (GET, etc.)
            </summary>
            <summary>
            Query &amp; scalar interface stubs.
            </summary>
            <summary>
            Scripting &amp; entity creation interface stubs (no implementation per requirements).
            </summary>
            <summary>
            Structure and metadata related methods.
            </summary>
            <summary>
            IWebAPIDataSource specific members (skeleton implementation).
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Openconnection">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Closeconnection">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.BeginTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.EndTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Commit(TheTechIdea.Beep.Addin.PassedArgs)">
            <inheritdoc />
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.ColumnDelimiter">
            <summary>
            Delimiter used to separate columns in queries or data representations.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.ParameterDelimiter">
            <summary>
            Delimiter used for parameters in queries.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GuidID">
            <summary>
            Unique identifier for the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.DatasourceType">
            <summary>
            Type of the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Category">
            <summary>
            Category of the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Dataconnection">
            <summary>
            Data connection interface.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.DatasourceName">
            <summary>
            Name of the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.ErrorObject">
            <summary>
            Error handling object.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Id">
            <summary>
            Secondary identifier for the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Logger">
            <summary>
            Logger for data management activities.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.EntitiesNames">
            <summary>
            List of entity names in the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Entities">
            <summary>
            List of entity structures.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.DMEEditor">
            <summary>
            Data manipulation and exploration editor.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.ConnectionStatus">
            <summary>
            Current connection status.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.WebAPI.WebAPIDataSource.PassEvent">
            <summary>
            Event raised when a specific action or event is passed.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.ApiKey">
            <summary>
            API key for authentication.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Resource">
            <summary>
            Resource endpoint.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Parameters">
            <summary>
            Parameters for the API request.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.#ctor(System.String,TheTechIdea.Beep.Logger.IDMLogger,TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.ConfigUtil.IErrorsInfo)">
            <summary>
            Initializes a new instance of the WebAPIDataSource class.
            </summary>
            <param name="datasourcename">Name of the data source.</param>
            <param name="logger">Logger instance.</param>
            <param name="dmeEditor">DME editor instance.</param>
            <param name="databasetype">Type of the data source.</param>
            <param name="errorObject">Error object.</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Dispose(System.Boolean)">
            <summary>
            Disposes the resources used by the WebAPIDataSource.
            </summary>
            <param name="disposing">True to dispose managed resources.</param>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.Dispose">
            <summary>
            Disposes the WebAPIDataSource.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter},System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetEntityAsync(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.InsertEntity(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.UpdateEntity(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.DeleteEntity(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.UpdateEntities(System.String,System.Object,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Sends a GET request to the specified endpoint or absolute URL.
            - If endpointOrUrl starts with http, it is treated as an absolute URL.
            - Otherwise it is combined with BaseUrl.
            Default headers and auth headers are applied automatically.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Sends a GET request and deserializes the JSON response to type T.
            Returns default(T) if the request fails or content cannot be parsed.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.RunQuery(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetScalar(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetScalarAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.ExecuteSql(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.RunScript(TheTechIdea.Beep.Editor.ETLScriptDet)">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetCreateEntityScript(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.CreateEntities(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <inheritdoc />
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetEntitesList">
            <summary>
            Gets the list of available entities from the Web API
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.CheckEntityExist(System.String)">
            <summary>
            Checks if an entity exists in the data source
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetEntityIdx(System.String)">
            <summary>
            Gets the index of an entity in the entities list
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetEntityStructure(System.String,System.Boolean)">
            <summary>
            Gets the structure/metadata of an entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure,System.Boolean)">
            <summary>
            Gets the structure/metadata of an entity using an existing structure as reference
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetEntityType(System.String)">
            <summary>
            Gets the .NET type for an entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetEntityforeignkeys(System.String,System.String)">
            <summary>
            Gets foreign key relationships for an entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.GetChildTablesList(System.String,System.String,System.String)">
            <summary>
            Gets child table relationships for an entity
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.CreateEntityAs(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Creates an entity structure
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.WebAPIDataSource.ReadData(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Reads data from the Web API with pagination support
            </summary>
        </member>
    </members>
</doc>
