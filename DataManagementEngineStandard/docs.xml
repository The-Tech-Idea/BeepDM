<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataManagementEngine</name>
    </assembly>
    <members>
        <member name="T:TheTechIdea.Beep.ConfigUtil.ConfigEditor">
            <summary>
            Refactored ConfigEditor with specialized managers for different responsibilities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.ConfigEditor.#ctor(TheTechIdea.Beep.Logger.IDMLogger,TheTechIdea.Beep.ConfigUtil.IErrorsInfo,TheTechIdea.Beep.ConfigUtil.IJsonLoader,System.String,System.String,TheTechIdea.Beep.Utilities.BeepConfigType)">
            <summary>Initializes a new instance of the ConfigEditor class.</summary>
            <param name="logger">The logger object used for logging.</param>
            <param name="per">The object used for error handling and reporting.</param>
            <param name="jsonloader">The object used for loading JSON data.</param>
            <param name="folderpath">The path to the folder containing the configuration files. If null or empty, uses platform-appropriate application data folder.</param>
            <param name="containerfolder">The name of the container folder within the folder path. If null or empty, uses the folder path directly.</param>
            <param name="configType">The type of configuration being edited.</param>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.ConfigType">
            <summary>Gets or sets the configuration type for the beep.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.IsLoaded">
            <summary>Checks if the location is loaded.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.ContainerName">
            <summary>Gets or sets the name of the container.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.ErrorObject">
            <summary>Gets or sets the error object.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.JsonLoader">
            <summary>Gets or sets the JSON loader.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.Config">
            <summary>Gets or sets the configuration and settings object.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.Logger">
            <summary>Gets or sets the logger used for logging.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.Databasetypes">
            <summary>Gets or sets the list of database types.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.QueryList">
            <summary>Gets or sets the list of QuerySqlRepo objects.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.DataConnections">
            <summary>Gets or sets the list of data connections.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.WorkFlows">
            <summary>Gets or sets the list of workflows.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.CategoryFolders">
            <summary>Gets or sets the list of category folders.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.DataDriversClasses">
            <summary>Gets or sets the list of connection driver configurations.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.Projects">
            <summary>Gets or sets the list of root folders representing projects.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.Reportslist">
            <summary>Gets or sets the list of reports.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.ReportsDefinition">
            <summary>Gets or sets the list of app templates for generating reports.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.ConfigEditor.AIScriptslist">
            <summary>Gets or sets the list of AIScripts.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager">
            <summary>
            Manages drivers, workflows, reports, and other configuration components
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.AddDriver(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig)">
            <summary>
            Adds a driver to the connection drivers configuration.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.LoadConnectionDriversConfigValues">
            <summary>
            Loads connection drivers configuration values from JSON file and syncs with in-memory list.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveConnectionDriversConfigValues">
            <summary>
            Saves the configuration values of connection drivers to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.UpdateConfig(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig,TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig)">
            <summary>
            Helper method to update existing config.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.CreateFileExtensionString">
            <summary>
            Creates a string representing file extensions.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.ReadWorkFlows(System.String)">
            <summary>
            Reads workflow data from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveWorkFlows(System.String)">
            <summary>
            Saves workflows to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveReportsValues">
            <summary>
            Saves the values of the reports list to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.LoadReportsValues">
            <summary>
            Loads the values of reports from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveReportDefinitionsValues">
            <summary>
            Saves the values of report definitions to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.LoadReportsDefinitionValues">
            <summary>
            Loads the values of the reports definition from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveAIScriptsValues">
            <summary>
            Saves the values of AI scripts to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.LoadAIScriptsValues">
            <summary>
            Loads the values of AI scripts from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.ReadProjects">
            <summary>
            Reads projects from JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveProjects">
            <summary>
            Saves projects to JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.AddFolderCategory(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a folder category to the collection.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.RemoveFolderCategory(System.String,System.String,System.String)">
            <summary>
            Removes a folder category.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.LoadCategoryFoldersValues">
            <summary>
            Loads category folders from JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ComponentConfigManager.SaveCategoryFoldersValues">
            <summary>
            Saves category folders to JSON file.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager">
            <summary>
            Manages configuration paths with cross-platform compatibility
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.ResolveCrossPlatformPath(System.String,System.String)">
            <summary>
            Resolves the configuration path in a cross-platform compatible manner.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.GetDefaultApplicationDataPath">
            <summary>
            Gets the platform-appropriate application data directory.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.GetAssemblyLocationFallback">
            <summary>
            Attempts to get a path based on assembly location as a last resort.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.HasWriteAccess(System.String)">
            <summary>
            Checks if the current process has write access to the specified directory.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.SanitizeFolderName(System.String)">
            <summary>
            Sanitizes folder names for cross-platform compatibility.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.CreateDir(System.String)">
            <summary>
            Creates a directory at the specified path if it doesn't already exist.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.ConfigPathManager.CreateDirConfig(System.String,TheTechIdea.Beep.Utilities.FolderFileTypes,TheTechIdea.Beep.ConfigUtil.ConfigandSettings)">
            <summary>
            Creates a directory configuration.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager">
            <summary>
            Manages data connections persistence and operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.DataConnectionExist(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Checks if a data connection exists.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.DataConnectionExist(System.String)">
            <summary>
            Checks if a data connection with the specified name exists.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.DataConnectionGuidExist(System.String)">
            <summary>
            Checks if a data connection with the specified GUID exists.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.AddDataConnection(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Adds a data connection to the list.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.UpdateDataConnection(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,System.String)">
            <summary>
            Updates an existing data connection.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.RemoveDataConnection(System.String)">
            <summary>
            Removes a connection by name.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.RemoveConnByGuidID(System.String)">
            <summary>
            Removes a connection by GUID.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.RemoveConnByID(System.Int32)">
            <summary>
            Removes a connection by ID.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.RemoveConnByName(System.String)">
            <summary>
            Removes a connection by name (simple version).
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.SaveDataConnectionsValues">
            <summary>
            Saves data connections to JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.LoadDataConnectionsValues">
            <summary>
            Loads data connections from JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.DataConnectionManager.CopyConnectionProperties(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Copies properties from source to target connection.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager">
            <summary>
            Manages entity structures and mapping operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.EntityStructureExist(System.String,System.String,System.String)">
            <summary>
            Checks if the entity structure file exists.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.SaveEntityStructure(System.String,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Saves the structure of an entity to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.LoadEntityStructure(System.String,System.String,System.String)">
            <summary>
            Loads an entity structure from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.LoadDataSourceEntitiesValues(System.String)">
            <summary>
            Loads the values of a data source's entities from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.SaveDataSourceEntitiesValues(TheTechIdea.Beep.ConfigUtil.DatasourceEntities)">
            <summary>
            Saves the values of a DataSourceEntities object to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.RemoveDataSourceEntitiesValues(System.String)">
            <summary>
            Removes the values of a data source's entities.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.SaveMappingSchemaValue(System.String,TheTechIdea.Beep.Workflow.Map_Schema)">
            <summary>
            Saves a mapping schema value to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.LoadMappingSchema(System.String)">
            <summary>
            Loads a mapping schema from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.SaveMappingValues(System.String,System.String,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap)">
            <summary>
            Saves the mapping values for a specific entity.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.LoadMappingValues(System.String,System.String)">
            <summary>
            Loads the mapping values for a given entity from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.LoadTablesEntities">
            <summary>
            Loads the entities and their structures from a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.SaveTablesEntities(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>
            Saves the table entities to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.WriteDataTypeFile(System.Collections.Generic.List{TheTechIdea.Beep.DriversConfigurations.DatatypeMapping},System.String)">
            <summary>
            Writes the data type mapping to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.EntityMappingManager.ReadDataTypeFile(System.String)">
            <summary>
            Reads a JSON file containing datatype mappings and returns a list of DatatypeMapping objects.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager">
            <summary>
            Manages SQL queries and query repositories with enhanced capabilities through RDBMSHelper integration
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetSql(TheTechIdea.Beep.Utilities.Sqlcommandtype,System.String,System.String,System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Generates a SQL query based on the specified parameters using RDBMSHelper for enhanced query generation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetSqlList(TheTechIdea.Beep.Utilities.Sqlcommandtype,System.String,System.String,System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Retrieves a list of SQL queries based on the specified parameters.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetSqlFromCustomQuery(TheTechIdea.Beep.Utilities.Sqlcommandtype,System.String,System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets the SQL statement from a custom query.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetSchemaOrDatabasesQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Gets the query for fetching schemas or databases that the specified user has access to using RDBMSHelper
            </summary>
            <param name="databaseType">The type of database system</param>
            <param name="userName">The username to check privileges for</param>
            <returns>A SQL query string to retrieve accessible schemas or databases</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetSchemaOrDatabasesQuerySafe(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Boolean)">
            <summary>
            Gets the query for fetching schemas or databases with built-in error handling using RDBMSHelper
            </summary>
            <param name="databaseType">The type of database system</param>
            <param name="userName">The username to check privileges for</param>
            <param name="throwOnError">Whether to throw exceptions for errors</param>
            <returns>A tuple containing the query string and success information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.ValidateSchemaQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Validates a database schema query using RDBMSHelper
            </summary>
            <param name="databaseType">Database type for the query</param>
            <param name="userName">Username used in the query</param>
            <param name="query">The query string to validate</param>
            <returns>A QueryValidationResult containing validation status and details</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GeneratePrimaryKeyQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates a SQL query to add a primary key to a table using RDBMSHelper
            </summary>
            <param name="databaseType">The type of RDBMS</param>
            <param name="tableName">The name of the table</param>
            <param name="primaryKey">The name of the primary key column</param>
            <param name="type">The data type of the primary key column</param>
            <returns>A SQL query to add a primary key</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateNextSequenceValueQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates a query to fetch the next value from a sequence using RDBMSHelper
            </summary>
            <param name="databaseType">The type of the database</param>
            <param name="sequenceName">The name of the sequence</param>
            <returns>A query string to fetch the next value from the sequence</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateLastIdentityQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates a query to fetch the last inserted identity value using RDBMSHelper
            </summary>
            <param name="databaseType">The type of RDBMS</param>
            <param name="sequenceName">The name of the sequence or generator</param>
            <returns>A query string to fetch the last inserted identity value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetPagingSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.Int32,System.Int32)">
            <summary>
            Gets the SQL syntax for paging results using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="pageNumber">Page number (1-based)</param>
            <param name="pageSize">Number of records per page</param>
            <returns>SQL paging syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetDropEntityQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates SQL to drop an entity using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="entityName">Name of the entity to drop</param>
            <returns>SQL statement to drop the entity</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateCreateIndexQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a query to create an index using RDBMSHelper
            </summary>
            <param name="databaseType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="indexName">Name of the index</param>
            <param name="columns">Array of column names</param>
            <param name="options">Optional index creation options</param>
            <returns>SQL statement to create the index</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetTransactionStatement(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.TransactionOperation)">
            <summary>
            Generates SQL statements for transaction operations using RDBMSHelper
            </summary>
            <param name="databaseType">Database type</param>
            <param name="operation">Transaction operation (Begin, Commit, Rollback)</param>
            <returns>SQL statement for the transaction operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.SafeQuoteValue(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Safely quotes a value for SQL queries using RDBMSHelper
            </summary>
            <param name="value">Value to quote</param>
            <param name="dataSourceType">Database type</param>
            <returns>Safely quoted value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.SupportsFeature(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.DatabaseFeature)">
            <summary>
            Determines if the database type supports specific features using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="feature">Feature to check</param>
            <returns>True if the feature is supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateCreateTableSQL(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates SQL to create a table based on an EntityStructure using RDBMSHelper
            </summary>
            <param name="entity">The EntityStructure containing entity definition</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateInsertSQL(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to insert records into an entity using RDBMSHelper
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="fieldValues">Dictionary containing field values to insert</param>
            <returns>A tuple containing the SQL statement, parameters, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateUpdateSQL(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to update records in an entity using RDBMSHelper
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="fieldValues">Dictionary containing field values to update</param>
            <param name="whereValues">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateUpdateSQLInternal(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Internal method to generate update SQL
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GenerateDeleteSQL(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to delete records from an entity using RDBMSHelper
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="whereValues">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates an entity structure using RDBMSHelper
            </summary>
            <param name="entity">The EntityStructure to validate</param>
            <returns>Validation result with errors if any were found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.InitQueryList">
            <summary>
            Initializes the query list with enhanced queries from RDBMSHelper.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.MergeRDBMSHelperQueries">
            <summary>
            Merges additional queries from RDBMSHelper into the current QueryList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.SaveQueryFile">
            <summary>
            Saves the query list to a JSON file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.LoadQueryFile">
            <summary>
            Loads a query file and returns a list of QuerySqlRepo objects.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.InitQueryDefaultValues">
            <summary>
            Initializes a list of default query values using RDBMSHelper for comprehensive coverage.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetFallbackQueries">
            <summary>
            Fallback method that returns the original hardcoded queries
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetTableExistsQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to check if a table exists using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table to check</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to check table existence</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetColumnInfoQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to get column information for a table using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to get column information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetRecordCountQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates SQL to get the count of records in a table using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <param name="whereClause">Optional WHERE clause</param>
            <returns>SQL statement to count records</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.Managers.QueryManager.GetTruncateTableQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to truncate a table using RDBMSHelper
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table to truncate</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to truncate the table</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Utilities.DMTypeBuilder">
            <summary>
            A utility class for building and manipulating dynamic types.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Utilities.DMTypeBuilder.DMEEditor">
            <summary>Gets or sets the DMEEditor instance.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Utilities.DMTypeBuilder.typeCache">
            <summary>Caches generated types to improve performance.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Utilities.DMTypeBuilder.DataSourceNameSpace">
            <summary>Maintains namespace mappings for types.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.CreateNewObject(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityField})">
            <summary>
            Creates a new dynamic object based on the specified parameters.
            </summary>
            <param name="editor">The IDMEEditor instance.</param>
            <param name="classNamespace">The namespace for the class.</param>
            <param name="dataSourceName">The data source name to build namespace.</param>
            <param name="typeName">The name of the type.</param>
            <param name="fields">List of fields defining the type structure.</param>
            <returns>A new dynamic object of the generated type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.CreateNewObject(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityField})">
            <summary>
            Creates a new dynamic object based on the specified parameters.
            </summary>
            <param name="editor">The IDMEEditor instance.</param>
            <param name="classNamespace">The namespace for the class. Defaults to "TheTechIdea.Classes" if null.</param>
            <param name="typeName">The name of the type.</param>
            <param name="fields">List of fields defining the type structure.</param>
            <returns>A new dynamic object of the generated type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.GetOrCreateNamespace(System.String,System.String)">
            <summary>Generates or retrieves a namespace for a type.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.CompileResultType(System.String,System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityField})">
            <summary>Compiles a dynamic type with the specified fields.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.GetTypeBuilder(System.String,System.String,System.String)">
            <summary>Defines a dynamic TypeBuilder.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.CreateProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>Creates a property dynamically.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.ConvertPOCOClassToEntity(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>Converts a POCO class definition into an entity class.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.ResolveType(System.String)">
            <summary>Resolves .NET type names into actual `Type` objects.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.SanitizeFieldName(System.String)">
            <summary>Sanitizes field names to ensure they are valid .NET identifiers.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Utilities.DMTypeBuilder.LogError(System.String,System.Exception)">
            <summary>Logs errors safely in a thread-safe manner.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.CSVAnalyser">
            <summary>
            Analyzes CSV files for structure and optimization opportunities
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVAnalyser.AnalyzeCSVFile(System.String,System.Char)">
            <summary>
            Analyzes a CSV file and returns detailed information and suggestions
            </summary>
            <param name="filePath">Path to the CSV file</param>
            <param name="delimiter">CSV delimiter character</param>
            <returns>CSV analysis results</returns>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.CSVAnalysisResult">
            <summary>
            Results of CSV file analysis
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.RowCount">
            <summary>
            Number of rows in the CSV file
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.ColumnCount">
            <summary>
            Number of columns in the CSV file
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.EstimatedSizeKB">
            <summary>
            File size in kilobytes
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.HasInconsistentColumnCount">
            <summary>
            Whether file has rows with inconsistent column counts
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.MaxColumns">
            <summary>
            Maximum number of columns in any row
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.MinColumns">
            <summary>
            Minimum number of columns in any row
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.LargeTextFieldCount">
            <summary>
            Count of very large text fields
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.HasQuotingIssues">
            <summary>
            Whether file has quoting issues
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.Errors">
            <summary>
            List of errors encountered during analysis
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.Suggestions">
            <summary>
            List of suggestions for optimization
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CSVAnalysisResult.ColumnAnalysis">
            <summary>
            Analysis results by column
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.ColumnAnalysis">
            <summary>
            Analysis data for a single column
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.Index">
            <summary>
            Column's position in the CSV file
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.DataType">
            <summary>
            Detected data type
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.NullPercentage">
            <summary>
            Percentage of rows where this column is null
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.MinLength">
            <summary>
            Minimum value length
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.MaxLength">
            <summary>
            Maximum value length
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ColumnAnalysis.UniqueValueCount">
            <summary>
            Number of unique values (capped at 100)
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.ColumnStats">
            <summary>
            Column statistics used during analysis
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.DataType">
            <summary>
            Data types detected in CSV columns
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.Unknown">
            <summary>
            Unknown data type
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.String">
            <summary>
            String data type
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.Integer">
            <summary>
            Integer data type
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.Decimal">
            <summary>
            Decimal data type
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.Boolean">
            <summary>
            Boolean data type
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.FileManager.DataType.DateTime">
            <summary>
            DateTime data type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVDataSource.CreateEntityAs(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Creates a new entity or updates an existing one based on the provided structure.
            If the entity already exists, its fields will be updated (added, removed) to match the new structure.
            </summary>
            <param name="entity">The structure of the entity to create or update</param>
            <returns>True if creation or update is successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Retrieves data from a CSV file with optional filtering
            </summary>
            <param name="EntityName">Name of the entity (CSV file) to query</param>
            <param name="filter">List of filters to apply to the data</param>
            <returns>An ObservableBindingList containing the filtered data</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVDataSource.DetectEncoding(System.String)">
            <summary>
            Sanitizes column names according to configured rules
            </summary>
            <summary>
            Detects file encoding from a CSV file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVDataSource.ValidateRow(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Validates a data row against the entity structure
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVDataSource.GetDataReader(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns a DataReader-like interface for efficiently working with large CSV files
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.CSVTypeMapper">
            <summary>
            Provides type conversion utilities for CSV data
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVTypeMapper.MapToCSVType(System.Type)">
            <summary>
            Maps a .NET type to a CSV field type string
            </summary>
            <param name="dotNetType">The .NET type to map</param>
            <returns>CSV type string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVTypeMapper.MapToNetType(System.String)">
            <summary>
            Maps a CSV field type string to a .NET type
            </summary>
            <param name="csvType">CSV type string</param>
            <returns>.NET type</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVTypeMapper.ConvertValue(System.String,System.Type)">
            <summary>
            Converts a string value to the appropriate .NET type
            </summary>
            <param name="value">String value to convert</param>
            <param name="targetType">Target .NET type</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVTypeMapper.FormatValueForCSV(System.Object,System.Type)">
            <summary>
            Formats a value for CSV output
            </summary>
            <param name="value">The value to format</param>
            <param name="sourceType">The source type</param>
            <returns>Formatted string value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CSVTypeMapper.GetCSharpTypeName(System.String)">
            <summary>
            Returns the appropriate C# type name for a given CSV field type
            </summary>
            <param name="csvType">CSV field type</param>
            <returns>C# type name</returns>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.ICSVDataReader">
            <summary>
            Interface for CSV data reader to provide streaming access to CSV files
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.Read">
            <summary>
            Advances the reader to the next record
            </summary>
            <returns>True if there are more records, false if at the end</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value at the specified column ordinal
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value as an object</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.GetValue(System.String)">
            <summary>
            Gets the value for the specified column name
            </summary>
            <param name="columnName">The column name</param>
            <returns>The value as an object</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.IsDBNull(System.Int32)">
            <summary>
            Determines if the column contains null value
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>True if null, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.IsDBNull(System.String)">
            <summary>
            Determines if the column contains null value
            </summary>
            <param name="columnName">The column name</param>
            <returns>True if null, false otherwise</returns>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.ICSVDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the column at the specified ordinal
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The column name</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.ICSVDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the ordinal of the specified column name
            </summary>
            <param name="name">The column name</param>
            <returns>The zero-based column ordinal</returns>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.CSVDataReader">
            <summary>
            Implementation of CSV data reader for streaming large files
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.IO.Stream)">
            <summary>
            Constructs a parser from the specified input stream.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructs a parser from the specified input stream with the specified encoding.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructs a parser from the specified input stream with the specified encoding and byte order mark detection option.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Constructs a parser from the specified input stream with the specified encoding and byte order mark detection option, and optionally leaves the stream open.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.String)">
            <summary>
            Constructs a parser from the specified input file path.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Constructs a parser from the specified input file path with the specified encoding.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructs a parser from the specified input file path with the specified encoding and byte order mark detection option.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.#ctor(System.IO.TextReader)">
            <summary>
            Constructs a parser from the specified input text reader.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.WriteEntityStructureToFile(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.Object)" -->
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.EndOfData">
            <summary>
            True if there are non-empty lines between the current cursor position and the end of the file.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ReadFields">
            <summary>
            Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.
            </summary>
            <returns>An array of strings that contains field values for the current line, or null if <see cref="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.EndOfData"/> is true.</returns>
            <exception cref="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException">if the parse of the current line failed</exception>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.LineNumber">
            <summary>
            The number of the line that will be returned by <see cref="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ReadFields"/> (starting at 1), or -1 if there are no more lines.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.Close">
            <summary>
            Closes the current <see cref="T:TheTechIdea.Beep.FileManager.CsvTextFieldParser"/> object.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.Dispose">
            <summary>
            Closes and disposes the current <see cref="T:TheTechIdea.Beep.FileManager.CsvTextFieldParser"/> object.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.Dispose(System.Boolean)">
            <summary>
            Disposes of the current <see cref="T:TheTechIdea.Beep.FileManager.CsvTextFieldParser"/> object.
            </summary>
            <param name="disposing">true if called from <see cref="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.Dispose"/>, or false if called from a finalizer</param>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ErrorLine">
            <summary>
            The line that caused the most recent <see cref="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException"/>.
            </summary>
            <remarks>
            If no <see cref="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException"/> exceptions have been thrown, an empty string is returned.
            The <see cref="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ErrorLineNumber"/> property can be used to display the number of the line that caused the exception.
            </remarks>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ErrorLineNumber">
            <summary>
            Returns the number of the line that caused the most recent <see cref="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException"/> exception.
            </summary>
            <remarks>
            If no <see cref="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException"/> exceptions have been thrown, -1 is returned.
            The <see cref="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ErrorLine"/> property can be used to display the number of the line that caused the exception.
            Blank lines and comments are not ignored when determining the line number.
            </remarks>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.CompatibilityMode">
            <summary>
            True if this parser should exactly reproduce the behavior of the <code>Microsoft.VisualBasic.FileIO.TextFieldParser</code>.
            Defaults to <code>false</code>.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.Delimiters">
            <summary>
            Defines the delimiters for a text file.
            Default is a comma.
            </summary>
            <remarks>
            This is defined as an array of strings for compatibility with <code>Microsoft.VisualBasic.FileIO.TextFieldParser</code>,
            but this parser only supports one single-character delimiter.
            </remarks>
            <exception cref="T:System.ArgumentException">A delimiter value is set to a newline character, an empty string, or null.</exception>
            <exception cref="T:System.NotSupportedException">The delimiters are set to an array that does not contain exactly one element with exactly one character.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.SetDelimiter(System.Char)">
            <summary>
            Sets the delimiter character used by this parser.
            Default is a comma.
            </summary>
            <exception cref="T:System.ArgumentException">The delimiter character is set to a newline character.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.SetQuoteCharacter(System.Char)">
            <summary>
            Sets the quote character used by this parser, and also sets the quote escape character to match if it previously matched.
            Default is a double quote character.
            </summary>
            <exception cref="T:System.ArgumentException">The quote character is set to a newline character.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.SetQuoteEscapeCharacter(System.Char)">
            <summary>
            Sets the quote escape character used by this parser.
            Default is the same as the quote character, a double quote character.
            </summary>
            <exception cref="T:System.ArgumentException">The quote escape character is set to a newline character.</exception>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.HasFieldsEnclosedInQuotes">
            <summary>
            Denotes whether fields are enclosed in quotation marks when a CSV file is being parsed.
            Defaults to <code>true</code>.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvTextFieldParser.TrimWhiteSpace">
            <summary>
            Indicates whether leading and trailing white space should be trimmed from field values.
            Defaults to <code>false</code>.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.CsvMalformedLineException">
            <summary>
            An exception that is thrown when the <see cref="M:TheTechIdea.Beep.FileManager.CsvTextFieldParser.ReadFields"/> method cannot parse a row using the specified format.
            </summary>
            <remarks>
            Based on <code>Microsoft.VisualBasic.FileIO.MalformedLineException.MalformedLineException</code>.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvMalformedLineException.#ctor(System.String,System.Int64)">
            <summary>
            Constructs an exception with a specified message and a line number.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.CsvMalformedLineException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
            Constructs an exception with a specified message, a line number, and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.CsvMalformedLineException.LineNumber">
            <summary>
            The line number of the malformed line.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.DataView.DataViewConnection">
            <summary>
            Represents a connection to a data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.InMemory">
            <summary>
            Gets or sets a value indicating whether the connection is in memory.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.ConnectionProp">
            <summary>Gets or sets the connection properties.</summary>
            <value>The connection properties.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.DataSourceDriver">
            <summary>Gets or sets the configuration for the data source driver.</summary>
            <value>The configuration for the data source driver.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.ConnectionStatus">
            <summary>Gets or sets the current connection status.</summary>
            <value>The current connection status.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.DMEEditor">
            <summary>Gets or sets the DME editor.</summary>
            <value>The DME editor.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.ID">
            <summary>Gets or sets the ID.</summary>
            <value>The ID.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.GuidID">
            <summary>Gets or sets the GUID ID.</summary>
            <value>The GUID ID.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.Logger">
            <summary>Gets or sets the logger for the current object.</summary>
            <value>The logger.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.ErrorObject">
            <summary>Gets or sets the error object.</summary>
            <value>The error object.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewConnection.DbConn">
            <summary>Gets or sets the database connection.</summary>
            <value>The database connection.</value>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.OpenConnection">
            <summary>Opens a connection to a database.</summary>
            <returns>The state of the connection after opening.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.ReplaceValueFromConnectionString">
            <summary>Replaces a specific value in a connection string.</summary>
            <returns>The modified connection string.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.OpenConn">
            <summary>Opens a connection to the database.</summary>
            <returns>The connection state after opening the connection.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.OpenConnection(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>Opens a connection to a database.</summary>
            <param name="dbtype">The type of the database.</param>
            <param name="host">The host name or IP address of the database server.</param>
            <param name="port">The port number of the database server.</param>
            <param name="database">The name of the database.</param>
            <param name="userid">The user ID for authentication.</param>
            <param name="password">The password for authentication.</param>
            <param name="parameters">Additional parameters for the connection.</param>
            <returns>The connection state after opening the connection.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.OpenConnection(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>Opens a connection to a database.</summary>
            <param name="dbtype">The type of the database.</param>
            <param name="connectionstring">The connection string for the database.</param>
            <returns>The state of the connection.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewConnection.CloseConn">
            <summary>Closes the connection to the database.</summary>
            <returns>The current state of the connection after closing.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.DataView.DataViewDataSource">
            <summary>
            Represents a data source for a data view.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.DataView.DataViewDataSource.PassEvent">
            <summary>
            Event that is raised when a specific event is passed.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.DatasourceType">
            <summary>Gets or sets the type of the data source.</summary>
            <value>The type of the data source.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Category">
            <summary>Gets or sets the category of the datasource.</summary>
            <value>The category of the datasource.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Dataconnection">
            <summary>Gets or sets the data connection.</summary>
            <value>The data connection.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.DatasourceName">
            <summary>Gets or sets the name of the data source.</summary>
            <value>The name of the data source.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ErrorObject">
            <summary>Gets or sets the error object.</summary>
            <value>The error object.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Id">
            <summary>Gets or sets the ID.</summary>
            <value>The ID.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ID">
            <summary>Gets or sets the ID.</summary>
            <value>The ID.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.GuidID">
            <summary>Gets or sets the GUID ID.</summary>
            <value>The GUID ID.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Logger">
            <summary>Gets or sets the logger for the current object.</summary>
            <value>The logger.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.EntitiesNames">
            <summary>Gets or sets the list of entity names.</summary>
            <value>The list of entity names.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.DMEEditor">
            <summary>Gets or sets the DME editor.</summary>
            <value>The DME editor.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ConnectionStatus">
            <summary>Gets or sets the current connection status.</summary>
            <value>The current connection status.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.SourceEntityData">
            <summary>Gets or sets the source entity data.</summary>
            <value>The source entity data.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.DataView">
            <summary>Gets or sets the data view for the IDM.</summary>
            <value>The data view for the IDM.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ColumnDelimiter">
            <summary>Gets or sets the column delimiter used in data processing.</summary>
            <value>The column delimiter.</value>
            <remarks>The default value is "''".</remarks>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ParameterDelimiter">
            <summary>Gets or sets the delimiter used for separating parameters.</summary>
            <value>The parameter delimiter.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Entities">
            <summary>Gets or sets the list of entity structures.</summary>
            <value>The list of entity structures.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ViewName">
            <summary>Gets or sets the name of the view.</summary>
            <value>The name of the view.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.ViewID">
            <summary>Gets or sets the ID of the view.</summary>
            <value>The ID of the view.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Viewtype">
            <summary>The type of view.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.Editable">
            <summary>Gets or sets a value indicating whether the object is editable.</summary>
            <value><c>true</c> if the object is editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.EntityDataSourceID">
            <summary>Gets or sets the ID of the entity data source.</summary>
            <value>The ID of the entity data source.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.CompositeLayerDataSourceID">
            <summary>Gets or sets the ID of the composite layer data source.</summary>
            <value>The ID of the composite layer data source.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.DataViewDataSourceID">
            <summary>Gets or sets the ID of the data source for the DataView.</summary>
            <value>The ID of the data source.</value>
        </member>
        <member name="P:TheTechIdea.Beep.DataView.DataViewDataSource.VID">
            <summary>The Vendor ID (VID) of a device.</summary>
            <remarks>
            The Vendor ID (VID) is a unique identifier assigned to a device manufacturer by the USB Implementers Forum (USB-IF).
            It is used to identify the manufacturer of a USB device.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.#ctor(System.String,TheTechIdea.Beep.Logger.IDMLogger,TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.ConfigUtil.IErrorsInfo)">
            <summary>
            Initializes a new instance of the DataViewDataSource class.
            </summary>
            <param name="datasourcename">The name of the data source.</param>
            <param name="logger">The logger object used for logging.</param>
            <param name="pDMEEditor">The DME editor object.</param>
            <param name="pDatasourceType">The type of the data source.</param>
            <param name="per">The error information object.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.BeginTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Begins a transaction with the specified arguments.
            </summary>
            <param name="args">The arguments passed to the transaction.</param>
            <returns>An object that provides information about any errors that occurred during the transaction.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.EndTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>Ends a transaction and returns information about any errors that occurred.</summary>
            <param name="args">The arguments passed to the transaction.</param>
            <returns>An object containing information about any errors that occurred during the transaction.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.Commit(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>Commits the changes made with the provided arguments.</summary>
            <param name="args">The arguments containing the changes to be committed.</param>
            <returns>An object implementing the IErrorsInfo interface that provides information about any errors that occurred during the commit process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntitesList">
            <summary>Returns a list of entities.</summary>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetScalarAsync(System.String)">
            <summary>Retrieves a scalar value asynchronously based on the provided query.</summary>
            <param name="query">The query used to retrieve the scalar value.</param>
            <returns>A task representing the asynchronous operation. The task result is the scalar value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetScalar(System.String)">
            <summary>Gets the scalar value from a given query.</summary>
            <param name="query">The query to retrieve the scalar value.</param>
            <returns>The scalar value obtained from the query.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>Retrieves an entity based on the specified entity name and filter.</summary>
            <param name="EntityName">The name of the entity to retrieve.</param>
            <param name="filter">A list of filters to apply to the entity.</param>
            <returns>The retrieved entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter},System.Int32,System.Int32)">
            <summary>Retrieves an entity based on the specified entity name and filter.</summary>
            <param name="EntityName">The name of the entity to retrieve.</param>
            <param name="filter">A list of filters to apply to the entity.</param>
            <returns>The retrieved entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.EntityListIndex(System.Int32)">
            <summary>Returns the index of an entity in the entity list.</summary>
            <param name="entityid">The ID of the entity.</param>
            <returns>The index of the entity in the entity list.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.EntityListIndex(System.String)">
            <summary>Returns the index of an entity in the entity list.</summary>
            <param name="entityname">The name of the entity.</param>
            <returns>The index of the entity in the entity list.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityStructure(System.String,System.Boolean)">
            <summary>Retrieves the structure of an entity.</summary>
            <param name="EntityName">The name of the entity.</param>
            <param name="refresh">Optional. Specifies whether to refresh the structure. Default is false.</param>
            <returns>The structure of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityType(System.String)">
            <summary>Gets the type of an entity based on its name.</summary>
            <param name="entityname">The name of the entity.</param>
            <returns>The type of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetChildTablesList(System.String,System.String,System.String)">
            <summary>Retrieves a list of child tables for a given parent table.</summary>
            <param name="tablename">The name of the parent table.</param>
            <param name="SchemaName">The name of the schema containing the parent table.</param>
            <param name="Filterparamters">Additional filter parameters to refine the search.</param>
            <returns>A list of ChildRelation objects representing the child tables.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityforeignkeys(System.String,System.String)">
            <summary>Retrieves the foreign keys of an entity.</summary>
            <param name="entityname">The name of the entity.</param>
            <param name="SchemaName">The name of the schema.</param>
            <returns>A list of RelationShipKeys representing the foreign keys of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.ExecuteSql(System.String)">
            <summary>Executes the given SQL statement.</summary>
            <param name="sql">The SQL statement to execute.</param>
            <returns>An object containing information about any errors that occurred during execution.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.CreateEntityAs(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Creates an entity using the provided entity structure.</summary>
            <param name="entity">The structure of the entity to be created.</param>
            <returns>True if the entity was successfully created, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.CheckEntityExist(System.String)">
            <summary>Checks if an entity with the given name exists.</summary>
            <param name="entityname">The name of the entity to check.</param>
            <returns>True if the entity exists, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetDataSourceObject(System.String)">
            <summary>Gets the data source object for a given entity name.</summary>
            <param name="entityname">The name of the entity.</param>
            <returns>The data source object associated with the given entity name.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.Openconnection">
            <summary>Opens a connection to a database.</summary>
            <returns>The state of the connection.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.Closeconnection">
            <summary>Closes the connection and returns the current state of the connection.</summary>
            <returns>The current state of the connection after closing.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.RunQuery(System.String)">
            <summary>Executes a query and returns the result.</summary>
            <param name="qrystr">The query string to execute.</param>
            <returns>The result of the query execution.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.UpdateEntities(System.String,System.Object,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>Updates entities in the system.</summary>
            <param name="EntityName">The name of the entity to update.</param>
            <param name="UploadData">The data to upload for updating the entities.</param>
            <param name="progress">An object used to report progress during the update process.</param>
            <returns>An object containing information about any errors that occurred during the update.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.UpdateEntity(System.String,System.Object)">
            <summary>Updates an entity with the provided data.</summary>
            <param name="EntityName">The name of the entity to update.</param>
            <param name="UploadDataRow">The data to update the entity with.</param>
            <returns>An object containing information about any errors that occurred during the update.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.DeleteEntity(System.String,System.Object)">
            <summary>Deletes an entity from the specified entity name and data row.</summary>
            <param name="EntityName">The name of the entity to delete.</param>
            <param name="DeletedDataRow">The data row representing the entity to delete.</param>
            <returns>An object containing information about any errors that occurred during the deletion process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure,System.Boolean)">
            <summary>Gets the structure of an entity.</summary>
            <param name="fnd">The entity structure to retrieve.</param>
            <param name="refresh">Optional. Specifies whether to refresh the entity structure.</param>
            <returns>The structure of the specified entity.</returns>
            <remarks>
            If the entity structure is of type Table, it retrieves the entity structure from the data source object.
            If the entity structure is of type Query, Code, File, or Url, it returns the entity structure from the Entities collection.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.RunScript(TheTechIdea.Beep.Editor.ETLScriptDet)">
            <summary>Runs an ETL script.</summary>
            <param name="dDLScripts">The ETL script to run.</param>
            <returns>An object containing information about any errors that occurred during script execution.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.CreateEntities(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>Creates entities based on the provided list of entity structures.</summary>
            <param name="entities">A list of entity structures.</param>
            <returns>An object that contains information about any errors that occurred during the creation process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetCreateEntityScript(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>Generates a list of ETL script details for creating entities.</summary>
            <param name="entities">Optional. A list of entity structures. If provided, the script details will be generated for these entities only. If not provided, script details will be generated for all entities.</param>
            <returns>A list of ETL script details for creating entities.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.InsertEntity(System.String,System.Object)">
            <summary>Inserts an entity into the database.</summary>
            <param name="EntityName">The name of the entity.</param>
            <param name="InsertedData">The data to be inserted.</param>
            <returns>An object containing information about any errors that occurred during the insertion process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityAsync(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>Retrieves an entity asynchronously.</summary>
            <param name="EntityName">The name of the entity to retrieve.</param>
            <param name="Filter">A list of filters to apply to the entity.</param>
            <returns>A task representing the asynchronous operation. The result is the retrieved entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.RemoveEntity(System.Int32)">
            <summary>Removes an entity with the specified ID.</summary>
            <param name="EntityID">The ID of the entity to remove.</param>
            <returns>An object containing information about any errors that occurred during the removal process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.RemoveChildEntities(System.Int32)">
            <summary>Removes child entities associated with a parent entity.</summary>
            <param name="EntityID">The ID of the parent entity.</param>
            <returns>An object containing information about any errors that occurred during the removal process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GenerateViewFromTable(System.String,TheTechIdea.Beep.IDataSource,System.String,System.String,System.String)">
            <summary>
            Generates a view from a table using the specified parameters.
            </summary>
            <param name="viewname">The name of the view to be generated.</param>
            <param name="SourceConnection">The data source connection object.</param>
            <param name="tablename">The name of the table to generate the view from.</param>
            <param name="SchemaName">The name of the schema containing the table.</param>
            <param name="Filterparamters">The filter parameters to be applied to the view.</param>
            <returns>The number of rows affected by the view generation process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GenerateDataView(TheTechIdea.Beep.IDataSource,System.String,System.String,System.String)">
            <summary>
            Generates a data view based on the provided data source, table name, schema name, and filter parameters.
            </summary>
            <param name="conn">The data source to generate the data view from.</param>
            <param name="tablename">The name of the table to generate the data view for.</param>
            <param name="SchemaName">The name of the schema to generate the data view for.</param>
            <param name="Filterparamters">The filter parameters to apply to the data view.</param>
            <returns>An integer representing the result of the data view generation.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GenerateView(System.String,System.String)">
            <summary>Generates a data view based on the specified view name and connection name.</summary>
            <param name="ViewName">The name of the view.</param>
            <param name="ConnectionName">The name of the connection.</param>
            <returns>The generated data view.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GenerateDataViewForChildNode(TheTechIdea.Beep.IDataSource,System.Int32,System.String,System.String,System.String)">
            <summary>
            Generates a data view for a child node based on the provided parameters.
            </summary>
            <param name="conn">The data source connection.</param>
            <param name="pid">The parent ID.</param>
            <param name="tablename">The name of the table.</param>
            <param name="SchemaName">The name of the schema.</param>
            <param name="Filterparamters">The filter parameters.</param>
            <returns>An object representing the generated data view.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.AddEntityAsChild(TheTechIdea.Beep.IDataSource,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds an entity as a child to a specified parent table.</summary>
            <param name="conn">The data source connection.</param>
            <param name="tablename">The name of the table to add the entity to.</param>
            <param name="SchemaName">The schema name of the table.</param>
            <param name="Filterparamters">The filter parameters to apply.</param>
            <param name="viewindex">The index of the view.</param>
            <param name="ParentTableIndex">The index of the parent table.</param>
            <returns>The index of the added entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.AddEntitytoDataView(TheTechIdea.Beep.IDataSource,System.String,System.String,System.String)">
            <summary>Adds an entity to a data view.</summary>
            <param name="conn">The data source connection.</param>
            <param name="tablename">The name of the table.</param>
            <param name="SchemaName">The name of the schema.</param>
            <param name="Filterparamters">The filter parameters.</param>
            <returns>The number of entities added to the data view.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.AddEntitytoDataView(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Adds an entity to the data view.</summary>
            <param name="maintab">The entity structure to add.</param>
            <returns>The index of the added entity in the data view.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GeticonForViewType(TheTechIdea.Beep.Utilities.ViewType)">
            <summary>Returns the icon associated with a specific view type.</summary>
            <param name="v">The view type.</param>
            <returns>The icon associated with the view type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.SetupEntityInView(TheTechIdea.Beep.DataBase.IDMDataView,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Sets up the entity structure in a data view.
            </summary>
            <param name="v">The data view.</param>
            <param name="Rootnamespacelist">The list of root namespaces.</param>
            <param name="childtable">The name of the child table.</param>
            <param name="parenttable">The name of the parent table.</param>
            <param name="childcolumn">The name of the child column.</param>
            <param name="parentcolumn">The name of the parent column.</param>
            <param name="pid">The parent ID.</param>
            <param name="Datasourcename">The name of the data source.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntity(System.String)">
            <summary>Retrieves the structure of an entity.</summary>
            <param name="entityname">The name of the entity.</param>
            <returns>The structure of the specified entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.NextHearId">
            <summary>Generates the next unique hear ID.</summary>
            <returns>An integer representing the next hear ID.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetDataSetForView(System.String)">
            <summary>Retrieves a list of data sets for a given view.</summary>
            <param name="viewname">The name of the view.</param>
            <returns>A list of data sets associated with the specified view.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.CreateTableFromEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Creates a DataTable from an EntityStructure.</summary>
            <param name="e">The EntityStructure object.</param>
            <returns>A DataTable representing the structure of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetChildTablesForDataset(TheTechIdea.Beep.IDataSource,System.Data.DataSet@,TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.Int32)">
            <summary>
            Retrieves the child tables for a given dataset and parent table.
            </summary>
            <param name="ds">The data source.</param>
            <param name="dataset">The dataset to retrieve child tables for.</param>
            <param name="parenttb">The parent table.</param>
            <param name="ls">The list of child tables.</param>
            <param name="parentid">The ID of the parent table.</param>
            <returns>An instance of IErrorsInfo representing the child tables.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.WriteDataViewFile(System.String)">
            <summary>Writes the content of a DataView to a file.</summary>
            <param name="filename">The name of the file to write to.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.WriteDataViewFile(System.String,System.String)">
            <summary>Writes a DataView file to the specified path and filename.</summary>
            <param name="path">The path where the file will be written.</param>
            <param name="filename">The name of the file.</param>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.ReadDataViewFile(System.String)">
            <summary>Reads a data view file from the specified path and filename.</summary>
            <param name="pathandfilename">The path and filename of the data view file.</param>
            <returns>The IDMDataView object representing the data view file.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.LoadView">
            <summary>Loads a view and returns information about any errors that occurred.</summary>
            <returns>An object containing information about any errors that occurred during the view loading process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.DataView.DataViewDataSource.GetEntityIdx(System.String)">
            <summary>Returns the index of the specified entity.</summary>
            <param name="entityName">The name of the entity.</param>
            <returns>The index of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.BatchExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits a collection into batches of a specified size.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="source">The collection to split into batches.</param>
            <param name="batchSize">The size of each batch.</param>
            <returns>An enumerable of batches, where each batch is a collection of items.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.CopyEntityDataAsync(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL,System.Func{System.Object,System.Object},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Copies data from a source entity to a destination entity asynchronously with batch processing and optional parallelism.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.FetchSourceDataAsync(TheTechIdea.Beep.IDataSource,System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches data from the source entity.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.TransformData(System.Object,System.String,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL,System.Func{System.Object,System.Object})">
            <summary>
            Transforms data based on mapping and/or custom transformation logic.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.ParallelInsertDataAsync(TheTechIdea.Beep.IDataSource,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Int32)">
            <summary>
            Inserts data into the destination in parallel batches.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.BatchInsertDataAsync(TheTechIdea.Beep.IDataSource,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Int32)">
            <summary>
            Inserts data into the destination in sequential batches.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLDataCopier.InsertBatchAsync(TheTechIdea.Beep.IDataSource,System.String,System.Collections.Generic.IEnumerable{System.Object},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Int32)">
            <summary>
            Inserts a single batch of data with retries for failed records.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEntityProcessor.ValidateRecords(System.Collections.Generic.IEnumerable{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Validates a list of records against custom rules.
            </summary>
            <param name="records">The list of records to validate.</param>
            <param name="validationRules">The custom validation rules.</param>
            <returns>A tuple containing valid and invalid records.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEntityProcessor.TransformRecords(System.Collections.Generic.IEnumerable{System.Object},TheTechIdea.Beep.Editor.ETL.ETLEntityProcessor.TransformRecordDelegate)">
            <summary>
            Transforms a list of records using a custom delegate.
            </summary>
            <param name="records">The list of records to transform.</param>
            <param name="transformDelegate">The transformation logic.</param>
            <returns>A list of transformed records.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLEntityProcessor.ProcessRecordsAsync(System.Collections.Generic.IEnumerable{System.Object},System.Func{System.Object,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Processes a batch of records with optional parallelism.
            </summary>
            <param name="records">The records to process.</param>
            <param name="processAction">The processing logic for each record.</param>
            <param name="parallel">Whether to process the records in parallel.</param>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.ETL.ETLValidator">
            <summary>
            Provides validation utilities for ETL scripts, mappings, and entities.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLValidator.ValidateEntityMapping(TheTechIdea.Beep.Workflow.Mapping.EntityDataMap)">
            <summary>
            Validates the EntityDataMap to ensure all required fields and configurations are correct.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLValidator.ValidateMappedEntity(TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)">
            <summary>
            Validates an individual EntityDataMap_DTL to ensure all required mappings are correct.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLValidator.ValidateEntityConsistency(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String)">
            <summary>
            Validates entity consistency between source and destination fields.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETL.ETLValidator.CheckIfMappingEntityExists(TheTechIdea.Beep.Workflow.Mapping.EntityDataMap,System.String)">
            <summary>
            Validates if a specific mapping entity exists.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.GetRecordsFromSourceData(TheTechIdea.Beep.Editor.DataSyncSchema,System.String)">
            <summary>
            Retrieves records from the source data based on the schema's LastSyncDate and the specified filter operator.
            </summary>
            <param name="schema">The DataSyncSchema defining the synchronization process.</param>
            <param name="filterOperator">The filter operator to use for comparing the LastSyncDate.</param>
            <returns>A collection of records from the source data.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.GetNewRecordsFromSourceData(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Retrieves new records from the source data based on the schema's LastSyncDate.
            </summary>
            <param name="schema">The DataSyncSchema defining the synchronization process.</param>
            <returns>A collection of new records from the source data.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.GetUpdatedRecordsFromSourceData(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Retrieves updated records from the source data based on the schema's LastSyncDate.
            </summary>
            <param name="schema">The DataSyncSchema defining the synchronization process.</param>
            <returns>A collection of updated records from the source data.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.SyncDataAsync(TheTechIdea.Beep.Editor.DataSyncSchema,System.Threading.CancellationToken,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Asynchronously synchronizes data based on the provided schema, cancellation token, and progress reporter.
            </summary>
            <param name="schema">The DataSyncSchema defining the synchronization process.</param>
            <param name="token">Cancellation token to handle task cancellation.</param>
            <param name="progress">Progress reporter to report synchronization progress.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.CreateDestinationEntity(TheTechIdea.Beep.Editor.DataSyncSchema,System.Object,System.Boolean)">
            <summary>
            Creates the destination entity by mapping fields from the source entity based on the schema.
            </summary>
            <param name="schema">The DataSyncSchema defining the synchronization process.</param>
            <param name="sourceData">The source data entity.</param>
            <param name="isNewRecord">Indicates whether the record is new or an update.</param>
            <returns>The mapped destination entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.LogSyncRun(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Logs the synchronization run data.
            </summary>
            <param name="schema">The DataSyncSchema defining the synchronization process.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.GetDataSource(System.String)">
            <summary>
            Retrieves the IDataSource instance based on the name.
            </summary>
            <param name="dataSourceName">The name of the data source.</param>
            <returns>The IDataSource instance.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.SyncAllDataAsync(System.Threading.CancellationToken,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Asynchronously synchronizes all data based on the loaded schemas, cancellation token, and progress reporter.
            </summary>
            <param name="token">Cancellation token to handle task cancellation.</param>
            <param name="progress">Progress reporter to report synchronization progress.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.SyncAllData">
            <summary>
            Synchronizes all data based on the loaded schemas.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.SyncData(TheTechIdea.Beep.Editor.DataSyncSchema,System.Threading.CancellationToken,System.Progress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Synchronizes data based on the provided schema, cancellation token, and progress reporter.
            </summary>
            <param name="schema">The DataSyncSchema defining the synchronization process.</param>
            <param name="token">Cancellation token to handle task cancellation.</param>
            <param name="progress">Progress reporter to report synchronization progress.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.SyncData(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Synchronizes data based on the provided schema.
            </summary>
            <param name="schema">The DataSyncSchema defining the synchronization process.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.UpdateDataSourceUsingUpdateLog(System.Collections.Generic.Dictionary{System.DateTime,TheTechIdea.Beep.Editor.EntityUpdateInsertLog},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Synchronizes changes from the update log to the destination data source.
            </summary>
            <param name="sourceList">The source ObservableBindingList containing the changes.</param>
            <param name="destinationDataSource">The destination IDataSource to apply the changes to.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.ValidateSchema(TheTechIdea.Beep.Editor.DataSyncSchema)">
            <summary>
            Validates the provided schema to ensure all required fields are populated.
            </summary>
            <param name="schema">The DataSyncSchema to validate.</param>
            <returns>An IErrorsInfo object containing validation results.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DataSyncManager.SendMessege(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.String)">
            <summary>Sends a message and updates progress based on the result.</summary>
            <param name="progress">An object that reports progress updates.</param>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <param name="refentity">An optional reference to an entity structure.</param>
            <param name="sc">An optional ETL script detail.</param>
            <param name="messege">An optional message to send.</param>
            <remarks>
            If the error flag is set to "Failed" in the DMEEditor.ErrorObject, a SyncErrorsandTracking object is created and the error count is incremented.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DefaultsManager.GetDefaults(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Retrieves the default values for a specified data source.
            </summary>
            <param name="dataSourceName">The name of the data source.</param>
            <returns>A list of DefaultValue objects.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DefaultsManager.ResolveDefaultValue(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.ConfigUtil.DefaultValue,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Resolves the default value for a specific DefaultValue object.
            </summary>
            <param name="defaultValue">The DefaultValue object containing the rule or static value.</param>
            <param name="parameters">The parameters to pass to the rule, if applicable.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DefaultsManager.ResolveDefaultValue(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Resolves the default value for a given data source and field name.
            </summary>
            <param name="dataSourceName">The name of the data source.</param>
            <param name="fieldName">The name of the field to find the default for.</param>
            <param name="parameters">The parameters to pass to the rule, if applicable.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DefaultsManager.SaveDefaults(TheTechIdea.Beep.Editor.IDMEEditor,System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.DefaultValue},System.String)">
            <summary>
            Saves the default values for a specified data source.
            </summary>
            <param name="defaults">The default values to save.</param>
            <param name="dataSourceName">The name of the data source.</param>
            <returns>Error information.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.ETLEditor">
            <summary>
            Represents an Extract, Transform, Load (ETL) process.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes a new instance of the ETL class.
            </summary>
            <param name="_DMEEditor">The DME editor to use for the ETL process.</param>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.ETLEditor.PassEvent">
            <summary>
            Event that is raised when a process is passed.
            </summary>
            
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETLEditor.DMEEditor">
            <summary>Gets or sets the DMEEditor instance.</summary>
            <value>The DMEEditor instance.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETLEditor.RulesEngine">
            <summary>Gets or sets the rules editor.</summary>
            <value>The rules editor.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETLEditor.Passedargs">
            <summary>Gets or sets the PassedArgs object.</summary>
            <value>The PassedArgs object.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETLEditor.ScriptCount">
            <summary>Gets or sets the count of scripts.</summary>
            <value>The count of scripts.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETLEditor.CurrentScriptRecord">
            <summary>Gets or sets the current script record.</summary>
            <value>The current script record.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETLEditor.StopErrorCount">
            <summary>Gets or sets the stop error count.</summary>
            <value>The stop error count.</value>
            <remarks>
            The stop error count determines the maximum number of errors allowed before a process is stopped.
            The default value is 10.
            </remarks>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETLEditor.LoadDataLogs">
            <summary>Gets or sets the list of loaded data logs.</summary>
            <value>The list of loaded data logs.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.ETLEditor.Script">
            <summary>Gets or sets the ETL script for HDR processing.</summary>
            <value>The ETL script for HDR processing.</value>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.CreateScriptHeader(TheTechIdea.Beep.IDataSource,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>Creates the header of an ETL script.</summary>
            <param name="Srcds">The data source object.</param>
            <param name="progress">The progress object to report progress.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when Srcds is null.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.GetCreateEntityScript(TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{System.String},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean)">
            <summary>Generates a list of ETL script details for creating entities from a data source.</summary>
            <param name="ds">The data source to retrieve entities from.</param>
            <param name="entities">The list of entities to create scripts for.</param>
            <param name="progress">An object to report progress during the script generation.</param>
            <param name="token">A cancellation token to cancel the script generation.</param>
            <returns>A list of ETL script details for creating entities.</returns>
            <remarks>If an error occurs during the process, a log message will be added and an empty list will be returned.</remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.GenerateScript(TheTechIdea.Beep.DataBase.EntityStructure,System.String,TheTechIdea.Beep.Editor.DDLScriptType)">
            <summary>Generates an ETL script detail object based on the provided parameters.</summary>
            <param name="item">The entity structure object representing the source entity.</param>
            <param name="destSource">The name of the destination data source.</param>
            <param name="scriptType">The type of DDL script.</param>
            <returns>An ETLScriptDet object representing the generated script.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.GetCreateEntityScript(TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean)">
            <summary>Generates a list of ETL script details for creating entities.</summary>
            <param name="Dest">The destination data source.</param>
            <param name="entities">The list of entity structures.</param>
            <param name="progress">An object for reporting progress.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A list of ETL script details for creating entities.</returns>
            <remarks>
            This method generates ETL script details for creating entities based on the provided destination data source and entity structures.
            It reports progress using the provided progress object and can be cancelled using the cancellation token.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.GetCopyDataEntityScript(TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>Generates a script for copying data entities.</summary>
            <param name="Dest">The destination data source.</param>
            <param name="entities">The list of entity structures.</param>
            <param name="progress">An object to report progress.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A list of ETLScriptDet objects representing the generated script.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETLEditor.CopyEntitiesStructure(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{System.String},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETLEditor.CopyEntityStructure(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETLEditor.CopyDatasourceData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETLEditor.CopyEntitiesData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{System.String},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)" -->
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.CopyEntityData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)">
            <summary>Copies entity data from a source data source to a destination data source.</summary>
            <param name="sourceds">The source data source.</param>
            <param name="destds">The destination data source.</param>
            <param name="srcentity">The name of the source entity.</param>
            <param name="destentity">The name of the destination entity.</param>
            <param name="progress">An object to report progress during the copy operation.</param>
            <param name="token">A cancellation token to cancel the copy operation.</param>
            <param name="CreateMissingEntity">A flag indicating whether to create the destination entity if it doesn't exist.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETLEditor.CopyEntitiesData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.Collections.Generic.List{TheTechIdea.Beep.Editor.ETLScriptDet},System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)" -->
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.RunChildScriptAsync(TheTechIdea.Beep.Editor.ETLScriptDet,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>Runs a child script asynchronously.</summary>
            <param name="ParentScript">The parent script.</param>
            <param name="srcds">The data source for the source.</param>
            <param name="destds">The data source for the destination.</param>
            <param name="progress">The progress object to report progress.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>An object containing information about any errors that occurred during the execution of the child script.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.RunCreateScript(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,System.Boolean)">
            <summary>Runs a create script and updates data.</summary>
            <param name="progress">An object that reports the progress of the operation.</param>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>An object containing information about any errors that occurred during the operation.</returns>
            <remarks>
            This method runs a create script and updates data. It connects to the specified data sources, performs the necessary operations, and reports progress using the provided progress object. If the operation is cancelled using the provided cancellation token, the method will stop and return the current error information.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETLEditor.RunCopyEntityScript(TheTechIdea.Beep.Editor.ETLScriptDet,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETLEditor.LoadETL(System.String)" -->
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.SaveETL(System.String)">
            <summary>Saves the ETL (Extract, Transform, Load) configuration for a given datasource.</summary>
            <param name="DatasourceName">The name of the datasource.</param>
            <returns>An object containing information about any errors that occurred during the save operation.</returns>
            <remarks>
            This method creates a directory for the specified datasource if it doesn't already exist.
            It then saves the ETL configuration as a JSON file in the created directory.
            If any errors occur during the save operation, a log message is added and the error object is returned.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETLEditor.CreateImportScript(TheTechIdea.Beep.Workflow.Mapping.EntityDataMap,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)" -->
        <member name="M:TheTechIdea.Beep.Editor.ETLEditor.RunImportScript(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,System.Boolean)">
            <summary>Runs an import script and returns information about any errors that occurred.</summary>
            <param name="progress">An object that reports the progress of the import script.</param>
            <param name="token">A cancellation token that can be used to cancel the import script.</param>
            <returns>An object containing information about any errors that occurred during the import script.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETLEditor.InsertEntity(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure,System.String,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL,System.Object,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.ETLEditor.SendMessege(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken,TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.Editor.ETLScriptDet,System.String)" -->
        <member name="M:TheTechIdea.Beep.Editor.Sync.SyncManager.StartSyncAllAsync(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Starts synchronization of all schemas asynchronously.
            </summary>
            <param name="progress">Optional progress reporter.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Sync.SyncManager.PauseSync">
            <summary>
            Pauses the synchronization. Any long-running sync operation in progress will pause at the next checkpoint.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Sync.SyncManager.ResumeSync">
            <summary>
            Resumes synchronization if it was previously paused.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.Sync.SyncManager.StopSync">
            <summary>
            Stops the synchronization by canceling the operation.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UnitofWork`1">
            <summary>
            Represents a unit of work for managing entities of type T.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork`1._suppressNotification">
            <summary>Indicates whether notifications should be suppressed.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork`1.tokenSource">
            <summary>A source for creating cancellation tokens.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork`1.token">
            <summary>A token that can be used to request cancellation of an operation.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork`1.IsPrimaryKeyString">
            <summary>Indicates whether the primary key is a string.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork`1.Ivalidated">
            <summary>Indicates whether the object has been validated.</summary>
            <remarks>
            This property is used to track whether the object has been validated or not.
            It is initially set to false and should be set to true after the validation process is completed.
            </remarks>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork`1.IsNewRecord">
            <summary>Indicates whether a new record is being created.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork`1.IsFilterOn">
            <summary>Indicates whether the filter is currently turned on.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWork`1.IsDirty">
            <summary>Gets a value indicating whether the object is dirty.</summary>
            <returns>True if the object is dirty; otherwise, false.</returns>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork`1.Tempunits">
            <summary>A private observable binding list of type T.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork`1._units">
            <summary>The collection of units.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Editor.UnitofWork`1._filteredunits">
            <summary>The filtered units collection.</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWork`1.FilteredUnits">
            <summary>Gets or sets the filtered units.</summary>
            <value>The filtered units.</value>
            <remarks>
            This property represents a collection of units that have been filtered based on certain criteria.
            When setting the value, the property will unsubscribe from the previous collection's PropertyChanged event and CollectionChanged event, if applicable.
            It will then subscribe to the new collection's PropertyChanged event and CollectionChanged event, if applicable.
            </remarks>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWork`1.Units">
            <summary>Gets or sets the collection of units.</summary>
            <value>The collection of units.</value>
            <remarks>
            If the filter is applied, the filtered units collection will be returned.
            Otherwise, the original units collection will be returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.SetUnits(TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>Sets the units collection and raises the PropertyChanged event for the Units property.</summary>
            <param name="value">The new units collection.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.DetachHandlers(TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>Detaches event handlers from the specified collection and its items.</summary>
            <param name="collection">The collection to detach event handlers from.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.AttachHandlers(TheTechIdea.Beep.Editor.ObservableBindingList{`0})">
            <summary>Attaches event handlers to a collection and its items.</summary>
            <param name="collection">The collection to attach event handlers to.</param>
            <remarks>
            This method attaches a PropertyChanged event handler to each item in the collection,
            and a CollectionChanged event handler to the collection itself.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the UnitofWork class.</summary>
            <param name="dMEEditor">The IDMEEditor instance.</param>
            <param name="datasourceName">The name of the data source.</param>
            <param name="entityName">The name of the entity.</param>
            <param name="primaryKey">The primary key.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.UnitofWork`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.UnitofWork`1.#ctor(TheTechIdea.Beep.Editor.IDMEEditor,System.Boolean,TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.String)" -->
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Clear">
            <summary>Clears the data in the collection.</summary>
            <remarks>
            This method clears the data in the collection by performing the following steps:
            1. Sets the <c>IsFilterOn</c> property to <c>false</c>.
            2. Clears the <c>Units</c> collection if it is not null.
            3. Initializes a new instance of the <c>_deletedentities</c> dictionary.
            4. If the collection is not in list mode, sets the <c>EntityType</c> property to the entity type obtained from the data source.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.getPrimaryKey(`0)">
            <summary>Determines the primary key of a document.</summary>
            <typeparam name="T">The type of the document.</typeparam>
            <param name="doc">The document.</param>
            <remarks>
            If the primary key is already set, this method does nothing.
            Otherwise, it attempts to find the primary key property of the document using the provided primary key name.
            If the primary key property is found, it checks if its type is string and sets the IsPrimaryKeyString flag accordingly.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.init">
            <summary>Initializes the object.</summary>
            <remarks>
            This method performs initialization tasks for the object. It first validates all necessary conditions
            using the Validateall() method. If the validation fails, the method returns without performing any further
            initialization. If the validation succeeds, the method proceeds to clear any existing data using the Clear() method.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Units_CurrentChanged(System.Object,System.EventArgs)">
            <summary>Handles the event when the current unit is changed.</summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
            <remarks>
            This method is called when the current unit is changed. It checks if the notification is suppressed and returns if it is.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.SetIDValue(`0,System.Object)">
            <summary>Sets the value of the primary key property for the specified entity.</summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="entity">The entity object.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentException">Thrown when the primary key property is not found on the entity.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.GetIDValue(`0)">
            <summary>Retrieves the value of the primary key property for the specified entity.</summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="entity">The entity object.</param>
            <returns>The value of the primary key property.</returns>
            <remarks>
            If the primary key property is not valid or cannot be retrieved, null is returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Getindex(System.String)">
            <summary>Returns the index of an entity with the specified ID.</summary>
            <param name="id">The ID of the entity.</param>
            <returns>The index of the entity in the collection, or -1 if not found.</returns>
            <remarks>
            This method first validates all entities in the collection using the Validateall() method.
            If validation fails, -1 is returned.
            Otherwise, it searches for an entity with a matching ID using reflection.
            If found, it returns the index of the entity in the collection.
            If not found, -1 is returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Getindex(`0)">
            <summary>Returns the index of the specified entity in the list of units.</summary>
            <param name="entity">The entity to find the index of.</param>
            <returns>The index of the entity in the list of units. Returns -1 if the list is not valid.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.GetLastIdentity">
            <summary>Returns the Last identity of the specified entity in the list of units.</summary>
            <param name="entity">The entity to find the Idnetity of.</param>
            <returns>The Identity of the entity in the list of units. Returns -1 if the list is not valid.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Read(System.String)">
            <summary>Reads an item from a collection based on its ID.</summary>
            <param name="id">The ID of the item to read.</param>
            <returns>The item with the specified ID, or the default value of the item type if the ID is not found or the collection is not valid.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.UpdateAsync(`0)">
            <summary>Updates a document asynchronously.</summary>
            <param name="doc">The document to be updated.</param>
            <returns>An object containing information about any errors that occurred during the update.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.InsertAsync(`0)">
            <summary>Inserts a document asynchronously.</summary>
            <param name="doc">The document to be inserted.</param>
            <returns>An object containing information about any errors that occurred during the insertion process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.DeleteAsync(`0)">
            <summary>Deletes a document asynchronously.</summary>
            <param name="doc">The document to be deleted.</param>
            <returns>An object containing information about any errors that occurred during the deletion process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.InsertDoc(`0)">
            <summary>Inserts a document into the data source.</summary>
            <typeparam name="T">The type of the document.</typeparam>
            <param name="doc">The document to insert.</param>
            <returns>An object containing information about any errors that occurred during the insertion.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.UpdateDoc(`0)">
            <summary>Updates a document and returns information about any errors that occurred.</summary>
            <param name="doc">The document to update.</param>
            <returns>An object containing information about any errors that occurred during the update.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.DeleteDoc(`0)">
            <summary>Deletes a document and returns information about any errors that occurred.</summary>
            <param name="doc">The document to delete.</param>
            <returns>An object containing information about any errors that occurred during the deletion process.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.New">
            <summary>Adds a new entity to the collection and subscribes to its PropertyChanged event.</summary>
            <param name="entity">The entity to be added.</param>
            <remarks>
            This method first validates all entities in the collection using the Validateall method.
            If the validation fails, the method returns without adding the entity.
            Otherwise, the entity is added to the Units collection and the ItemPropertyChangedHandler is subscribed to its PropertyChanged event.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Add(`0)">
            <summary>Adds a new entity to the collection and subscribes to its PropertyChanged event.</summary>
            <param name="entity">The entity to be added.</param>
            <remarks>
            This method first validates all entities in the collection using the Validateall method.
            If the validation fails, the method returns without adding the entity.
            Otherwise, the entity is added to the Units collection and the ItemPropertyChangedHandler is subscribed to its PropertyChanged event.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Delete(System.String)">
            <summary>Deletes an object based on its ID.</summary>
            <param name="id">The ID of the object to delete.</param>
            <returns>An ErrorsInfo object indicating the result of the delete operation.</returns>
            <remarks>
            If the validation fails, the ErrorsInfo object will have a message of "Validation Failed" and a flag of Errors.Failed.
            If the object is found and successfully deleted, the ErrorsInfo object will have a message of "Delete Done" and a flag of Errors.Ok.
            If the object is not found, the ErrorsInfo object will have a message of "Object not found" and a flag of Errors.Failed.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Delete(`0)">
            <summary>Deletes an entity and returns information about the operation.</summary>
            <param name="entity">The entity to delete.</param>
            <returns>An ErrorsInfo object containing information about the delete operation.</returns>
            <remarks>
            If the entity passes validation, it will be deleted and the ErrorsInfo object will have a Flag of Errors.Ok and a Message of "Delete Done".
            If the entity fails validation, the ErrorsInfo object will have a Flag of Errors.Failed and a Message of "Validation Failed".
            If the entity is not found, the ErrorsInfo object will have a Flag of Errors.Failed and a Message of "Object not found".
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Update(`0)">
            <summary>Updates an entity and returns information about the operation.</summary>
            <param name="entity">The entity to be updated.</param>
            <returns>An ErrorsInfo object containing information about the update operation.</returns>
            <remarks>
            If the entity fails validation, the ErrorsInfo object will have a message indicating the failure and a flag set to Errors.Failed.
            If the entity is successfully updated, the ErrorsInfo object will have a message indicating the success and a flag set to Errors.Ok.
            If the entity is not found, the ErrorsInfo object will have a message indicating the failure and a flag set to Errors.Failed.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Update(System.String,`0)">
            <summary>Updates an entity with the specified ID.</summary>
            <param name="id">The ID of the entity to update.</param>
            <param name="entity">The updated entity.</param>
            <returns>An ErrorsInfo object indicating the result of the update operation.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Commit(System.IProgress{TheTechIdea.Beep.Addin.PassedArgs},System.Threading.CancellationToken)">
            <summary>Commits changes and returns information about any errors that occurred.</summary>
            <param name="progress">An object that reports progress during the commit process.</param>
            <param name="token">A cancellation token that can be used to cancel the commit process.</param>
            <returns>An object containing information about any errors that occurred during the commit process.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.UnitofWork`1.Commit" -->
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.GetSeq(System.String)">
            <summary>Gets the next value of a sequence.</summary>
            <param name="SeqName">The name of the sequence.</param>
            <returns>The next value of the sequence.</returns>
            <remarks>
            This method retrieves the next value of a sequence from the data source.
            If the data source is a relational database management system (RDBMS),
            it generates a query to fetch the next sequence value and executes it.
            The method returns -1 if the sequence value cannot be retrieved or if the data source is not an RDBMS.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.GetPrimaryKeySequence(`0)">
            <summary>Gets the primary key sequence for a document.</summary>
            <param name="doc">The document for which to retrieve the primary key sequence.</param>
            <returns>The primary key sequence value.</returns>
            <remarks>
            This method retrieves the primary key sequence for a document. It checks if the data source category is RDBMS
            and if a sequencer is specified. If both conditions are met, it retrieves the sequence value using the specified sequencer.
            If the sequence value is greater than 0, it sets the ID value of the document to the sequence value.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.GetQuery(System.String)">
            <summary>
            Retrieves a list of items based on the specified filters.
            </summary>
            <param name="filters">The list of filters to apply.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the list of items that match the filters.
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Get(System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Retrieves a list of items based on the specified filters.
            </summary>
            <param name="filters">The list of filters to apply.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the list of items that match the filters.
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Get">
            <summary>Retrieves a collection of entities asynchronously.</summary>
            <returns>An observable binding list of entities.</returns>
            <remarks>
            This method retrieves a collection of entities from the data source. If the application is not in list mode,
            it first gets the entity data from the data source and then processes the data in units. If an exception occurs
            during the data processing, a log message is added. Finally, the method returns the observable binding list of entities.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Get(System.Int32)">
            <summary>Retrieves the value associated with the specified key.</summary>
            <param name="key">The key of the value to retrieve.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Get(System.String)">
            <summary>Returns an object of type T based on the provided primary key.</summary>
            <param name="PrimaryKeyid">The value of the primary key.</param>
            <returns>An object of type T that matches the provided primary key, or null if no match is found.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.GetDataInUnits(System.Object)">
            <summary>Converts data to units and updates the internal state.</summary>
            <param name="retval">The data to be converted.</param>
            <returns>True if the conversion was successful, false otherwise.</returns>
            <exception cref="T:System.Exception">Thrown when an error occurs during the conversion.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Editor.UnitofWork`1.FindDocIdx(`0)" -->
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.DocExistByKey(`0)">
            <summary>Checks if a document exists in the collection based on its primary key.</summary>
            <typeparam name="T">The type of document.</typeparam>
            <param name="doc">The document to check.</param>
            <returns>The index of the document in the collection if it exists, otherwise -1.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.DocExist(`0)">
            <summary>Checks if a document exists in the collection and returns its index.</summary>
            <typeparam name="T">The type of document.</typeparam>
            <param name="doc">The document to check.</param>
            <returns>The index of the document if it exists in the collection, otherwise -1.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.GetIsDirty">
            <summary>Checks if the object is dirty.</summary>
            <returns>True if the object is dirty, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.GetAddedEntities">
            <summary>Returns a collection of all the added entities.</summary>
            <returns>An IEnumerable of integers representing the added entities.</returns>
            <remarks>
            If the validation of all entities fails, null is returned.
            The added entities are determined by filtering the _entityStates dictionary
            and selecting the keys (integers) where the corresponding value is EntityState.Added.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.GetModifiedEntities">
            <summary>Returns a collection of modified entity IDs.</summary>
            <returns>An IEnumerable of integers representing the IDs of modified entities.</returns>
            <remarks>
            If all entities pass the validation, the method returns the IDs of entities whose EntityState is set to Modified.
            If the validation fails, the method returns null.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.GetDeletedEntities">
            <summary>Returns a collection of deleted entities.</summary>
            <typeparam name="T">The type of entities.</typeparam>
            <returns>A collection of deleted entities.</returns>
            <remarks>
            This method checks if all entities are valid using the Validateall() method.
            If not all entities are valid, it returns null.
            Otherwise, it returns a collection of entities that have been marked as deleted.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Units_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>Handles the event when the list of units changes.</summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event arguments containing information about the change.</param>
            <remarks>
            This method is called when the list of units changes. It checks if the notification is suppressed,
            and if so, it returns without performing any further actions. If the change type is an item change,
            it retrieves the item at the specified index from the list of units. If the item's primary key value
            is not already present in the UpdatedKeys collection, it adds the key value to the collection along
            with an incremented index value.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Units_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Handles the CollectionChanged event of the Units collection.</summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.ItemPropertyChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Event handler for property changes in an item.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event arguments containing information about the changed property.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.FilterCollection(TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>Filters a collection based on a list of filters.</summary>
            <param name="originalCollection">The original collection to filter.</param>
            <param name="filters">The list of filters to apply.</param>
            <returns>A filtered collection.</returns>
            <remarks>
            This method uses reflection to dynamically build an expression tree based on the provided filters.
            Each filter is applied to the specified property of the collection's elements.
            If an error occurs during the filtering process, a log message is added and null is returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.FilterCollection(TheTechIdea.Beep.Editor.ObservableBindingList{`0},System.String,System.Object)">
            <summary>Filters a collection based on a specified property and value.</summary>
            <param name="originalCollection">The original collection to filter.</param>
            <param name="propertyName">The name of the property to filter on.</param>
            <param name="value">The value to filter by.</param>
            <returns>A filtered collection based on the specified property and value.</returns>
            <remarks>
            This method uses reflection to dynamically filter the collection based on the specified property and value.
            If an error occurs during the filtering process, an error message is logged and null is returned.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.UndoDelete(`0,System.Int32)">
            <summary>Undoes a delete operation by reinserting an item at a specified index.</summary>
            <param name="itemToReinsert">The item to be reinserted.</param>
            <param name="indexToReinsertAt">The index at which the item should be reinserted.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.UndoDelete">
            <summary>Undoes the most recent deletion operation.</summary>
            <remarks>
            This method retrieves the most recently deleted item from the undo delete stack and reinserts it into the original collection at the original index.
            </remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="Units">The collection of items.</param>
            <param name="undoDeleteStack">The stack that stores the deleted items and their original indices.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the undo delete stack is empty.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.IsRequirmentsValidated">
            <summary>Checks if the requirements for a valid operation are validated.</summary>
            <returns>True if the requirements are validated, false otherwise.</returns>
            <remarks>
            The method checks for the following requirements:
            - EntityStructure: If it is null, sets the ErrorObject flag to Errors.Failed and the ErrorObject message to "Missing Entity Structure".
            - Entity PrimaryKey: Sets the ErrorObject flag to Errors.Failed and the ErrorObject message to "Missing Entity PrimaryKey".
            - DataSource: If it is null, sets the ErrorObject flag to Errors.Failed and the ErrorObject message to "Missing Entity Datasource".
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.OpenDataSource">
            <summary>Opens the data source.</summary>
            <returns>True if the data source is successfully opened, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWork`1.Validateall">
            <summary>Validates all necessary conditions before performing an operation.</summary>
            <returns>True if all conditions are valid, otherwise false.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UnitOfWorkFactory">
            <summary>A factory class for creating and retrieving instances of UnitOfWork.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitOfWorkFactory.CreateUnitOfWork(System.Type,TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String)">
            <summary>Creates a new instance of UnitOfWork for the specified entity type.</summary>
            <param name="entityType">The type of the entity.</param>
            <param name="dmeEditor">The IDMEEditor instance.</param>
            <param name="datasourceName">The name of the data source.</param>
            <returns>A new instance of UnitOfWork.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitOfWorkFactory.GetUnitOfWork(System.String,System.String,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets a unit of work for a specified entity.</summary>
            <param name="entityName">The name of the entity.</param>
            <param name="dataSourceName">The name of the data source.</param>
            <param name="DMEEditor">The DMEEditor instance.</param>
            <returns>A unit of work object for the specified entity.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the entity name is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the CreateUnitOfWork method is not found or when the unit of work cannot be created.</exception>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UnitofWorksManager">
            <summary>
            UnitofWorksManager simulates Oracle Forms environment with master-detail relationships,
            triggers, and form-level operations management. This is a higher-level manager that
            visual controls like BeepDataBlock will use.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWorksManager.DMEEditor">
            <summary>Gets the DME Editor instance</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWorksManager.CurrentFormName">
            <summary>Gets or sets the current form name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWorksManager.CurrentBlockName">
            <summary>Gets or sets the current active block name</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWorksManager.Blocks">
            <summary>Gets all registered blocks</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWorksManager.IsDirty">
            <summary>Gets whether any block has unsaved changes</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWorksManager.Status">
            <summary>Gets the current status message</summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.UnitofWorksManager.BlockCount">
            <summary>Gets the count of registered blocks</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.RegisterBlock(System.String,TheTechIdea.Beep.Editor.IUnitofWork,TheTechIdea.Beep.DataBase.IEntityStructure,System.String,System.Boolean)">
            <summary>
            Registers a data block with the manager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.UnregisterBlock(System.String)">
            <summary>
            Unregisters a data block from the manager
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.GetBlock(System.String)">
            <summary>
            Gets a registered block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.GetUnitOfWork(System.String)">
            <summary>
            Gets the unit of work for a specific block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.CreateMasterDetailRelation(System.String,System.String,System.String,System.String,TheTechIdea.Beep.Editor.RelationshipType)">
            <summary>
            Creates a master-detail relationship between blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.RemoveBlockRelationships(System.String)">
            <summary>
            Removes all relationships for a block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.SynchronizeDetailBlocksAsync(System.String)">
            <summary>
            Synchronizes detail blocks when master record changes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.OpenFormAsync(System.String)">
            <summary>
            Opens a form - equivalent to Oracle Forms WHEN-NEW-FORM-INSTANCE
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.CloseFormAsync">
            <summary>
            Closes the form - checks for unsaved changes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.CommitFormAsync">
            <summary>
            Commits all changes in all blocks - equivalent to Oracle Forms COMMIT_FORM
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.RollbackFormAsync">
            <summary>
            Rollback all changes in all blocks - equivalent to Oracle Forms ROLLBACK_FORM
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.ClearAllBlocksAsync">
            <summary>
            Clears all blocks - equivalent to Oracle Forms CLEAR_FORM
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.ClearBlockAsync(System.String)">
            <summary>
            Clears a specific block - equivalent to Oracle Forms CLEAR_BLOCK
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.FirstRecordAsync(System.String)">
            <summary>
            Navigates to first record in block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.NextRecordAsync(System.String)">
            <summary>
            Navigates to next record in block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.PreviousRecordAsync(System.String)">
            <summary>
            Navigates to previous record in block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.LastRecordAsync(System.String)">
            <summary>
            Navigates to last record in block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.SwitchToBlockAsync(System.String)">
            <summary>
            Switches to a different block, checking for unsaved changes first
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.InsertRecordAsync(System.String,System.Object)">
            <summary>
            Inserts a new record in the specified block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.DeleteCurrentRecordAsync(System.String)">
            <summary>
            Deletes the current record in the specified block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.EnterQueryAsync(System.String)">
            <summary>
            Enters query mode for a block - equivalent to Oracle Forms ENTER_QUERY
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.ExecuteQueryAsync(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Executes query for a block - equivalent to Oracle Forms EXECUTE_QUERY
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.ExecuteQueryOnBlock(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Private method to execute query on a specific block
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.UnitofWorksManager.OnUnsavedChanges">
            <summary>
            Event raised when unsaved changes are detected before a critical operation
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.CheckAndHandleUnsavedChangesAsync(System.String)">
            <summary>
            Checks for unsaved changes in a block and its children, prompts user for action
            </summary>
            <param name="blockName">Name of the block to check</param>
            <returns>True if operation should continue, false if cancelled</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.CollectDirtyDetailBlocks(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Collects all dirty detail blocks recursively
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.SaveDirtyBlocksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Saves all dirty blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.RollbackDirtyBlocksAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Rolls back all dirty blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.HasUnsavedChanges">
            <summary>
            Checks if any blocks have unsaved changes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.GetDirtyBlocks">
            <summary>
            Gets all dirty blocks
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.ValidateField(System.String,System.String,System.Object)">
            <summary>
            Validates a specific field in a block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.ValidateBlock(System.String)">
            <summary>
            Validates all records in a block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.ValidateForm">
            <summary>
            Validates the entire form
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.GetDetailBlocks(System.String)">
            <summary>
            Gets all blocks that are detail blocks of the specified master block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.GetMasterBlock(System.String)">
            <summary>
            Gets the master block name for a detail block
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.BlockExists(System.String)">
            <summary>
            Checks if a block exists
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.SetAuditDefaults(System.Object,System.String)">
            <summary>
            Sets default values for common audit fields when a new record is created
            Similar to Oracle Forms default value triggers
            </summary>
            <param name="record">The record to set defaults on</param>
            <param name="currentUser">Current user name</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets a field value on a record using reflection
            </summary>
            <param name="record">The record object</param>
            <param name="fieldName">Name of the field</param>
            <param name="value">Value to set</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.GetFieldValue(System.Object,System.String)">
            <summary>
            Gets a field value from a record using reflection
            </summary>
            <param name="record">The record object</param>
            <param name="fieldName">Name of the field</param>
            <returns>Field value or null</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.UnitofWorksManager.ExecuteSequence(System.String,System.Object,System.String,System.String)">
            <summary>
            Executes a sequence generator for a field (Oracle sequence simulation)
            </summary>
            <param name="blockName">Name of the block</param>
            <param name="record">The record to set the sequence value on</param>
            <param name="fieldName">Name of the field to set</param>
            <param name="sequenceName">Name of the sequence</param>
            <returns>True if successful</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.DataBlockInfo">
            <summary>
            Information about a registered data block
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.DataBlockRelationship">
            <summary>
            Represents a relationship between data blocks
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.DataBlockMode">
            <summary>
            Data block modes similar to Oracle Forms
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.RelationshipType">
            <summary>
            Types of relationships between blocks
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.NavigationType">
            <summary>
            Navigation types for triggers
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.DMLOperation">
            <summary>
            DML operation types
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.DMLTriggerEventArgs.CurrentRecord">
            <summary>
            Gets or sets the current record being processed. 
            Can be modified in Pre-triggers to set default values or apply business logic.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Editor.DMLTriggerEventArgs.EntityStructure">
            <summary>
            Gets the entity structure for the current block to help with field access
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DMLTriggerEventArgs.SetFieldValue(System.String,System.Object)">
            <summary>
            Sets a field value in the current record using reflection
            </summary>
            <param name="fieldName">Name of the field to set</param>
            <param name="value">Value to assign</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DMLTriggerEventArgs.GetFieldValue(System.String)">
            <summary>
            Gets a field value from the current record using reflection
            </summary>
            <param name="fieldName">Name of the field to get</param>
            <returns>Field value or null if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DMLTriggerEventArgs.SetCurrentDateTime(System.String)">
            <summary>
            Sets the current date/time to a field - common Oracle Forms pattern
            </summary>
            <param name="fieldName">Name of the date field</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DMLTriggerEventArgs.SetCurrentUser(System.String,System.String)">
            <summary>
            Sets the current user to a field - common Oracle Forms pattern
            </summary>
            <param name="fieldName">Name of the user field</param>
            <param name="currentUser">Current user name</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.DMLTriggerEventArgs.IsFieldNullOrEmpty(System.String)">
            <summary>
            Checks if a field is null or empty
            </summary>
            <param name="fieldName">Name of the field to check</param>
            <returns>True if field is null or empty</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UnsavedChangesEventArgs">
            <summary>
            Event args for handling unsaved changes - Oracle Forms style
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.UnsavedChangesAction">
            <summary>
            Actions that can be taken when unsaved changes are detected
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.DMEEditor">
            <summary>
            Data Management Enterprize Editor (DMEEditor)
            This is the Class that encapsulate all functionality of Data Management.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.ContainerMode">
            <summary>
            Container Properties to allow multi-tenant application
            </summary>
            
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.DataSources">
            <summary>
            List of Datasources used in the Platform
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.ETL">
            <summary>
            Extract Tranform and Load Class 
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.ConfigEditor">
            <summary>
            Configuration Editor class that handles all confiuration loading and saving
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.typesHelper">
            <summary>
            Data Type Helper handles the Type Management for and Mapping between different Sourcs
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.Utilfunction">
            <summary>
            Utilitiy Class 
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.assemblyHandler">
            <summary>
            Assembly Class that handle loading and extracting Plaform Class (IDatasource,IAddin,...)
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.ErrorObject">
            <summary>
            Error Object Handler 
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.Logger">
            <summary>
            Logging Class 
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.WorkFlowEditor">
            <summary>
            WorkFlow Editor that handles and manage datawork flow's
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.classCreator">
            <summary>
            Class and Type Creator based of EntityStructure and Data objects
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.Loganderrors">
            <summary>
             Logs and Error Messeges
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.DMEEditor.Passedarguments">
            <summary>
            Global Passed Parameters and Arguments
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.DMEEditor.PassEvent">
            <summary>
            Global Event Handler to handle events  in class
            </summary>
            
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.RaiseEvent(System.Object,TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Raise the Public and Global event
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.AskQuestion(TheTechIdea.Beep.Addin.IPassedArgs)">
            <summary>
            Functio to Raise Question 
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.AddLogMessage(System.String,System.String,System.DateTime,System.Int32,System.String,TheTechIdea.Beep.ConfigUtil.Errors)">
            <summary>
            Function to Add Log Message 
            </summary>
            <param name="pLogType"></param>
            <param name="pLogMessage"></param>
            <param name="pLogData"></param>
            <param name="pRecordID"></param>
            <param name="pMiscData"></param>
            <param name="pFlag"></param>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.AddLogMessage(System.String)">
            <summary>
            Function to Add Log Message 
            </summary>
            <param name="pLogMessage"></param>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetEntityStructure(System.String,System.String)">
            <summary>
            Get Entity Structure from DataSource
            </summary>
            <param name="entityname"></param>
            <param name="datasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetOutputAsync(TheTechIdea.Beep.IDataSource,System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Run Query on an Opened DataSource 
            </summary>
            <param name="ds"></param>
            <param name="CurrentEntity"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetData(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Get Entity Data from an Opened DataSource
            </summary>
            <param name="ds"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.OpenDataSource(System.String)">
            <summary>
            Open DataSource and add it list of DataSources , if the samename exist in connections list
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CloseDataSource(System.String)">
            <summary>
            Close DataSource
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetDataSource(System.String)">
            <summary>
            Get Existing DataSource Created and exist in List of DataSources
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.OpenDataSourceUsingGuidID(System.String)">
            <summary>
            Open DataSource and add it list of DataSources , if the samename exist in connections list
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CloseDataSourceUsingGuidID(System.String)">
            <summary>
            Close DataSource
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetDataSourceUsingGuidID(System.String)">
            <summary>
            Get Existing DataSource Created and exist in List of DataSources
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CheckDataSourceExistUsingGuidID(System.String)">
            <summary>
            Check DataSource Exist in List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.RemoveDataDourceUsingGuidID(System.String)">
            <summary>
            Remove DataSource from List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetDataSourceClassUsingGuidID(System.String)">
            <summary>
            Get DataSource Assembly and Class Handling Class
            </summary>
            <param name="DatasourceName"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CreateNewDataSourceConnectionUsingGuidID(System.String)">
            <summary>
            Create New Datasource and add to the List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.GetDataSourceClass(System.String)">
            <summary>
            Get DataSource Assembly and Class Handling Class
            </summary>
            <param name="DatasourceName"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CheckDataSourceExist(System.String)">
            <summary>
            Check DataSource Exist in List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.RemoveDataDource(System.String)">
            <summary>
            Remove DataSource from List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CreateNewDataSourceConnection(System.String)">
            <summary>
            Create New Datasource and add to the List
            </summary>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CreateNewDataSourceConnection(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,System.String)">
            <summary>
            Create New Datasource and add to the List by passing new Connection Properties 
            </summary>
            <param name="cn"></param>
            <param name="pdatasourcename"></param>
            <returns></returns>
        </member>
        <member name="M:TheTechIdea.Beep.DMEEditor.CreateLocalDataSourceConnection(TheTechIdea.Beep.ConfigUtil.ConnectionProperties,System.String,System.String)">
            <summary>
             Create New Datasource and add to the List by passing new Connection Properties and Datasource Class Handler
            </summary>
            <param name="dataConnection"></param>
            <param name="pdatasourcename"></param>
            <param name="ClassDBHandlerName"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TheTechIdea.Beep.EntityDataMoveValidator" -->
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.CanInsertRecord(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure,System.Object,System.String,System.String)">
            <summary>
            Checks if a record can be inserted into a data source for a specific entity.
            </summary>
            <param name="DMEEditor">The IDMEEditor instance.</param>
            <param name="DataSource">The IDataSource instance.</param>
            <param name="Entity">The EntityStructure instance.</param>
            <param name="record">The record to be inserted.</param>
            <param name="entityname">The name of the entity.</param>
            <param name="datasource">The name of the data source.</param>
            <returns>A list of validation messages indicating whether the record can be inserted or not.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.CanInsertRecord(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,System.Object,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Checks if a record can be inserted into a data source.</summary>
            <param name="DMEEditor">The IDMEEditor instance.</param>
            <param name="DataSource">The data source.</param>
            <param name="record">The record to be inserted.</param>
            <param name="Entity">The entity structure.</param>
            <returns>A list of validation messages indicating if the record can be inserted.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.TrueifNotNull(System.Object)">
            <summary>
            Checks if the given object is not null.
            </summary>
            <param name="fldval">The object to be checked.</param>
            <returns>True if the object is not null, otherwise false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.TrueifNotUnique(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure,System.Object,System.String,System.Object)">
            <summary>
            Checks if a field value is not unique within a given entity and data source.
            </summary>
            <param name="DMEEditor">The IDMEEditor instance.</param>
            <param name="DataSource">The IDataSource instance.</param>
            <param name="Entity">The EntityStructure instance.</param>
            <param name="record">The record object.</param>
            <param name="fieldname">The name of the field to check.</param>
            <param name="fldval">The value of the field to check.</param>
            <returns>True if the field value is not unique, otherwise false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.TrueifParentExist(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure,System.Object,System.String,System.Object)">
            <summary>
            Checks if the parent entity exists in the data source based on the provided parameters.
            </summary>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <param name="DataSource">The data source to check for the parent entity.</param>
            <param name="Entity">The structure of the entity.</param>
            <param name="record">The record object.</param>
            <param name="fieldname">The name of the field.</param>
            <param name="fldval">The value of the field.</param>
            <returns>True if the parent entity exists, otherwise false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.TrueifEntityExist(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Checks if an entity exists in a data source.</summary>
            <param name="DMEEditor">The IDMEEditor instance.</param>
            <param name="DataSource">The data source to check.</param>
            <param name="Entity">The entity structure to check.</param>
            <returns>True if the entity exists in the data source, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.CompareEntityStructuresToList(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,System.String,System.String)">
            <summary>
            Compares the structure of two entities from different or the same data sources.
            </summary>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data sources.</param>
            <param name="sourceDataSource">The source data source.</param>
            <param name="targetDataSource">The target data source.</param>
            <param name="sourceEntityName">The name of the source entity.</param>
            <param name="targetEntityName">The name of the target entity.</param>
            <returns>A list of ComparisonOutput indicating differences between the two entities.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.CompareFieldsToList(TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.List{TheTechIdea.Beep.ComparisonOutput})">
            <summary>
            Compares fields between two entities and adds results to the output list.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.CompareRelationshipsToList(TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.IDataSource,TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.List{TheTechIdea.Beep.ComparisonOutput})">
            <summary>
            Compares relationships between two entities and adds results to the output list.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.EntityDataMoveValidator.GenerateReportFromComparison(System.Collections.Generic.List{TheTechIdea.Beep.ComparisonOutput})">
            <summary>
            Generates a detailed string report from a list of ComparisonOutput.
            </summary>
            <param name="comparisonResults">The list of comparison results.</param>
            <returns>A formatted string report.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.ComparisonOutput">
            <summary>
            Represents the result of a comparison between two data source entities.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Mapping.MappingManager">
            <summary>
            Provides utility methods to create and manage entity mappings between source and destination entities.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Mapping.MappingManager.CreateEntityMap(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Creates an entity mapping for a given destination entity using a source entity and data source.
            </summary>
            <param name="DMEEditor">The DMEEditor instance for accessing configuration and data sources.</param>
            <param name="destent">The structure of the destination entity.</param>
            <param name="SourceEntityName">The name of the source entity.</param>
            <param name="SourceDataSourceName">The name of the source data source.</param>
            <returns>
            A tuple containing the <see cref="T:TheTechIdea.Beep.ConfigUtil.IErrorsInfo"/> object and the resulting <see cref="T:TheTechIdea.Beep.Workflow.Mapping.EntityDataMap"/>.
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Mapping.MappingManager.CreateEntityMap(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an entity mapping for migration between two entities in different data sources.
            </summary>
            <param name="DMEEditor">The DMEEditor instance for accessing configuration and data sources.</param>
            <param name="SourceEntityName">The name of the source entity.</param>
            <param name="SourceDataSourceName">The name of the source data source.</param>
            <param name="DestEntityName">The name of the destination entity.</param>
            <param name="DestDataSourceName">The name of the destination data source.</param>
            <returns>
            A tuple containing the <see cref="T:TheTechIdea.Beep.ConfigUtil.IErrorsInfo"/> object and the resulting <see cref="T:TheTechIdea.Beep.Workflow.Mapping.EntityDataMap"/>.
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Mapping.MappingManager.CreateEntityMap(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String)">
            <summary>
            Creates a new entity mapping for the specified destination entity.
            </summary>
            <param name="DMEEditor">The DMEEditor instance for accessing configuration and data sources.</param>
            <param name="DestEntityName">The name of the destination entity.</param>
            <param name="DestDataSourceName">The name of the destination data source.</param>
            <returns>
            A tuple containing the <see cref="T:TheTechIdea.Beep.ConfigUtil.IErrorsInfo"/> object and the resulting <see cref="T:TheTechIdea.Beep.Workflow.Mapping.EntityDataMap"/>.
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Mapping.MappingManager.AddEntityToMappedEntities(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.String,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Adds a source entity to the mapped entities for a given destination entity.
            </summary>
            <param name="DMEEditor">The DMEEditor instance for accessing configuration and data sources.</param>
            <param name="SourceDataSourceName">The name of the source data source.</param>
            <param name="SourceEntityName">The name of the source entity.</param>
            <param name="destent">The destination entity structure.</param>
            <returns>The updated <see cref="T:TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL"/> object.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Mapping.MappingManager.MapEntityFields(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.Workflow.Mapping.EntityDataMap_DTL)">
            <summary>
            Maps fields from the source entity to the destination entity.
            </summary>
            <param name="DMEEditor">The DMEEditor instance for accessing configuration and data sources.</param>
            <param name="srcent">The structure of the source entity.</param>
            <param name="datamap">The data map for mapping fields.</param>
            <returns>A list of <see cref="T:TheTechIdea.Beep.Workflow.Mapping_rep_fields"/> representing the mapped fields.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Mapping.MappingManager.MapProperty(System.Object,System.Object,TheTechIdea.Beep.Workflow.Mapping_rep_fields)">
            <summary>
            Creates a new object based on the entity definition and fields.
            </summary>
            <param name="DMEEditor">The DMEEditor instance for configuration and type building.</param>
            <param name="EntityName">The name of the entity.</param>
            <param name="Fields">The list of entity fields defining the object structure.</param>
            <returns>A dynamically created object for the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.LinkConnection2Drivers(TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.ConfigUtil.IConfigEditor)">
            <summary>Links a connection to its corresponding drivers in the configuration editor.</summary>
            <param name="cn">The connection properties.</param>
            <param name="configEditor">The configuration editor.</param>
            <returns>The connection drivers configuration.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.ReplaceValueFromConnectionString(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig,TheTechIdea.Beep.ConfigUtil.IConnectionProperties,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Replaces a value in a connection string based on the provided parameters.</summary>
            <param name="DataSourceDriver">The driver configuration for the data source.</param>
            <param name="ConnectionProp">The connection properties.</param>
            <param name="DMEEditor">The DME editor.</param>
            <returns>The modified connection string.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.IsConnectionStringValid(System.String,TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Validates a connection string for a specific data source type
            </summary>
            <param name="connectionString">The connection string to validate</param>
            <param name="dataSourceType">The type of the data source</param>
            <returns>True if the connection string is valid, otherwise false</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.SecureConnectionString(System.String)">
            <summary>
            Creates a secure version of a connection string by masking sensitive information
            </summary>
            <param name="connectionString">The connection string to secure</param>
            <returns>A secure version of the connection string with sensitive data masked</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.GetAllConnectionConfigs">
            <returns>A list of ConnectionDriversConfig objects representing different connection configurations.</returns>
            <returns>A list of ConnectionDriversConfig objects representing different connection configurations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateChromaDBConfig">
            <summary>Creates a configuration object for ChromaDB connection drivers.</summary>
            <returns>A configuration object for ChromaDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreatePineConeConfig">
            <summary>Creates a configuration object for PineCone connection drivers.</summary>
            <returns>A configuration object for PineCone connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateQdrantConfig">
            <summary>Creates a configuration object for Qdrant connection drivers.</summary>
            <returns>A configuration object for Qdrant connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateShapVectorConfig">
            <summary>Creates a configuration object for ShapVector connection drivers.</summary>
            <returns>A configuration object for ShapVector connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateWeaviateConfig">
            <summary>Creates a configuration object for Weaviate connection drivers.</summary>
            <returns>A configuration object for Weaviate connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMilvusConfig">
            <summary>Creates a configuration object for Milvus connection drivers.</summary>
            <returns>A configuration object for Milvus connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRedisVectorConfig">
            <summary>Creates a configuration object for RedisVector connection drivers.</summary>
            <returns>A configuration object for RedisVector connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateZillizConfig">
            <summary>Creates a configuration object for Zilliz connection drivers.</summary>
            <returns>A configuration object for Zilliz connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateVespaConfig">
            <summary>Creates a configuration object for Vespa connection drivers.</summary>
            <returns>A configuration object for Vespa connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSnowFlakeConfig">
            <summary>Creates a configuration object for SnowFlake connection drivers.</summary>
            <returns>A ConnectionDriversConfig object with the specified properties.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateHadoopConfig">
            <summary>Creates a configuration object for Hadoop connection drivers.</summary>
            <returns>A ConnectionDriversConfig object representing the Hadoop configuration.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRedisConfig">
            <summary>Creates a configuration object for Redis connection drivers.</summary>
            <returns>A ConnectionDriversConfig object with the specified properties.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateKafkaConfig">
            <summary>Creates a configuration object for Kafka connection drivers.</summary>
            <returns>A ConnectionDriversConfig object with Kafka-specific configuration.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateOPCConfig">
            <summary>Creates a configuration object for OPC connection drivers.</summary>
            <returns>A ConnectionDriversConfig object representing the OPC configuration.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDB2Config">
            <summary>Creates a configuration object for connecting to a DB2 database.</summary>
            <returns>A ConnectionDriversConfig object with the DB2 configuration settings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCouchDBConfig">
            <summary>
            Creates a configuration object for connecting to CouchDB.
            </summary>
            <returns>A configuration object for connecting to CouchDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateVistaDBConfig">
            <summary>
            Creates a configuration object for VistaDB connection drivers.
            </summary>
            <returns>A configuration object for VistaDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCouchbaseConfig">
            <summary>Creates a configuration object for connecting to Couchbase.</summary>
            <returns>A configuration object for connecting to Couchbase.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateFirebaseConfig">
            <summary>Creates a configuration object for Firebase connection drivers.</summary>
            <returns>A configuration object for Firebase connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRealmConfig">
            <summary>Creates a configuration object for connecting to a Realm database.</summary>
            <returns>A configuration object for connecting to a Realm database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreatePostgreConfig">
            <summary>Creates a configuration object for connecting to a PostgreSQL database.</summary>
            <returns>A configuration object for connecting to a PostgreSQL database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMongoDBConfig">
            <summary>Creates a configuration object for MongoDB connection drivers.</summary>
            <returns>A configuration object for MongoDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateStackExchangeRedisConfig">
            <summary>Creates a configuration object for StackExchange.Redis.</summary>
            <returns>A configuration object for StackExchange.Redis.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCouchbaseLiteConfig">
            <summary>
            Creates a configuration object for connecting to Couchbase Lite.
            </summary>
            <returns>A configuration object for connecting to Couchbase Lite.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateElasticsearchConfig">
            <summary>Creates a configuration object for Elasticsearch connection drivers.</summary>
            <returns>A configuration object for Elasticsearch connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSQLiteConfig">
            <summary>Creates a configuration object for SQLite connection drivers.</summary>
            <returns>A configuration object for SQLite connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMauiSQLiteConfig">
            <summary>Creates a configuration object for SQLite connection drivers.</summary>
            <returns>A configuration object for SQLite connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateRavenDBConfig">
            <summary>Creates a configuration object for RavenDB connection drivers.</summary>
            <returns>A configuration object for RavenDB connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCSVFileReaderConfig">
            <summary>
            Creates a configuration object for a CSV file reader connection driver.
            </summary>
            <returns>A configuration object for a CSV file reader connection driver.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateFirebirdConfig">
            <summary>
            Creates a configuration object for Firebird database connection drivers.
            </summary>
            <returns>A configuration object for Firebird database connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCassandraConfig">
            <summary>Creates a configuration object for Cassandra connection drivers.</summary>
            <returns>A configuration object for Cassandra connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateMySqlConfig">
            <summary>Creates a configuration object for connecting to a MySQL database.</summary>
            <returns>A configuration object for connecting to a MySQL database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSqlServerConfig">
            <summary>Creates a configuration object for connecting to a SQL Server database.</summary>
            <returns>A configuration object for connecting to a SQL Server database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateSqlCompactConfig">
            <summary>Creates a configuration object for SQL Compact connection drivers.</summary>
            <returns>A configuration object for SQL Compact connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDataViewConfig">
            <summary>Creates a configuration object for connection drivers.</summary>
            <returns>A configuration object for connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateCSVDataSourceConfig">
            <summary>
            Creates a configuration object for a CSV data source.
            </summary>
            <returns>A configuration object for a CSV data source.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateJsonDataSourceConfig">
            <summary>
            Creates a configuration object for a JSON data source connection driver.
            </summary>
            <returns>A configuration object for a JSON data source connection driver.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateTxtXlsCSVFileSourceConfig">
            <summary>
            Creates a configuration object for a text, xls, or csv file data source.
            </summary>
            <returns>A ConnectionDriversConfig object representing the configuration for the file data source.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateLiteDBDataSourceConfig">
            <summary>
            Creates a configuration object for a LiteDB data source connection driver.
            </summary>
            <returns>A configuration object for a LiteDB data source connection driver.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateOracleConfig">
            <summary>Creates a configuration object for Oracle database connection drivers.</summary>
            <returns>A configuration object for Oracle database connection drivers.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.ConnectionHelper.CreateDuckDBConfig">
            <summary>Creates a configuration object for DuckDB connection drivers.</summary>
            <returns>A configuration object for DuckDB connection drivers.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper">
            <summary>
            Helper class for mapping data types to field names.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.NetDataTypeDef1">
            <summary>
            A string representing a collection of .NET data types.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.NetDataTypeDef2" -->
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetNetDataTypes">
            <summary>Returns an array of .NET data types.</summary>
            <returns>An array of .NET data types.</returns>
            
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetNetDataTypes2">
            <summary>Returns an array of .NET data types.</summary>
            <returns>An array of .NET data types.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetDataTypeMappingForString(System.String,System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)" -->
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetDataType(System.String,System.String,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type of a field in a specific data source.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The field for which to retrieve the data type.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetDataType(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type of a field in a specific data source.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The field for which to retrieve the data type.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetDataTypeFromDataSourceClassName(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type of a field in a specific data source.</summary>
            <param name="className">The name of the data source class</param>
            <param name="fld">The field for which to retrieve the data type.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetDataTypes(System.String,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type of a field in a specific data source.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The List of DataTypeMapping for DataSource.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetDataTypes(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the data type of a field in a specific data source.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The List of DataTypeMapping for DataSource.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetFieldTypeWoConversion(System.String,TheTechIdea.Beep.DataBase.EntityField,TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Gets the field type without conversion.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The entity field.</param>
            <param name="DMEEditor">The DME editor.</param>
            <returns>The field type without conversion.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetMappings">
            <summary>Returns a list of datatype mappings.</summary>
            <returns>A list of datatype mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetPineConeDataTypesMapping">
            <summary>Returns a list of datatype mappings for PineCone.</summary>
            <returns>A list of datatype mappings for PineCone.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetQdrantDataTypesMapping">
            <summary>Returns a list of datatype mappings for Qdrant.</summary>
            <returns>A list of datatype mappings for Qdrant.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetShapVectorDataTypesMapping">
            <summary>Returns a list of datatype mappings for ShapVector.</summary>
            <returns>A list of datatype mappings for ShapVector.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetWeaviateDataTypesMapping">
            <summary>Returns a list of datatype mappings for Weaviate.</summary>
            <returns>A list of datatype mappings for Weaviate.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetMilvusDataTypesMapping">
            <summary>Returns a list of datatype mappings for Milvus.</summary>
            <returns>A list of datatype mappings for Milvus.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetRedisVectorDataTypesMapping">
            <summary>Returns a list of datatype mappings for RedisVector.</summary>
            <returns>A list of datatype mappings for RedisVector.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetZillizDataTypesMapping">
            <summary>Returns a list of datatype mappings for Zilliz.</summary>
            <returns>A list of datatype mappings for Zilliz.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetVespaDataTypesMapping">
            <summary>Returns a list of datatype mappings for Vespa.</summary>
            <returns>A list of datatype mappings for Vespa.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetChromaDBDataTypesMapping">
            <summary>Returns a list of datatype mappings for ChromaDB.</summary>
            <returns>A list of datatype mappings for ChromaDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetCouchDBDataTypeMappings">
            <summary>Returns a list of datatype mappings for CouchDB.</summary>
            <returns>A list of datatype mappings for CouchDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetFirebaseDataTypeMappings">
            <summary>Returns a list of Firebase data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between Firebase data types and .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GenerateOracleDataTypesMapping">
            <summary>
            Generates a list of datatype mappings for Oracle database.
            </summary>
            <returns>A list of datatype mappings for Oracle database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GenerateSQLiteDataTypesMapping">
            <summary>
            Generates a list of datatype mappings for SQLite.
            </summary>
            <returns>A list of datatype mappings for SQLite.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GenerateSqlServerDataTypesMapping">
            <summary>
            Generates a list of datatype mappings between SQL Server data types and corresponding .NET data types.
            </summary>
            <returns>A list of datatype mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GenerateSqlCompactDataTypesMapping">
            <summary>
            Generates a list of datatype mappings for SQL Server Compact Edition.
            </summary>
            <returns>A list of datatype mappings for SQL Server Compact Edition.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetPostgreDataTypesMapping">
            <summary>Returns a list of datatype mappings for PostgreSQL.</summary>
            <returns>A list of datatype mappings for PostgreSQL.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetMySqlDataTypesMapping">
            <summary>Returns a list of datatype mappings between MySQL and .NET data types.</summary>
            <returns>A list of datatype mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetFireBirdDataTypesMapping">
            <summary>Returns a list of datatype mappings for Firebird database.</summary>
            <returns>A list of datatype mappings for Firebird database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetLiteDBDataTypesMapping">
            <summary>Returns a list of LiteDB data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between LiteDB data types and their corresponding .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetDuckDBDataTypesMapping">
            <summary>Returns a list of datatype mappings for DuckDB.</summary>
            <returns>A list of datatype mappings for DuckDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetDB2DataTypeMappings">
            <summary>Returns a list of datatype mappings for DB2.</summary>
            <returns>A list of datatype mappings for DB2.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetMongoDBDataTypeMappings">
            <summary>Returns a list of MongoDB data type mappings.</summary>
            <returns>A list of DataTypeMapping objects representing the mappings between .NET data types and MongoDB data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetCassandraDataTypeMappings">
            <summary>Returns a list of mappings between .NET data types and Cassandra data types.</summary>
            <returns>A list of <see cref="T:TheTechIdea.Beep.DriversConfigurations.DatatypeMapping"/> objects representing the mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetRedisDataTypeMappings">
            <summary>Returns a list of Redis data type mappings.</summary>
            <returns>A list of Redis data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetCouchbaseDataTypeMappings">
            <summary>Returns a list of Couchbase data type mappings.</summary>
            <returns>A list of Couchbase data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetDynamoDBDataTypeMappings">
            <summary>Returns a list of DynamoDB data type mappings.</summary>
            <returns>A list of DynamoDB data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetInfluxDBDataTypeMappings">
            <summary>Returns a list of datatype mappings for InfluxDB.</summary>
            <returns>A list of datatype mappings for InfluxDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetSybaseDataTypeMappings">
            <summary>Returns a list of datatype mappings for Sybase database.</summary>
            <returns>A list of datatype mappings for Sybase database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetHBaseDataTypeMappings">
            <summary>Returns a list of HBase data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between HBase data types and .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetCockroachDBDataTypeMappings">
            <summary>Returns a list of datatype mappings for CockroachDB.</summary>
            <returns>A list of datatype mappings for CockroachDB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetBerkeleyDBDataTypesMapping">
            <summary>Returns a list of datatype mappings for Berkeley DB.</summary>
            <returns>A list of datatype mappings for Berkeley DB.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetSnowflakeDataTypesMapping">
            <summary>Returns a list of Snowflake data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between Snowflake data types and their corresponding .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetAzureCosmosDBDataTypesMapping">
            <summary>Returns a list of Azure Cosmos DB data type mappings.</summary>
            <returns>A list of DatatypeMapping objects representing the mappings between Azure Cosmos DB data types and .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetVerticaDataTypesMapping">
            <summary>Returns a list of datatype mappings for Vertica database.</summary>
            <returns>A list of datatype mappings for Vertica database.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetTeradataDataTypeMappings">
            <summary>Returns a list of Teradata data type mappings.</summary>
            <returns>A list of Teradata data type mappings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypeFieldMappingHelper.GetArangoDBDataTypeMappings">
            <summary>Returns a list of datatype mappings for ArangoDB.</summary>
            <returns>A list of datatype mappings for ArangoDB.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.DataTypesHelper">
            <summary>
            Helper class for mapping data types to field names.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.#ctor(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>Initializes a new instance of the DataTypesHelper class.</summary>
            <param name="pDMEEditor">The IDMEEditor instance to be associated with the helper.</param>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.DataTypesHelper.DMEEditor">
            <summary>Gets or sets the DME editor.</summary>
            <value>The DME editor.</value>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.DataTypesHelper.mapping">
            <summary>Gets or sets the list of datatype mappings.</summary>
            <value>The list of datatype mappings.</value>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetDataClasses">
            <summary>Gets a list of data classes from the configuration editor.</summary>
            <returns>A list of data classes.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetDataType(System.String,TheTechIdea.Beep.DataBase.EntityField)">
            <summary>Gets the data type of a field in a specific data source.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The field for which to retrieve the data type.</param>
            <param name="DMEEditor">The IDMEEditor instance used for accessing the data source.</param>
            <returns>The data type of the specified field.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetFieldTypeWoConversion(System.String,TheTechIdea.Beep.DataBase.EntityField)">
            <summary>Gets the field type without conversion.</summary>
            <param name="DSname">The name of the data source.</param>
            <param name="fld">The entity field.</param>
            <param name="DMEEditor">The DME editor.</param>
            <returns>The field type without conversion.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetNetDataTypes">
            <summary>Returns an array of .NET data types.</summary>
            <returns>An array of .NET data types.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.DataTypesHelper.GetNetDataTypes2">
            <summary>Returns an array of .NET data types.</summary>
            <returns>An array of .NET data types.</returns>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.FileConnectionHelper.DMEEditor">
            <summary>
            Gets the editor instance for configuration and logging.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.Helpers.FileConnectionHelper.ProjectCreated">
            <summary>
            Event raised when a project is created.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.Initialize(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Initializes the FileConnectionHelper with the required editor.
            </summary>
            <param name="editor">The editor instance for configuration and logging.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if already initialized.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.Reset">
            <summary>
            Resets the FileConnectionHelper, clearing the editor.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.LoadFile(System.String)">
            <summary>
            Loads a single file from the provided file path and creates connection properties for it.
            </summary>
            <param name="filePath">The path of the file to load.</param>
            <returns>The connection properties for the loaded file, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.LoadFileAsync(System.String)">
            <summary>
            Asynchronously loads a single file from the provided file path and creates connection properties for it.
            </summary>
            <param name="filePath">The path of the file to load.</param>
            <returns>A task that returns the connection properties for the loaded file, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.LoadFiles(System.Collections.Generic.List{System.String})">
            <summary>
            Loads files from the provided list of file paths and creates connection properties for valid files.
            </summary>
            <param name="filenames">List of file paths to load.</param>
            <returns>A list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.LoadFilesAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Asynchronously loads files from the provided list of file paths and creates connection properties for valid files.
            </summary>
            <param name="filenames">List of file paths to load.</param>
            <returns>A task that returns a list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.LoadFiles(System.String[])">
            <summary>
            Loads connection properties for the specified file paths.
            </summary>
            <param name="filenames">Array of file paths to load.</param>
            <returns>A list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.LoadFilesAsync(System.String[])">
            <summary>
            Asynchronously loads connection properties for the specified file paths.
            </summary>
            <param name="filenames">Array of file paths to load.</param>
            <returns>A task that returns a list of connection properties for loaded files, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.AddFile(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Adds a single file as a data connection if valid.
            </summary>
            <param name="file">The connection properties for the file.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.AddFileAsync(TheTechIdea.Beep.ConfigUtil.ConnectionProperties)">
            <summary>
            Asynchronously adds a single file as a data connection if valid.
            </summary>
            <param name="file">The connection properties for the file.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.AddFiles(System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.ConnectionProperties})">
            <summary>
            Adds multiple files as data connections if valid.
            </summary>
            <param name="files">List of connection properties for the files.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.AddFilesAsync(System.Collections.Generic.List{TheTechIdea.Beep.ConfigUtil.ConnectionProperties})">
            <summary>
            Asynchronously adds multiple files as data connections if valid.
            </summary>
            <param name="files">List of connection properties for the files.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.AddFolder(System.String)">
            <summary>
            Adds a folder as a project using the specified folder path.
            </summary>
            <param name="foldername">The path of the folder to add as a project.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.AddFolderAsync(System.String)">
            <summary>
            Asynchronously adds a folder as a project using the specified folder path.
            </summary>
            <param name="foldername">The path of the folder to add as a project.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.CreateProject(System.String,TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Creates a new project from the specified folder path.
            </summary>
            <param name="folderpath">The folder path for the new project.</param>
            <param name="folderType">The type of project folder (e.g., Files, Project).</param>
            <returns>A tuple containing error information and the created project folder, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.CreateProjectAsync(System.String,TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Asynchronously creates a new project from the specified folder path.
            </summary>
            <param name="folderpath">The folder path for the new project.</param>
            <param name="folderType">The type of project folder (e.g., Files, Project).</param>
            <returns>A task that returns a tuple containing error information and the created project folder, or null on failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.CreateFolderStructure(System.String)">
            <summary>
            Creates a folder structure for the specified path, including files and subfolders.
            </summary>
            <param name="path">The folder path to process.</param>
            <returns>The created folder structure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.CreateFolderStructureAsync(System.String)">
            <summary>
            Asynchronously creates a folder structure for the specified path, including files and subfolders.
            </summary>
            <param name="path">The folder path to process.</param>
            <returns>A task that returns the created folder structure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.RefreshProject(System.String)">
            <summary>
            Refreshes the metadata for a specified project by re-scanning its folder for new files.
            </summary>
            <param name="projectName">The name of the project to refresh.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.RefreshProjectAsync(System.String)">
            <summary>
            Asynchronously refreshes the metadata for a specified project by re-scanning its folder for new files.
            </summary>
            <param name="projectName">The name of the project to refresh.</param>
            <returns>A task that returns error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.IsFileValid(System.String)">
            <summary>
            Checks if a file has a valid extension supported by the data drivers.
            </summary>
            <param name="filename">The name or path of the file to validate.</param>
            <returns>True if the file extension is supported, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.GetCategoryForFile(System.String,System.String)">
            <summary>
            Finds the category folder containing the specified file.
            </summary>
            <param name="fileName">The name of the file to check.</param>
            <param name="rootName">The root name of the category (e.g., "FILE").</param>
            <returns>The name of the category folder containing the file, or null if not found.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.GetProjects(TheTechIdea.Beep.Utilities.ProjectFolderType)">
            <summary>
            Retrieves a list of projects filtered by folder type.
            </summary>
            <param name="folderType">The type of project folder to filter (e.g., Files, Project).</param>
            <returns>A list of projects matching the specified folder type.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.GetAllProjects(System.Boolean)">
            <summary>
            Retrieves all projects, optionally filtered by active status.
            </summary>
            <param name="onlyActive">If true, returns only active projects.</param>
            <returns>A list of projects.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.UpdateProjectMetadata(System.String,System.Action{TheTechIdea.Beep.FileManager.RootFolder})">
            <summary>
            Updates metadata for a specified project.
            </summary>
            <param name="projectName">The name of the project to update.</param>
            <param name="updateAction">The action to update the project's metadata.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.RemoveProject(System.String)">
            <summary>
            Removes a project from the configuration.
            </summary>
            <param name="projectName">The name of the project to remove.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.ArchiveProject(System.String)">
            <summary>
            Archives a project by marking it as inactive.
            </summary>
            <param name="projectName">The name of the project to archive.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.ValidateProjectPath(System.String)">
            <summary>
            Validates a project path for existence, write permissions, and valid files.
            </summary>
            <param name="path">The folder path to validate.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.AddCategoryFolder(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Adds a new category folder to the configuration.
            </summary>
            <param name="folderName">The name of the category folder.</param>
            <param name="rootName">The root name of the category (e.g., "FILE").</param>
            <param name="fileNames">Optional list of file names to add to the category.</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.RemoveCategoryFolder(System.String,System.String)">
            <summary>
            Removes a category folder from the configuration.
            </summary>
            <param name="folderName">The name of the category folder to remove.</param>
            <param name="rootName">The root name of the category (e.g., "FILE").</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileConnectionHelper.MoveFileToCategory(System.String,System.String,System.String,System.String)">
            <summary>
            Moves a file from one category folder to another.
            </summary>
            <param name="fileName">The name of the file to move.</param>
            <param name="sourceCategory">The source category folder name.</param>
            <param name="targetCategory">The target category folder name.</param>
            <param name="rootName">The root name of the categories (e.g., "FILE").</param>
            <returns>Error information indicating success or failure.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.FileHelper">
            <summary>
            Helper class that provides methods for file operations and management.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.GetFileExtensions(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Retrieves supported file extensions for data drivers.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.GetFileDataSources(TheTechIdea.Beep.Editor.IDMEEditor)">
            <summary>
            Retrieves a list of file-based data sources.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.GetSupportedFilesInDirectory(TheTechIdea.Beep.Editor.IDMEEditor,System.String,System.Boolean)">
            <summary>
            Gets all files with supported extensions in a directory
            </summary>
            <param name="DMEEditor">The DME editor instance</param>
            <param name="directoryPath">Directory path to search</param>
            <param name="searchSubdirectories">Whether to search subdirectories</param>
            <returns>List of file paths with supported extensions</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ExtensionExists(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Checks if a specific file extension is supported.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.GetMimeType(System.String)">
            <summary>
            Gets the MIME type for a file based on its extension
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>MIME type as string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.FileExists(TheTechIdea.Beep.Editor.IDMEEditor,System.String)">
            <summary>
            Checks if a file exists in the configuration.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.IsFileAccessible(System.String)">
            <summary>
            Checks if a file is accessible for read/write operations
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ValidateCsvStructure(System.String,System.Int32)">
            <summary>
            Validates the structure of a CSV file against expected column count
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.GetFileSize(System.String)">
            <summary>
            Gets the size of a file in bytes
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.GetFileCreationDate(System.String)">
            <summary>
            Gets the creation date of a file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.GetFileModificationDate(System.String)">
            <summary>
            Gets the last modification date of a file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ComputeFileHash(System.String)">
            <summary>
            Computes the MD5 hash of a file
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>MD5 hash as a string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.CompareFiles(System.String,System.String)">
            <summary>
            Compares two files to check if their contents are identical
            </summary>
            <param name="filePath1">Path to the first file</param>
            <param name="filePath2">Path to the second file</param>
            <returns>True if files are identical, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.LoadFiles(TheTechIdea.Beep.Editor.IDMEEditor,System.Collections.Generic.List{System.String})">
            <summary>
            Loads files and returns their connection properties.
            </summary>
            <param name="DMEEditor">The DME editor instance</param>
            <param name="filenames">List of file paths to load</param>
            <returns>List of ConnectionProperties for the loaded files</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.GetDataSourceTypeFromExtension(System.String)">
            <summary>
            Gets the appropriate DataSourceType based on file extension
            </summary>
            <param name="extension">File extension (without dot)</param>
            <returns>The appropriate DataSourceType for the extension</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.UpdateFileStructure(TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.Boolean)">
            <summary>
            Updates the file structure by adding or removing a column.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.AddColumnToFile(System.String,System.String,System.String)">
            <summary>
            Adds a column to a CSV file with a default value.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.BackupFile(System.String)">
            <summary>
            Creates a backup of a file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.RestoreFromBackup(System.String,System.String)">
            <summary>
            Restores a file from a backup
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.DeleteIfEmpty(System.String)">
            <summary>
            Deletes a file if it's empty
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.CleanTemporaryFiles(System.String)">
            <summary>
            Cleans temporary files from a directory
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.CompressFile(System.String,System.String)">
            <summary>
            Compresses a file into a ZIP archive
            </summary>
            <param name="filePath">Path to the file to compress</param>
            <param name="zipFilePath">Path for the output ZIP file</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ExtractZipFile(System.String,System.String)">
            <summary>
            Extracts a file from a ZIP archive
            </summary>
            <param name="zipFilePath">Path to the ZIP file</param>
            <param name="extractPath">Path to extract files to</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.CountRows(System.String)">
            <summary>
            Counts the number of rows in a text file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.AppendContentToFile(System.String,System.String)">
            <summary>
            Appends content to a file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ReadLastNLines(System.String,System.Int32)">
            <summary>
            Reads the last N lines from a file
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ConvertFileEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Converts a file's encoding
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ConvertCsvToJson(System.String)">
            <summary>
            Converts a CSV file to a JSON string
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ConvertJsonToCsv(System.String,System.String)">
            <summary>
            Converts a JSON file to CSV format
            </summary>
            <param name="jsonFilePath">Path to the JSON file</param>
            <param name="outputCsvPath">Path to save the CSV file</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ParseJsonFile``1(System.String)">
            <summary>
            Parses a JSON file to a generic object structure
            </summary>
            <typeparam name="T">Type to deserialize to</typeparam>
            <param name="jsonFilePath">Path to the JSON file</param>
            <returns>Deserialized object or default(T) if failed</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ParseXmlFile(System.String)">
            <summary>
            Parses an XML file to an XDocument
            </summary>
            <param name="xmlFilePath">Path to the XML file</param>
            <returns>XDocument or null if failed</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.QueryCsvFile(System.String,System.String,System.String)">
            <summary>
            Queries a CSV file for specific data
            </summary>
            <param name="csvFilePath">Path to the CSV file</param>
            <param name="columnName">Column to filter on</param>
            <param name="filterValue">Value to filter for</param>
            <returns>List of matching rows as string arrays</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ReadFileAsync(System.String)">
            <summary>
            Asynchronously reads all text from a file
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>File content as string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.WriteFileAsync(System.String,System.String)">
            <summary>
            Asynchronously writes text to a file
            </summary>
            <param name="filePath">Path to the file</param>
            <param name="content">Content to write</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.CopyFileAsync(System.String,System.String,System.Int32)">
            <summary>
            Asynchronously copies a file
            </summary>
            <param name="sourceFile">Source file path</param>
            <param name="destinationFile">Destination file path</param>
            <param name="bufferSize">Buffer size in bytes</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.DataTableToCsvFile(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Converts a DataTable to a CSV file
            </summary>
            <param name="dataTable">DataTable to convert</param>
            <param name="filePath">Path to save the CSV file</param>
            <param name="includeHeaders">Whether to include column headers</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.ListToCsvFile``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Converts a list to a CSV file
            </summary>
            <param name="list">List to convert</param>
            <param name="filePath">Path to save the CSV file</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.EscapeCsvField(System.String)">
            <summary>
            Escapes a field value for CSV format
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.CreateDataTableFromCsvFile(System.String,System.Boolean)">
            <summary>
            Creates a DataTable from a CSV file
            </summary>
            <param name="filePath">Path to the CSV file</param>
            <param name="hasHeader">Whether the CSV file has headers</param>
            <returns>DataTable with the CSV data</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.SplitCsvLine(System.String)">
            <summary>
            Splits a CSV line into individual fields, handling quoted fields correctly
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.DownloadFile(System.String,System.String,System.String)">
            <summary>
            Downloads a file from a URL to a local path
            </summary>
            <param name="url">URL to download from</param>
            <param name="downloadFileName">Name of the file to save</param>
            <param name="downloadFilePath">Path to save the file</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.DownloadFileAsync(System.String,System.String,System.String)">
            <summary>
            Downloads a file asynchronously from a URL to a local path
            </summary>
            <param name="url">URL to download from</param>
            <param name="downloadFileName">Name of the file to save</param>
            <param name="downloadFilePath">Path to save the file</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.IsFileValid(System.String)">
            <summary>
            Checks if a file is valid (exists and not locked)
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>True if the file is valid, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.GetFileInfo(System.String)">
            <summary>
            Creates a FileInfo object for the given file path
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>FileInfo object or null if file doesn't exist</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.CreateFileDataConnection(System.String)">
            <summary>
            Creates a connection properties object from a file path
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>ConnectionProperties object</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.CreateFileConnections(System.String[])">
            <summary>
            Creates a list of connection properties from an array of file paths
            </summary>
            <param name="filePaths">Array of file paths</param>
            <returns>List of ConnectionProperties objects</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.CreateFileExtensionString(System.String)">
            <summary>
            Creates a string for use in file dialogs listing all supported extensions
            </summary>
            <param name="extensions">Optional list of specific extensions to include</param>
            <returns>File dialog filter string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.EnsureDirectoryExists(System.String)">
            <summary>
            Ensures a directory exists, creating it if necessary
            </summary>
            <param name="directoryPath">Path to the directory</param>
            <returns>True if the directory exists or was created, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.GetDirectorySize(System.String,System.Boolean)">
            <summary>
            Gets the size of a directory in bytes
            </summary>
            <param name="directoryPath">Path to the directory</param>
            <param name="includeSubdirectories">Whether to include subdirectories in the calculation</param>
            <returns>Size of the directory in bytes</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.FileHelper.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory and its contents to another location
            </summary>
            <param name="sourceDir">Source directory path</param>
            <param name="destinationDir">Destination directory path</param>
            <param name="overwrite">Whether to overwrite existing files</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.DatabaseFeature">
            <summary>
            Defines the database features that can be supported by different data sources
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.DatabaseFeature.WindowFunctions">
            <summary>Window functions like ROW_NUMBER(), RANK(), etc.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.DatabaseFeature.Json">
            <summary>Native JSON data type and operations</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.DatabaseFeature.Xml">
            <summary>Native XML data type and operations</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.DatabaseFeature.TemporalTables">
            <summary>Temporal tables for time-based data tracking</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.DatabaseFeature.FullTextSearch">
            <summary>Full-text search capabilities</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.DatabaseFeature.Partitioning">
            <summary>Table partitioning support</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.DatabaseFeature.ColumnStore">
            <summary>Columnar storage format</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.TransactionOperation">
            <summary>
            Defines transaction operations that can be performed
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.TransactionOperation.Begin">
            <summary>Begin a new transaction</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.TransactionOperation.Commit">
            <summary>Commit the current transaction</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.TransactionOperation.Rollback">
            <summary>Rollback the current transaction</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelper">
            <summary>
            Helper class for interacting with a Relational Database Management System (RDBMS).
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GetSchemasorDatabases(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Gets the query for fetching schemas or databases that the specified user has access to.
            </summary>
            <param name="rdbms">The type of database system.</param>
            <param name="userName">The username to check privileges for (can be null for some database systems).</param>
            <returns>A SQL query string to retrieve accessible schemas or databases, or empty string if not supported.</returns>
            <remarks>
            This method generates system-specific queries to list schemas/databases based on the database type.
            For relational databases, it returns SQL queries that consider user permissions.
            For NoSQL and other database types, it returns appropriate commands or empty string if listing
            is not supported through standard queries.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GetSchemasorDatabasesSafe(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Boolean)">
            <summary>
            Gets the query for fetching schemas or databases with built-in error handling.
            </summary>
            <param name="rdbms">The type of database system.</param>
            <param name="userName">The username to check privileges for.</param>
            <param name="throwOnError">Whether to throw exceptions for errors (default: false).</param>
            <returns>A tuple containing the query string and a success indicator.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.ValidateSchemaQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Validates a generated database schema query and provides error information.
            </summary>
            <param name="rdbms">Database type for the query</param>
            <param name="userName">Username used in the query</param>
            <param name="query">The generated query string (if already created)</param>
            <returns>A QueryValidationResult containing validation status and details</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryValidationResult">
            <summary>
            Result class for query validation containing error information.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryValidationResult.IsValid">
            <summary>
            Gets or sets a value indicating whether the query is valid.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryValidationResult.Query">
            <summary>
            Gets or sets the validated query string.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryValidationResult.ErrorMessage">
            <summary>
            Gets or sets the error message when validation fails.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryValidationResult.ErrorType">
            <summary>
            Gets or sets the type of error encountered.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryValidationResult.Suggestion">
            <summary>
            Gets or sets suggestion for resolving the error.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryValidationResult.Warnings">
            <summary>
            Gets the list of warnings that don't invalidate the query but should be considered.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryValidationResult.AddWarning(System.String)">
            <summary>
            Adds a warning to the validation result.
            </summary>
            <param name="warning">Warning message to add</param>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryErrorType">
            <summary>
            Defines the types of errors that can occur in query validation.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryErrorType.None">
            <summary>No error.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryErrorType.UnsupportedDatabase">
            <summary>The database type is not supported.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryErrorType.SyntaxError">
            <summary>The query contains syntax errors.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryErrorType.PermissionIssue">
            <summary>The operation requires permissions the user may not have.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryErrorType.SecurityRisk">
            <summary>The query contains potential security risks.</summary>
        </member>
        <member name="F:TheTechIdea.Beep.Helpers.RDBMSHelper.QueryErrorType.Other">
            <summary>Other error types.</summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.IsSqlStatementValid(System.String)">
            <summary>Checks if a given SQL statement is valid.</summary>
            <param name="sqlString">The SQL statement to be validated.</param>
            <returns>True if the SQL statement is valid, false otherwise.</returns>
            <remarks>
            The method checks if the SQL statement contains any of the common SQL keywords such as SELECT, INSERT, UPDATE, DELETE, etc.
            It uses a regular expression pattern to match the keywords in a case-insensitive manner.
            </remarks>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GeneratePrimaryKeyQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>Generates a SQL query to add a primary key to a table in a specific RDBMS.</summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="primaryKey">The name of the primary key column.</param>
            <param name="type">The data type of the primary key column.</param>
            <returns>A SQL query to add a primary key to the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateFetchNextSequenceValueQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>Generates a query to fetch the next value from a sequence in a specific database.</summary>
            <param name="rdbms">The type of the database.</param>
            <param name="sequenceName">The name of the sequence.</param>
            <returns>A query string to fetch the next value from the specified sequence in the given database.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the sequence name is null or empty.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateFetchLastIdentityQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>Generates a query to fetch the last inserted identity value based on the specified RDBMS.</summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="sequenceName">The name of the sequence or generator (optional for some RDBMS).</param>
            <returns>A query string to fetch the last inserted identity value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.CreateQuerySqlRepos">
            <summary>Creates a list of QuerySqlRepo objects.</summary>
            <returns>A list of QuerySqlRepo objects.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateCreateTableSQL(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Generates SQL to create a table based on an EntityStructure.</summary>
            <param name="entity">The EntityStructure containing entity definition</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GeneratePrimaryKeyFromEntity(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>Generates SQL to add a primary key to a table based on its entity structure.</summary>
            <param name="entity">The entity structure containing table and primary key information.</param>
            <returns>A tuple containing the SQL statement, success flag, and error message (if any).</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateUniqueIndexFromEntity(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates SQL to create a unique index on a table based on its entity structure.
            </summary>
            <param name="entity">The entity structure containing table and index information.</param>
            <returns>A tuple containing the SQL statement, success flag, and error message (if any).</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateInsertQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Generates a SQL query to insert data into a table in a specific RDBMS.</summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="data">The data to insert, in key-value pair format.</param>
            <returns>A SQL query to insert the data into the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS or table name is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateUpdateQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Generates a SQL query to update data in a table in a specific RDBMS.</summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="data">The data to update, in key-value pair format.</param>
            <param name="conditions">The conditions for the update, in key-value pair format.</param>
            <returns>A SQL query to update the data in the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS or table name is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateDeleteQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Generates a SQL query to delete data from a table in a specific RDBMS.</summary>
            <param name="rdbms">The type of RDBMS.</param>
            <param name="tableName">The name of the table.</param>
            <param name="conditions">The conditions for the deletion, in key-value pair format.</param>
            <returns>A SQL query to delete the data from the specified table in the specified RDBMS.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified RDBMS or table name is not supported.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GetPagingSyntax(TheTechIdea.Beep.Utilities.DataSourceType,System.Int32,System.Int32)">
            <summary>
            Gets the SQL syntax for paging results
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="pageNumber">Page number (1-based)</param>
            <param name="pageSize">Number of records per page</param>
            <returns>SQL paging syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GetDropEntity(TheTechIdea.Beep.Utilities.DataSourceType,System.String)">
            <summary>
            Generates SQL to drop an entity
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="entityName">Name of the entity to drop</param>
            <returns>SQL statement to drop the entity</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateCreateIndexQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates a query to create an index
            </summary>
            <param name="databaseType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="indexName">Name of the index</param>
            <param name="columns">Array of column names</param>
            <param name="options">Optional index creation options</param>
            <returns>SQL statement to create the index</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GetTransactionStatement(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.TransactionOperation)">
            <summary>
            Generates SQL statements for transaction operations
            </summary>
            <param name="databaseType">Database type</param>
            <param name="operation">Transaction operation (Begin, Commit, Rollback)</param>
            <returns>SQL statement for the transaction operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.SupportsFeature(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.DatabaseFeature)">
            <summary>
            Determines if the database type supports specific features
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="feature">Feature to check</param>
            <returns>True if the feature is supported</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GetTableExistsQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to check if a table exists
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table to check</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to check table existence</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GetColumnInfoQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to get column information for a table
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to get column information</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GetRecordCountQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String,System.String)">
            <summary>
            Generates SQL to get the count of records in a table
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table</param>
            <param name="schemaName">Schema name (optional)</param>
            <param name="whereClause">Optional WHERE clause</param>
            <returns>SQL statement to count records</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GetTruncateTableQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.String)">
            <summary>
            Generates SQL to truncate a table
            </summary>
            <param name="dataSourceType">Database type</param>
            <param name="tableName">Name of the table to truncate</param>
            <param name="schemaName">Schema name (optional)</param>
            <returns>SQL statement to truncate the table</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateDeleteEntityWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to delete records from an entity with provided values.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateInsertWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to insert records into an entity with provided values.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing field values to insert</param>
            <returns>A tuple containing the SQL statement, parameters, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GenerateUpdateEntityWithValues(TheTechIdea.Beep.DataBase.EntityStructure,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates SQL to update records in an entity with provided values and conditions.
            </summary>
            <param name="entity">The EntityStructure containing entity information</param>
            <param name="values">Dictionary containing field values to update</param>
            <param name="conditions">Dictionary containing values for the WHERE clause</param>
            <returns>A tuple containing the SQL statement, success flag, and any error message</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates an entity structure and returns errors if any.
            </summary>
            <param name="entity">The EntityStructure to validate</param>
            <returns>Tuple with validation result and error list</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.RDBMSHelper.GetIdentityClause(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Gets the identity clause SQL syntax for a specific database type
            </summary>
            <param name="databaseType">The database type</param>
            <returns>The identity clause syntax</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToList(System.String)">
            <summary>
            Converts a string to a list of strings, splitting by commas.
            </summary>
            <param name="input">The input string.</param>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts a snake_case string to PascalCase
            </summary>
            <param name="str">The snake_case string to convert</param>
            <returns>The string in PascalCase format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts a string to camelCase
            </summary>
            <param name="str">The string to convert</param>
            <returns>The string in camelCase format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToSnakeCase(System.String)">
            <summary>
            Converts a PascalCase or camelCase string to snake_case
            </summary>
            <param name="str">The string to convert</param>
            <returns>The string in snake_case format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToKebabCase(System.String)">
            <summary>
            Converts a PascalCase or camelCase string to kebab-case
            </summary>
            <param name="str">The string to convert</param>
            <returns>The string in kebab-case format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.Truncate(System.String,System.Int32,System.Boolean)">
            <summary>
            Truncates a string to the specified maximum length
            </summary>
            <param name="str">The string to truncate</param>
            <param name="maxLength">Maximum length</param>
            <param name="appendEllipsis">Whether to append "..." if truncated</param>
            <returns>The truncated string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Removes diacritics (accents) from a string
            </summary>
            <param name="text">The string to normalize</param>
            <returns>String without diacritics</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidEmail(System.String)">
            <summary>
            Checks if a string is a valid email address
            </summary>
            <param name="email">String to validate</param>
            <returns>True if valid email format, otherwise false</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsNumeric(System.String)">
            <summary>
            Checks if a string contains only numeric characters
            </summary>
            <param name="str">The string to check</param>
            <returns>True if string contains only numbers</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidDate(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Checks if a string is a valid date according to the specified format
            </summary>
            <param name="dateString">The date string to validate</param>
            <param name="format">The expected date format (null for culture default)</param>
            <param name="culture">The culture to use (null for current culture)</param>
            <returns>True if valid date, otherwise false</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ExtractNumbers(System.String)">
            <summary>
            Extracts all numeric digits from a string
            </summary>
            <param name="str">The input string</param>
            <returns>A string containing only the numeric digits</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.Capitalize(System.String)">
            <summary>
            Converts first character of the string to uppercase
            </summary>
            <param name="str">The string to capitalize</param>
            <returns>String with first letter capitalized</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.SplitCamelCase(System.String)">
            <summary>
            Splits a string by capital letters (useful for breaking apart identifiers)
            </summary>
            <param name="str">The string to split</param>
            <returns>A string with spaces before capital letters</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidJson(System.String)">
            <summary>
            Checks if a string is valid JSON
            </summary>
            <param name="strInput">String to check</param>
            <returns>True if valid JSON, otherwise false</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToList(System.String,System.Char)">
            <summary>
            Converts a delimited string to a list of strings
            </summary>
            <param name="input">The delimited string</param>
            <param name="delimiter">The delimiter character</param>
            <returns>A list of strings</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ContainsAny(System.String,System.String[])">
            <summary>
            Checks if a string contains any of the specified substrings
            </summary>
            <param name="str">The string to check</param>
            <param name="values">The substrings to look for</param>
            <returns>True if string contains any of the specified substrings</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ContainsAll(System.String,System.String[])">
            <summary>
            Checks if a string contains all the specified substrings
            </summary>
            <param name="str">The string to check</param>
            <param name="values">The substrings to look for</param>
            <returns>True if string contains all the specified substrings</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.DefaultIfEmpty(System.String,System.String)">
            <summary>
            Returns the string or a default value if the string is null or empty
            </summary>
            <param name="str">The string to check</param>
            <param name="defaultValue">The default value to return if string is null or empty</param>
            <returns>The original string or the default value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidFilePath(System.String)">
            <summary>
            Checks if a string is a valid file path
            </summary>
            <param name="path">The path to validate</param>
            <returns>True if valid file path, otherwise false</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.Between(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Extracts a substring between two specified strings
            </summary>
            <param name="source">The source string</param>
            <param name="start">The starting string</param>
            <param name="end">The ending string</param>
            <param name="includeStartEnd">Whether to include the start and end strings</param>
            <returns>The extracted substring or empty if not found</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses a string
            </summary>
            <param name="str">The string to reverse</param>
            <returns>The reversed string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.EscapeSql(System.String,System.Char)">
            <summary>
            Properly escapes a string for SQL to prevent SQL injection
            </summary>
            <param name="str">String to be escaped</param>
            <param name="quoteChar">Quote character (default is single quote)</param>
            <returns>SQL-safe string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToSqlInClause(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a delimited SQL string (IN clause) from a list of strings
            </summary>
            <param name="values">Collection of string values</param>
            <returns>Delimited string for SQL IN clause</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToSqlIdentifier(System.String)">
            <summary>
            Convert a string to a valid SQL identifier by removing invalid characters
            </summary>
            <param name="str">String to convert</param>
            <returns>Valid SQL identifier</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.FormatAsPhoneNumber(System.String)">
            <summary>
            Format a string as a phone number
            </summary>
            <param name="phoneNumber">String to format</param>
            <returns>Formatted phone number</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.FormatAsSSN(System.String)">
            <summary>
            Format a string as a social security number (XXX-XX-XXXX)
            </summary>
            <param name="ssn">String to format as SSN</param>
            <returns>Formatted SSN</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.FormatAsCreditCard(System.String,System.Char)">
            <summary>
            Format a credit card number with dashes and mask middle digits
            </summary>
            <param name="cardNumber">Card number to format</param>
            <param name="maskChar">Character to use for masking (default '*')</param>
            <returns>Masked credit card number</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidUrl(System.String)">
            <summary>
            Checks if a string is a valid URL
            </summary>
            <param name="url">URL to validate</param>
            <returns>True if valid URL</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsGuid(System.String)">
            <summary>
            Validates if a string follows the GUID format
            </summary>
            <param name="str">The string to check</param>
            <returns>True if the string is a valid GUID format</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsAlphaOnly(System.String)">
            <summary>
            Checks if a string contains only letters (no numbers or special characters)
            </summary>
            <param name="str">String to check</param>
            <returns>True if contains only letters</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidIpAddress(System.String)">
            <summary>
            Checks if a string is a valid IPv4 or IPv6 address
            </summary>
            <param name="ipAddress">String to validate</param>
            <returns>True if valid IP address</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.IsValidCreditCardNumber(System.String)">
            <summary>
            Checks if a string is a valid credit card number (using Luhn algorithm)
            </summary>
            <param name="cardNumber">Card number to validate</param>
            <returns>True if valid credit card number</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToEnum``1(System.String,System.Boolean,``0)">
            <summary>
            Tries to parse a string to a specific enum type
            </summary>
            <typeparam name="TEnum">Type of enum</typeparam>
            <param name="value">String value to parse</param>
            <param name="ignoreCase">Whether to ignore case</param>
            <param name="defaultValue">Default value if parsing fails</param>
            <returns>Parsed enum value or default</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.FromBase64(System.String)">
            <summary>
            Converts a base64 string to bytes
            </summary>
            <param name="base64String">Base64 encoded string</param>
            <returns>Decoded byte array or null if invalid</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts a string to bytes using the specified encoding
            </summary>
            <param name="str">String to convert</param>
            <param name="encoding">Text encoding to use (default UTF8)</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToDateTime(System.String,System.String,System.DateTime,System.IFormatProvider)">
            <summary>
            Attempts to convert a string to a DateTime with specified format and culture
            </summary>
            <param name="dateString">Date string to parse</param>
            <param name="format">Format specifier</param>
            <param name="defaultValue">Default value if parsing fails</param>
            <param name="provider">Format provider (culture)</param>
            <returns>Parsed DateTime or default</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToMD5Hash(System.String)">
            <summary>
            Computes MD5 hash of a string (for checksums, not for passwords)
            </summary>
            <param name="input">Input string</param>
            <returns>MD5 hash as a hex string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.StringExtensions.ToSHA256Hash(System.String)">
            <summary>
            Computes SHA256 hash of a string
            </summary>
            <param name="input">Input string</param>
            <returns>SHA256 hash as a hex string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.TestConnectionHelper.TestConnectionAsync(TheTechIdea.Beep.DriversConfigurations.ConnectionDriversConfig,System.Int32)">
            <summary>
            Tests a connection configuration to verify it can connect successfully
            </summary>
            <param name="config">The connection configuration to test</param>
            <param name="timeout">Connection timeout in seconds</param>
            <returns>A tuple with success flag and error message (if any)</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.TypeHelper.GetInstance(System.Type)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which  
            the method is invoked.
            </summary>
            <param name="type"> 
            The type on which the method was invoked. 
            </param>
            <returns> 
            An instance of the <paramref name="type"/>. 
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.TypeHelper.GetInstance``1(System.Type,``0)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which  
            the method is invoked.
            </summary>
            <typeparam name="TArg"> 
            The type of the argument to pass to the constructor. 
            </typeparam>
            <param name="type"> 
            The type on which the method was invoked. 
            </param>
            <param name="argument"> 
            The argument to pass to the constructor. 
            </param>
            <returns> 
            An instance of the given <paramref name="type"/>. 
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.TypeHelper.GetInstance``2(System.Type,``0,``1)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which  
            the method is invoked.
            </summary>
            <typeparam name="TArg1"> 
            The type of the first argument to pass to the constructor. 
            </typeparam>
            <typeparam name="TArg2"> 
            The type of the second argument to pass to the constructor. 
            </typeparam>
            <param name="type"> 
            The type on which the method was invoked. 
            </param>
            <param name="argument1"> 
            The first argument to pass to the constructor. 
            </param>
            <param name="argument2"> 
            The second argument to pass to the constructor. 
            </param>
            <returns> 
            An instance of the given <paramref name="type"/>. 
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.TypeHelper.GetInstance``3(System.Type,``0,``1,``2)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which 
            the method is invoked.
            </summary>
            <typeparam name="TArg1"> 
            The type of the first argument to pass to the constructor. 
            </typeparam>
            <typeparam name="TArg2"> 
            The type of the second argument to pass to the constructor. 
            </typeparam>
            <typeparam name="TArg3"> 
            The type of the third argument to pass to the constructor. 
            </typeparam>
            <param name="type"> 
            The type on which the method was invoked. 
            </param>
            <param name="argument1"> 
            The first argument to pass to the constructor. 
            </param>
            <param name="argument2"> 
            The second argument to pass to the constructor. 
            </param>
            <param name="argument3"> 
            The third argument to pass to the constructor. 
            </param>
            <returns> 
            An instance of the given <paramref name="type"/>. 
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.GenerateVectorDatabaseCommand(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.VectorDatabaseHelper.VectorDatabaseOperation,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates vector database-specific query commands based on database type
            </summary>
            <param name="dataSourceType">Vector database type</param>
            <param name="operationType">Operation to perform (search, insert, delete)</param>
            <param name="parameters">Dictionary of parameters specific to the operation</param>
            <returns>A command string for the specified vector database operation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.IsVectorDatabase(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Checks if a given data source type is a vector database
            </summary>
            <param name="dataSourceType">The data source type to check</param>
            <returns>True if the data source is a vector database, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.GetVectorDatabaseCollections(TheTechIdea.Beep.Utilities.DataSourceType)">
            <summary>
            Generates metadata queries for vector databases to list collections or schemas
            </summary>
            <param name="dataSourceType">Vector database type</param>
            <returns>A query string to list collections/tables in the vector database</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.GenerateVectorSimilaritySearchQuery(TheTechIdea.Beep.Utilities.DataSourceType,System.String,System.Int32,System.Int32)">
            <summary>
            Generates a vector similarity search query for the specified database
            </summary>
            <param name="dataSourceType">Vector database type</param>
            <param name="collectionName">Name of the collection to search</param>
            <param name="vectorDimension">Dimension of the vector</param>
            <param name="topK">Number of results to return</param>
            <returns>A similarity search query template for the specified vector database</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.CreateVectorDatabaseQueries">
            <summary>
            Creates a list of QuerySqlRepo objects for vector databases.
            </summary>
            <returns>A list of QuerySqlRepo objects for vector databases.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.VectorDatabaseOperation">
            <summary>
            Operations that can be performed on vector databases
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Helpers.VectorDatabaseHelper.ValidateVectorDatabaseParameters(TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.Helpers.VectorDatabaseHelper.VectorDatabaseOperation,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Validates parameters for vector database operations
            </summary>
            <param name="dataSourceType">Vector database type</param>
            <param name="operation">Operation to perform</param>
            <param name="parameters">Parameters for the operation</param>
            <returns>Tuple with validation result and error message</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Json.JsonDataSource">
            <summary>
            JsonDataSource provides CRUD operations on a JSON file acting as a data source.
            It implements IDataSource and manages entities derived from JSON objects/arrays.
            This class supports reading, writing, updating, and deleting JSON objects from a file,
            and includes the ability to generate EntityStructures dynamically.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.#ctor(System.String,TheTechIdea.Beep.Logger.IDMLogger,TheTechIdea.Beep.Editor.IDMEEditor,TheTechIdea.Beep.Utilities.DataSourceType,TheTechIdea.Beep.ConfigUtil.IErrorsInfo)">
            <summary>
            Constructor initializing JsonDataSource with a specified data source name, logger, editor, and datasource type.
            It attempts to load the JSON file associated with the connection specified in the DMEEditor.ConfigEditor.
            </summary>
            <param name="datasourcename">Name of the data source</param>
            <param name="logger">Logger implementation</param>
            <param name="pDMEEditor">Editor reference</param>
            <param name="databasetype">Type of the data source</param>
            <param name="per">Error object to accumulate errors</param>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.ColumnDelimiter">
            <summary>
            Delimiter used to separate columns if needed.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.ParameterDelimiter">
            <summary>
            Delimiter used to separate parameters if needed.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.GuidID">
            <summary>
            GUID of the data source instance.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.DatasourceType">
            <summary>
            Type of the data source (e.g., Json).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.Category">
            <summary>
            Category of the data source (e.g., FILE).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.Dataconnection">
            <summary>
            Data connection used to manage file paths and properties.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.DatasourceName">
            <summary>
            Name of the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.ErrorObject">
            <summary>
            Error object instance used to store and report errors.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.Id">
            <summary>
            Identifier for this data source instance.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.Logger">
            <summary>
            Logger instance for logging operations.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.EntitiesNames">
            <summary>
            List of entity names recognized by this data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.Entities">
            <summary>
            List of entity structures representing schema-like information for each entity.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.DMEEditor">
            <summary>
            Reference to the main editor instance.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.ConnectionStatus">
            <summary>
            Current connection state of the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.FileName">
            <summary>
            Path to the JSON file managed by this data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.ObjectsCreated">
            <summary>
            Indicates whether objects (structures, types) have been created.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Json.JsonDataSource.DataStruct">
            <summary>
            Holds the current entity structure being operated on.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.Json.JsonDataSource.PassEvent">
            <summary>
            Event triggered to pass arguments between components.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.BeginTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Begin a database transaction. Not implemented for JSON.
            </summary>
            <param name="args">Passed arguments</param>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.Commit(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Commit a database transaction. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.EndTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Ends a database transaction. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.ExecuteSql(System.String)">
            <summary>
            Executes a SQL query against the data source. Not applicable for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.RunScript(TheTechIdea.Beep.Editor.ETLScriptDet)">
            <summary>
            Runs a provided script (DML/DDL). Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.Openconnection">
            <summary>
            Opens a connection to the JSON file by reading and parsing it.
            Returns the resulting state.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.Closeconnection">
            <summary>
            Closes the connection to the JSON file and ensures that any changes are saved.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.CheckEntityExist(System.String)">
            <summary>
            Checks if an entity with the specified name exists in the data source.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.CreateEntities(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>
            Creates multiple entities as specified by a list of EntityStructure objects.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.CreateEntityAs(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Creates a single entity based on the provided EntityStructure.
            Note: This implementation assumes a root JSON array and adds a new JSON object for the entity schema.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.DeleteEntity(System.String,System.Object)">
            <summary>
            Deletes an entity (or an item within it) matching certain criteria.
            Currently, the method is a placeholder. You need to provide a 'MatchesCriteria' extension or logic.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetChildTablesList(System.String,System.String,System.String)">
            <summary>
            Returns a list of child relations for a given table. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetCreateEntityScript(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>
            Returns a list of scripts to create entities, if applicable. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntitesList">
            <summary>
            Returns a list of entity names managed by this data source.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Retrieves entity data as objects. Each object is constructed dynamically from the JSON array.
            </summary>
            <param name="entityName">Name of the entity to retrieve</param>
            <param name="filter">Filter criteria (not fully implemented)</param>
            <returns>Collection of objects representing the entity data</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter},System.Int32,System.Int32)">
            <summary>
            Retrieves a paginated subset of the entity data.
            This version returns dynamic objects (ExpandoObjects).
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityAsync(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Asynchronously retrieves entity data. Uses GetEntity internally.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityforeignkeys(System.String,System.String)">
            <summary>
            Returns foreign keys for an entity. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityIdx(System.String)">
            <summary>
            Returns the index of a given entity in the Entities list.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityStructure(System.String,System.Boolean)">
            <summary>
            Retrieves the EntityStructure for a given entity name.
            If refresh is true, it may re-parse the entity structure.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure,System.Boolean)">
            <summary>
            Overload that retrieves the EntityStructure from an existing structure object.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetEntityType(System.String)">
            <summary>
            Dynamically constructs a .NET Type for the given entity based on its fields.
            Uses DMTypeBuilder utility.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetScalar(System.String)">
            <summary>
            Retrieves a scalar value from the data source. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetScalarAsync(System.String)">
            <summary>
            Asynchronously retrieves a scalar value. Not implemented for JSON.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.RunQuery(System.String)">
            <summary>
            Runs a given query against the JSON data using JSONPath-like syntax.
            Attempts to match entity structure and return a list of objects.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.UpdateEntities(System.String,System.Object,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Updates multiple entities at once by replacing the root JSON array content.
            Expects UploadData to be a JArray that replaces the entire root array.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.UpdateEntity(System.String,System.Object)">
            <summary>
            Updates a single entity by locating it (e.g., via an '_id') and replacing fields from UploadDataRow.
            Expects UploadDataRow to be a JObject containing updated fields.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.InsertEntity(System.String,System.Object)">
            <summary>
            Inserts a new entity/object into the JSON array.
            Expects InsertedData to be an object (e.g., JObject) that can be converted to JToken.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.Dispose(System.Boolean)">
            <summary>
            Dispose pattern implementation to clean up resources.
            </summary>
            <param name="disposing">True if managed resources should be disposed.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.Dispose">
            <summary>
            Public Dispose method to clean up resources.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.SaveJson(System.String)">
            <summary>
            Writes the current _rootJsonArray to the file with indentation.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.ReadJson(System.String)">
            <summary>
            Reads the JSON content from the specified file and initializes internal structures.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.ParseJsonObject(Newtonsoft.Json.Linq.JObject,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Parses a JSON object as if it's the first record in an array.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.ParseJsonArray(Newtonsoft.Json.Linq.JArray,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Parses a JSON array to create an EntityStructure and discover fields.
            Expects uniform objects or at least compatible structures.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.InitializeRootJsonObject">
            <summary>
            Initializes _rootJsonObject by reading and parsing the file at FileName.
            If file does not exist or is empty, initializes an empty JArray.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.GetRootJsonArray">
            <summary>
            Returns the root JSON array if available. If not, returns null.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.CreateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Constructs an EntityStructure with given name and path.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.CreateEntityField(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Creates an EntityField from a JSON property, determining field type dynamically.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.UpdateEntityStructureWithMissingFields(Newtonsoft.Json.Linq.JObject,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Ensures that any fields present in the given JObject but not defined in the EntityStructure are added.
            This keeps the entity schema consistent with the data.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.SetObjects(System.String)">
            <summary>
            Prepares objects for operations on a specified entity if not done or if a different entity is requested.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.SynchronizeEntityStructure">
            <summary>
            Synchronizes the JSON data with the current EntityStructure.
            Adds missing fields and removes fields not present in the EntityStructure.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.ValidateSchema">
            <summary>
            Validates that the JSON schema matches the current EntityStructure.
            Logs discrepancies for missing or extra fields.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Json.JsonDataSource.HandleSchemaChanges">
            <summary>
            Handles schema changes dynamically, including adding and removing fields.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Rules.BuiltinRules.GetRecordCount.RuleText">
            <summary>
            The textual expression that defines the rule's logic.
            For example:Rule Test Should be 
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Rules.BuiltinRules.GetSystemDate.RuleText">
            <summary>
            The textual expression that defines the rule's logic.
            For example: ":Entity1.LastName == 'Smith'" or other valid expressions.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateWebApiControllers(System.String,System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String)">
            <summary>
            Generates Web API controller classes for the provided entities in a specified data source.
            </summary>
            <param name="dataSourceName">The name of the data source.</param>
            <param name="entities">List of entity structures to generate controllers for.</param>
            <param name="outputPath">The directory to save the generated controller files.</param>
            <param name="namespaceName">The namespace for the generated controllers.</param>
            <returns>A list of paths to the generated controller files.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateControllerCode(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates the code for a Web API controller for the specified entity.
            </summary>
            <param name="dataSourceName">The name of the data source.</param>
            <param name="entity">The entity structure to generate a controller for.</param>
            <param name="className">The name of the controller class.</param>
            <param name="namespaceName">The namespace for the controller class.</param>
            <returns>The generated C# code for the controller.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateWebApiControllerForEntityWithParams(System.String,System.String,System.String)">
            <summary>
            Generates a Web API controller class for a single entity, with data source and entity name as parameters in API methods.
            </summary>
            <param name="className">The name of the controller class to be generated.</param>
            <param name="outputPath">The directory to save the generated controller file.</param>
            <param name="namespaceName">The namespace for the generated controller.</param>
            <returns>The path to the generated controller file.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateControllerCodeWithParams(System.String,System.String)">
            <summary>
            Generates the code for a Web API controller with data source and entity name as parameters.
            </summary>
            <param name="className">The name of the controller class.</param>
            <param name="namespaceName">The namespace for the controller class.</param>
            <returns>The generated C# code for the controller.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateMinimalWebApi(System.String,System.String)">
            <summary>
            Generates a minimal Web API for an entity using .NET 8's Minimal API approach.
            </summary>
            <param name="outputPath">The directory to save the generated API file.</param>
            <param name="namespaceName">The namespace for the generated API.</param>
            <returns>The path to the generated API file.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateMinimalApiCode(System.String)">
            <summary>
            Generates the code for a minimal API using .NET 8.
            </summary>
            <param name="namespaceName">The namespace for the API.</param>
            <returns>The generated C# code for the API.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.ValidateEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Validates the given EntityStructure to ensure it meets class generation requirements.
            </summary>
            <param name="entity">The EntityStructure to validate.</param>
            <returns>A list of validation errors. If empty, the entity is valid.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateDataAccessLayer(TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Generates a data access layer class for an entity.
            </summary>
            <param name="entity">The EntityStructure to generate the DAL class for.</param>
            <param name="outputPath">The output path to save the class file.</param>
            <returns>The path to the generated DAL class file.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateUnitTestClass(TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Generates a unit test class template for an entity.
            </summary>
            <param name="entity">The EntityStructure to generate the test class for.</param>
            <param name="outputPath">The output path to save the test class file.</param>
            <returns>The path to the generated test class file.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateDbContext(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String)">
            <summary>
            Generates an EF DbContext class for the given list of entities.
            </summary>
            <param name="entities">The list of EntityStructures.</param>
            <param name="namespaceString">The namespace for the DbContext class.</param>
            <param name="outputPath">The output path for the generated DbContext file.</param>
            <returns>Path to the generated DbContext file.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateEntityConfiguration(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates EF Core configuration classes for the given entity.
            </summary>
            <param name="entity">The EntityStructure to generate configuration for.</param>
            <param name="namespaceString">The namespace for the configuration class.</param>
            <param name="outputPath">The output path for the generated configuration file.</param>
            <returns>Path to the generated configuration file.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateRecordClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Generates a class with C# record type for immutable data models
            </summary>
            <param name="recordName">Name of the record to create</param>
            <param name="entity">Entity structure to base the record on</param>
            <param name="outputPath">Output file path</param>
            <param name="namespaceName">Namespace to use</param>
            <param name="generateFile">Whether to generate physical file</param>
            <returns>The generated code as string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateNullableAwareClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Creates a class with support for nullable reference types
            </summary>
            <param name="className">Name of the class</param>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace name</param>
            <param name="generateNullableAnnotations">Whether to add nullable annotations</param>
            <returns>The generated code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.IsReferenceType(System.String)">
            <summary>
            Determines if a type is a reference type
            </summary>
            <param name="typeName">The name of the type</param>
            <returns>True if it's a reference type, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.CreateDDDAggregateRoot(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Creates a domain-driven design style aggregate root class from entity
            </summary>
            <param name="entity">The entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>Generated code as string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateGraphQLSchema(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String)">
            <summary>
            Generates GraphQL type definitions from entity structures
            </summary>
            <param name="entities">The entity structures to convert</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>The generated GraphQL schema</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateRepositoryImplementation(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Generates repository pattern implementation for an entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <param name="interfaceOnly">Whether to generate interface only</param>
            <returns>The generated repository code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateServerlessFunctions(TheTechIdea.Beep.DataBase.EntityStructure,System.String,TheTechIdea.Beep.Utilities.CloudProviderType)">
            <summary>
            Generates serverless function code (Azure Functions/AWS Lambda) for entity operations
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="cloudProvider">Cloud provider type (Azure, AWS, etc)</param>
            <returns>The serverless function code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateEntityDocumentation(TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Generates XML documentation from entity structure
            </summary>
            <param name="entity">Entity structure to document</param>
            <param name="outputPath">Output path</param>
            <returns>The XML documentation string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateFluentValidators(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates FluentValidation validators for entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>The validator class code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateEFCoreMigration(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates Entity Framework Core migration code for entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>The migration code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateEntityDiffReport(TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates a difference report between two versions of an entity
            </summary>
            <param name="originalEntity">Original entity</param>
            <param name="newEntity">New entity</param>
            <returns>Difference report as string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateBlazorComponent(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates Blazor component for displaying and editing entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Component namespace</param>
            <returns>The Blazor component code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.ClassCreator.GenerateGrpcService(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates gRPC service definitions for entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>The generated proto file and service implementation</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Workflow.Actions.ExpressionEvaluator">
            <summary>
            A simple evaluator for logical expressions.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Workflow.DefaultRules.BaseWorkFlowRule.ExecuteRule(TheTechIdea.Beep.Addin.PassedArgs,TheTechIdea.Beep.Rules.IRuleStructure)">
            <summary>
            Executes the rule logic. Must be implemented by derived classes.
            </summary>
            <param name="args">The input arguments for the rule execution.</param>
            <param name="rule">The rule structure defining the rule logic.</param>
            <returns>A <see cref="T:TheTechIdea.Beep.Addin.PassedArgs"/> object containing the results of the execution.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Workflow.DefaultRules.BaseWorkFlowRule.GetDefaultValue(TheTechIdea.Beep.Addin.PassedArgs,TheTechIdea.Beep.Rules.IRuleStructure)">
            <summary>
            Retrieves the default value for the rule based on the provided arguments and rule structure.
            </summary>
            <param name="args">The input arguments containing data source details.</param>
            <param name="rule">The rule structure for the current execution.</param>
            <returns>The default value for the rule, if applicable.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Workflow.DefaultRules.BaseWorkFlowRule.InitializePassedArguments(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Prepares the <see cref="T:TheTechIdea.Beep.Addin.PassedArgs"/> object for rule execution.
            Resets parameters and clears return data.
            </summary>
            <param name="args">The arguments to initialize.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Workflow.DefaultRules.BaseWorkFlowRule.OnWorkFlowRuleStarted(System.String)">
            <summary>
            Triggers the event for the start of the rule execution.
            </summary>
            <param name="message">A message describing the start event.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Workflow.DefaultRules.BaseWorkFlowRule.OnWorkFlowRuleEnded(System.String)">
            <summary>
            Triggers the event for the end of the rule execution.
            </summary>
            <param name="message">A message describing the end event.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Workflow.DefaultRules.BaseWorkFlowRule.OnWorkFlowRuleRunning(System.String)">
            <summary>
            Triggers the event for the rule running state.
            </summary>
            <param name="message">A message describing the running event.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheTechIdea.Beep.Workflow.DefaultRules.ValidateRegexMatch.ExtractRegexPattern(System.String)" -->
    </members>
</doc>
