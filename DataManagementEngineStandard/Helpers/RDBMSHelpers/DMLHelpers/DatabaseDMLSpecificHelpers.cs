using System;
using System.Collections.Generic;
using System.Linq;
using TheTechIdea.Beep.Utilities;
using TheTechIdea.Beep.DataBase;

namespace TheTechIdea.Beep.Helpers.RDBMSHelpers.DMLHelpers
{
    /// <summary>
    /// Database-specific helper methods for generating SQL syntax and handling database-specific requirements.
    /// </summary>
    public static class DatabaseDMLSpecificHelpers
    {
        /// <summary>
        /// Generates value placeholders for parameterized queries.
        /// </summary>
        /// <param name="columnCount">Number of columns</param>
        /// <param name="batchSize">Number of records per batch</param>
        /// <returns>Placeholder string for values</returns>
        public static string GenerateValuePlaceholders(int columnCount, int batchSize = 1)
        {
            var placeholder = "(" + string.Join(", ", Enumerable.Range(0, columnCount).Select(i => "?")) + ")";
            return string.Join(", ", Enumerable.Range(0, batchSize).Select(i => placeholder));
        }

        /// <summary>
        /// Generates Oracle-specific INSERT ALL syntax for bulk operations.
        /// </summary>
        /// <param name="tableName">Name of the table</param>
        /// <param name="columnList">Comma-separated column list</param>
        /// <param name="batchSize">Number of records to insert</param>
        /// <returns>Oracle INSERT ALL syntax</returns>
        public static string GenerateOracleInsertAll(string tableName, string columnList, int batchSize)
        {
            var columns = columnList.Split(',').Select(c => c.Trim()).ToArray();
            var placeholders = string.Join(" ", columns.Select(c => ":param"));
            return string.Join(" ", Enumerable.Range(0, batchSize)
                .Select(i => $"INTO {tableName} ({columnList}) VALUES ({placeholders})"));
        }

        /// <summary>
        /// Gets database-specific parameter prefix for parameterized queries.
        /// </summary>
        /// <param name="dataSourceType">Database type</param>
        /// <returns>Parameter prefix string</returns>
        public static string GetParameterPrefix(DataSourceType dataSourceType)
        {
            return dataSourceType switch
            {
                DataSourceType.SqlServer => "@",
                DataSourceType.Oracle => ":",
                DataSourceType.Mysql or DataSourceType.Postgre or DataSourceType.SqlLite => "?",
                _ => "?"
            };
        }

        /// <summary>
        /// Generates database-specific parameter placeholder for a column.
        /// </summary>
        /// <param name="columnName">Name of the column</param>
        /// <param name="dataSourceType">Database type</param>
        /// <returns>Parameter placeholder string</returns>
        public static string GenerateParameterPlaceholder(string columnName, DataSourceType dataSourceType)
        {
            return dataSourceType switch
            {
                DataSourceType.SqlServer => $"@{columnName}",
                DataSourceType.Oracle => $":{columnName}",
                DataSourceType.Mysql or DataSourceType.Postgre or DataSourceType.SqlLite => "?",
                _ => "?"
            };
        }

        /// <summary>
        /// Gets database-specific syntax for auto-increment/identity columns.
        /// </summary>
        /// <param name="dataSourceType">Database type</param>
        /// <returns>Auto-increment syntax</returns>
        public static string GetAutoIncrementSyntax(DataSourceType dataSourceType)
        {
            return dataSourceType switch
            {
                DataSourceType.SqlServer => "IDENTITY(1,1)",
                DataSourceType.Mysql => "AUTO_INCREMENT",
                DataSourceType.Postgre => "SERIAL",
                DataSourceType.Oracle => "GENERATED BY DEFAULT AS IDENTITY",
                DataSourceType.SqlLite => "AUTOINCREMENT",
                DataSourceType.DB2 => "GENERATED BY DEFAULT AS IDENTITY",
                DataSourceType.FireBird => "GENERATED BY DEFAULT AS IDENTITY",
                _ => ""
            };
        }

        /// <summary>
        /// Gets database-specific syntax for current timestamp.
        /// </summary>
        /// <param name="dataSourceType">Database type</param>
        /// <returns>Current timestamp syntax</returns>
        public static string GetCurrentTimestampSyntax(DataSourceType dataSourceType)
        {
            return dataSourceType switch
            {
                DataSourceType.SqlServer => "GETDATE()",
                DataSourceType.Mysql => "NOW()",
                DataSourceType.Postgre => "NOW()",
                DataSourceType.Oracle => "SYSDATE",
                DataSourceType.SqlLite => "datetime('now')",
                DataSourceType.DB2 => "CURRENT_TIMESTAMP",
                DataSourceType.FireBird => "CURRENT_TIMESTAMP",
                _ => "CURRENT_TIMESTAMP"
            };
        }

        /// <summary>
        /// Gets database-specific syntax for string concatenation.
        /// </summary>
        /// <param name="dataSourceType">Database type</param>
        /// <param name="expressions">Expressions to concatenate</param>
        /// <returns>Concatenation syntax</returns>
        public static string GetConcatenationSyntax(DataSourceType dataSourceType, params string[] expressions)
        {
            if (expressions == null || expressions.Length == 0)
                return "";

            if (expressions.Length == 1)
                return expressions[0];

            return dataSourceType switch
            {
                DataSourceType.SqlServer => string.Join(" + ", expressions),
                DataSourceType.Mysql => $"CONCAT({string.Join(", ", expressions)})",
                DataSourceType.Postgre => string.Join(" || ", expressions),
                DataSourceType.Oracle => string.Join(" || ", expressions),
                DataSourceType.SqlLite => string.Join(" || ", expressions),
                DataSourceType.DB2 => string.Join(" || ", expressions),
                DataSourceType.FireBird => string.Join(" || ", expressions),
                _ => string.Join(" || ", expressions)
            };
        }

        /// <summary>
        /// Gets database-specific syntax for CASE WHEN expressions.
        /// </summary>
        /// <param name="dataSourceType">Database type</param>
        /// <param name="whenClauses">Dictionary of condition -> result pairs</param>
        /// <param name="elseClause">Optional ELSE clause</param>
        /// <returns>CASE WHEN syntax</returns>
        public static string GetCaseWhenSyntax(DataSourceType dataSourceType, Dictionary<string, string> whenClauses, string elseClause = null)
        {
            if (whenClauses == null || !whenClauses.Any())
                return elseClause ?? "NULL";

            var caseExpression = "CASE ";
            foreach (var when in whenClauses)
            {
                caseExpression += $"WHEN {when.Key} THEN {when.Value} ";
            }

            if (!string.IsNullOrEmpty(elseClause))
                caseExpression += $"ELSE {elseClause} ";

            caseExpression += "END";

            return caseExpression;
        }

        /// <summary>
        /// Gets database-specific syntax for TOP/LIMIT clause.
        /// </summary>
        /// <param name="dataSourceType">Database type</param>
        /// <param name="count">Number of records to limit</param>
        /// <returns>TOP/LIMIT syntax</returns>
        public static string GetTopLimitSyntax(DataSourceType dataSourceType, int count)
        {
            return dataSourceType switch
            {
                DataSourceType.SqlServer => $"TOP {count}",
                DataSourceType.Mysql => $"LIMIT {count}",
                DataSourceType.Postgre => $"LIMIT {count}",
                DataSourceType.Oracle => $"ROWNUM <= {count}",
                DataSourceType.SqlLite => $"LIMIT {count}",
                DataSourceType.DB2 => $"FETCH FIRST {count} ROWS ONLY",
                DataSourceType.FireBird => $"FIRST {count}",
                _ => $"LIMIT {count}"
            };
        }

        /// <summary>
        /// Gets database-specific syntax for date formatting.
        /// </summary>
        /// <param name="dataSourceType">Database type</param>
        /// <param name="dateExpression">Date expression to format</param>
        /// <param name="format">Desired format</param>
        /// <returns>Date formatting syntax</returns>
        public static string GetDateFormatSyntax(DataSourceType dataSourceType, string dateExpression, string format)
        {
            return dataSourceType switch
            {
                DataSourceType.SqlServer => $"FORMAT({dateExpression}, '{format}')",
                DataSourceType.Mysql => $"DATE_FORMAT({dateExpression}, '{format}')",
                DataSourceType.Postgre => $"TO_CHAR({dateExpression}, '{format}')",
                DataSourceType.Oracle => $"TO_CHAR({dateExpression}, '{format}')",
                DataSourceType.SqlLite => $"strftime('{format}', {dateExpression})",
                DataSourceType.DB2 => $"CHAR({dateExpression}, '{format}')",
                DataSourceType.FireBird => $"EXTRACT({format} FROM {dateExpression})",
                _ => $"FORMAT({dateExpression}, '{format}')"
            };
        }

        /// <summary>
        /// Gets database-specific syntax for NULL handling.
        /// </summary>
        /// <param name="dataSourceType">Database type</param>
        /// <param name="expression">Expression to check</param>
        /// <param name="defaultValue">Default value if NULL</param>
        /// <returns>NULL handling syntax</returns>
        public static string GetNullHandlingSyntax(DataSourceType dataSourceType, string expression, string defaultValue)
        {
            return dataSourceType switch
            {
                DataSourceType.SqlServer => $"ISNULL({expression}, {defaultValue})",
                DataSourceType.Mysql => $"IFNULL({expression}, {defaultValue})",
                DataSourceType.Postgre => $"COALESCE({expression}, {defaultValue})",
                DataSourceType.Oracle => $"NVL({expression}, {defaultValue})",
                DataSourceType.SqlLite => $"IFNULL({expression}, {defaultValue})",
                DataSourceType.DB2 => $"COALESCE({expression}, {defaultValue})",
                DataSourceType.FireBird => $"COALESCE({expression}, {defaultValue})",
                _ => $"COALESCE({expression}, {defaultValue})"
            };
        }
    }
}