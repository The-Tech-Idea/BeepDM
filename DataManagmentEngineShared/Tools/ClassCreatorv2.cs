using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using TheTechIdea.DataManagment_Engine.DataBase;
using TheTechIdea.Tools;

namespace TheTechIdea.DataManagment_Engine.Tools
{
    public  class ClassCreatorv2 : IClassCreator
    {
        public string outputFileName { get ; set; }
        public string outputpath { get; set ; }


        private CodeCompileUnit targetUnit;
        private CodeTypeDeclaration targetClass;
       
        public ClassCreatorv2()
        {
           
        }
        public void CompileClassFromText(string SourceString, string output)
        {
            throw new NotImplementedException();
        }

        public string CreateClass(string classname, List<EntityField> flds, string poutputpath, string NameSpacestring = "TheTechIdea.ProjectClasses")
        {
            targetUnit = new CodeCompileUnit();
            CodeNamespace namespaces = new CodeNamespace(NameSpacestring);
            namespaces.Imports.Add(new CodeNamespaceImport("System"));
            targetClass = new CodeTypeDeclaration(classname);
            targetClass.IsClass = true;
            targetClass.TypeAttributes =
                TypeAttributes.Public ;
            namespaces.Types.Add(targetClass);
            targetUnit.Namespaces.Add(namespaces);
            outputpath = poutputpath;
            outputFileName = classname;
            AddConstructor();

            foreach (var f in flds)
            {
                try
                {
                    AddProperties(f);
                }
                catch (Exception ex)
                {

                    throw;
                }

            }

            EntityField entity = new EntityField();
            entity.fieldname = "Name";
            entity.fieldtype= "System.String";
            AddProperties(entity);
            entity = new EntityField();
            entity.fieldname = "RN";
            entity.fieldtype = "System.Int64";
            AddProperties(entity);
         
            if (outputpath == null)
            {
                outputpath = Assembly.GetEntryAssembly().Location + "\\";
            }
            GenerateCSharpCode(Path.Combine(outputpath, outputFileName + ".cs"));
            return NameSpacestring + "." + classname;
            return "ok";
            
        }

        public void GenerateCSharpCode(string fileName)
        {
            CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
            CodeGeneratorOptions options = new CodeGeneratorOptions();
            options.BracingStyle = "C";
            using (StreamWriter sourceWriter = new StreamWriter(fileName))
            {
                provider.GenerateCodeFromCompileUnit(
                    targetUnit, sourceWriter, options);
            }
        }

        #region "CodeDom Code"
       
        public void AddFields(EntityField fld)
        {
            CodeMemberField widthValueField = new CodeMemberField();
            widthValueField.Attributes = MemberAttributes.Private;
            widthValueField.Name = fld.fieldname+"Value";
            widthValueField.Type = new CodeTypeReference(Type.GetType(fld.fieldtype));
            //widthValueField.Comments.Add(new CodeCommentStatement(
            //    "The width of the object."));
            targetClass.Members.Add(widthValueField);
        }
        public void AddProperties(EntityField fld)
        {
            // Declare the read-only Width property.
            CodeTypeDeclaration newType = new CodeTypeDeclaration(fld.fieldtype);
            CodeSnippetTypeMember snippet = new CodeSnippetTypeMember();
            snippet.Comments.Add(new CodeCommentStatement(" Generated by DeepDM property", true));
            string fldtype= Type.GetType(fld.fieldtype).ToString();
            if (fld.fieldtype.ToLower().Contains("decimal") || fld.fieldtype.ToLower().Contains("datetime"))
            {
                fldtype =fldtype + "?";
            }
            snippet.Text = "public " + fldtype + " "+ fld.fieldname + "  { get; set; }";
            targetClass.Members.Add(snippet);

            ////var thisReference = new CodeThisReferenceExpression();
            //CodeMemberProperty widthProperty = new CodeMemberProperty();
            //widthProperty.Attributes =
            //    MemberAttributes.Public | MemberAttributes.Final;
            //widthProperty.Name = fld.fieldname;
            //widthProperty.HasGet = true;
            //widthProperty.HasSet = true;
          
            ////widthProperty.Comments.Add(new CodeCommentStatement(
            ////    "The Width property for the object."));
            //widthProperty.Type = new CodeTypeReference(Type.GetType(fld.fieldtype));
           

            //widthProperty.Type = new CodeTypeReference(Type.GetType(fld.fieldtype));

            

            //widthProperty.GetStatements.Add(new CodeMethodReturnStatement(
            // new CodeFieldReferenceExpression(
            // new CodeThisReferenceExpression(), fld.fieldname + "Value")));
            //widthProperty.SetStatements.Add(new CodeAssignStatement(new CodeFieldReferenceExpression(widthProperty, fld.fieldname + "Value"), new CodePropertySetValueReferenceExpression()));

            ///targetClass.Members.Add(widthProperty);

        }
        public void AddConstructor()
        {
            // Declare the constructor
            CodeConstructor constructor = new CodeConstructor();
            constructor.Attributes =
                MemberAttributes.Public | MemberAttributes.Final;

            //// Add parameters.
            //constructor.Parameters.Add(new CodeParameterDeclarationExpression(
            //    typeof(System.Double), "width"));
            //constructor.Parameters.Add(new CodeParameterDeclarationExpression(
            //    typeof(System.Double), "height"));

            // Add field initialization logic
            //CodeFieldReferenceExpression widthReference =
            //    new CodeFieldReferenceExpression(
            //    new CodeThisReferenceExpression(), "widthValue");
            //constructor.Statements.Add(new CodeAssignStatement(widthReference,
            //    new CodeArgumentReferenceExpression("width")));
            //CodeFieldReferenceExpression heightReference =
            //    new CodeFieldReferenceExpression(
            //    new CodeThisReferenceExpression(), "heightValue");
            //constructor.Statements.Add(new CodeAssignStatement(heightReference,
            //    new CodeArgumentReferenceExpression("height")));
            targetClass.Members.Add(constructor);
        }
       
        #endregion
    }
}
