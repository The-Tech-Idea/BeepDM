<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataManagementModels</name>
    </assembly>
    <members>
        <member name="T:TheTechIdea.Beep.Addin.AddinTreeStructure">
            <summary>Represents the structure of an add-in tree node.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Addin.DisplayLookUpDescription">
            <summary>Represents a lookup description for display purposes.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Addin.IDM_Addin">
            <summary>
            Represents an add-in in the Beep system.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Addin.IFunctionExtension">
            <summary>Represents an extension for a function.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Addin.IPrintManager">
            <summary>Interface for managing printing functionality.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Addin.IPassedArgs">
            <summary>
            Represents the arguments passed to a method or event.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Addin.PassedArgs">
            <summary>
            Represents the arguments passed to a method or event.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Addin.ObjectItem">
            <summary>Represents an item in an object collection.</summary>
        </member>
        <member name="T:TheTechIdea.Beep.Addin.AddinVisSchema">
            <summary>
            Attribute class to define the visualization schema for add-ins within the system.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.RootNodeName">
            <summary>
            Gets or sets the root node name in the visualization schema.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.CatgoryName">
            <summary>
            Gets or sets the category name for the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.AddinName">
            <summary>
            Gets or sets the name of the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.Order">
            <summary>
            Gets or sets the display order of the add-in in the visualization schema.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.ID">
            <summary>
            Gets or sets the identifier for the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.Name">
            <summary>
            Gets or sets the name of the add-in's visualization branch.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.BranchText">
            <summary>
            Gets or sets the text displayed on the branch.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.Level">
            <summary>
            Gets or sets the level of the branch in the visualization schema.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.BranchType">
            <summary>
            Gets or sets the type of the branch, defined by the EnumPointType enum.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.BranchID">
            <summary>
            Gets or sets the identifier for the branch.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.IconImageName">
            <summary>
            Gets or sets the name of the icon image associated with the branch.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.BranchStatus">
            <summary>
            Gets or sets the status of the branch.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.ParentBranchID">
            <summary>
            Gets or sets the identifier of the parent branch, if applicable.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.BranchDescription">
            <summary>
            Gets or sets a description for the branch.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Addin.AddinVisSchema.BranchClass">
            <summary>
            Gets or sets the class associated with the branch. Defaults to "ADDIN".
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.AuthTypeEnum">
            <summary>
            Enumeration of supported authentication types for Web API connections
            Based on the WebAPIAuthenticationHelper implementation
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.AuthTypeEnum.None">
            <summary>
            No authentication required
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.AuthTypeEnum.ApiKey">
            <summary>
            API Key authentication using custom header (default: X-API-Key)
            Requires ApiKey property to be set
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.AuthTypeEnum.Basic">
            <summary>
            Basic HTTP authentication using username and password
            Requires UserID and Password properties to be set
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.AuthTypeEnum.Bearer">
            <summary>
            Bearer token authentication
            Can use static token or OAuth2 flow depending on configuration
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.AuthTypeEnum.OAuth2">
            <summary>
            OAuth2 authentication with automatic token management
            Supports client_credentials, password, and authorization_code grant types
            Requires TokenUrl, ClientId, and ClientSecret (or other credentials based on grant type)
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.AuthTypeEnumExtensions">
            <summary>
            Extension methods for AuthTypeEnum
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.AuthTypeEnumExtensions.ToStringValue(TheTechIdea.Beep.ConfigUtil.AuthTypeEnum)">
            <summary>
            Converts AuthTypeEnum to string representation used by WebAPIAuthenticationHelper
            </summary>
            <param name="authType">The authentication type</param>
            <returns>String representation for the authentication helper</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.AuthTypeEnumExtensions.FromString(System.String)">
            <summary>
            Parses string value to AuthTypeEnum
            </summary>
            <param name="authTypeString">String representation of auth type</param>
            <returns>Corresponding AuthTypeEnum value</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.AuthTypeEnumExtensions.GetRequiredCredentials(TheTechIdea.Beep.ConfigUtil.AuthTypeEnum)">
            <summary>
            Gets a description of what credentials are required for each auth type
            </summary>
            <param name="authType">The authentication type</param>
            <returns>Description of required credentials</returns>
        </member>
        <member name="M:TheTechIdea.Beep.ConfigUtil.AuthTypeEnumExtensions.RequiresTokenRefresh(TheTechIdea.Beep.ConfigUtil.AuthTypeEnum)">
            <summary>
            Checks if the auth type requires automatic token refresh
            </summary>
            <param name="authType">The authentication type</param>
            <returns>True if token refresh is handled automatically</returns>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._clientId">
            <summary>
            Gets or sets the Client ID for OAuth2 authentication.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._clientSecret">
            <summary>
            Gets or sets the Client Secret for OAuth2 authentication.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._authType">
            <summary>
            Gets or sets the authentication type for the Web API.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._authUrl">
            <summary>
            Gets or sets the authorization URL for OAuth2.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._tokenUrl">
            <summary>
            Gets or sets the token URL for OAuth2.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._scope">
            <summary>
            Gets or sets the scope for OAuth2.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._grantType">
            <summary>
            Gets or sets the grant type for OAuth2 (e.g., client_credentials).
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._apiKeyHeader">
            <summary>
            Gets or sets the header name for the API key.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._redirectUri">
            <summary>
            Gets or sets the redirect URI for OAuth2 authorization code flow.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._authCode">
            <summary>
            Gets or sets the authorization code from the OAuth2 flow.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._timeoutMs">
            <summary>
            Gets or sets the request timeout in milliseconds.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._maxRetries">
            <summary>
            Gets or sets the maximum number of retries for failed requests.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._retryIntervalMs">
            <summary>
            Gets or sets the interval between retries in milliseconds.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._useProxy">
            <summary>
            Gets or sets a value indicating whether to use a proxy.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._proxyUrl">
            <summary>
            Gets or sets the proxy URL.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._proxyPort">
            <summary>
            Gets or sets the proxy port.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._proxyUser">
            <summary>
            Gets or sets the proxy user name.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._proxyPassword">
            <summary>
            Gets or sets the proxy password.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._bypassProxyOnLocal">
            <summary>
            Gets or sets a value indicating whether to bypass the proxy for local addresses.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._useDefaultProxyCredentials">
            <summary>
            Gets or sets a value indicating whether to use default proxy credentials.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._ignoreSSLErrors">
            <summary>
            Gets or sets a value indicating whether to ignore SSL errors.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._validateServerCertificate">
            <summary>
            Gets or sets a value indicating whether to validate the server certificate.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._clientCertificatePath">
            <summary>
            Gets or sets the path to the client certificate.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._clientCertificatePassword">
            <summary>
            Gets or sets the password for the client certificate.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._requiresAuthentication">
            <summary>
            Gets or sets a value indicating whether the API requires authentication.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.ConfigUtil.ConnectionProperties._requiresTokenRefresh">
            <summary>
            Gets or sets a value indicating whether the token needs to be refreshed.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.ConfigUtil.IConnectionProperties">
            <summary>
            Defines the properties for a data source connection.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ID">
            <summary>
            Gets or sets the unique identifier for the connection.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.GuidID">
            <summary>
            Gets or sets the GUID for the connection.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ConnectionName">
            <summary>
            Gets or sets the user-friendly name for the connection.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ConnectionString">
            <summary>
            Gets or sets the full connection string.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Category">
            <summary>
            Gets or sets the category of the data source (e.g., RDBMS, NoSQL, File).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Favourite">
            <summary>
            Gets or sets a value indicating whether this connection is marked as a favorite.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IsDefault">
            <summary>
            Gets or sets a value indicating whether this is the default connection.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Drawn">
            <summary>
            Gets or sets a value indicating whether the connection is represented on a design surface.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IsLocal">
            <summary>
            Gets or sets a value indicating whether the data source is local.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IsRemote">
            <summary>
            Gets or sets a value indicating whether the data source is remote.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IsWebApi">
            <summary>
            Gets or sets a value indicating whether the data source is a Web API.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IsFile">
            <summary>
            Gets or sets a value indicating whether the data source is a file.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IsDatabase">
            <summary>
            Gets or sets a value indicating whether the data source is a database.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IsComposite">
            <summary>
            Gets or sets a value indicating whether the data source is a composite of other data sources.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IsCloud">
            <summary>
            Gets or sets a value indicating whether the data source is cloud-based.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IsFavourite">
            <summary>
            Gets or sets a value indicating whether this connection is a favorite.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IsInMemory">
            <summary>
            Gets or sets a value indicating whether the data is stored in-memory.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.DatabaseType">
            <summary>
            Gets or sets the type of the database (e.g., MySQL, SQLServer, Oracle).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Database">
            <summary>
            Gets or sets the name of the database.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Databases">
            <summary>
            Gets or sets the list of available databases.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.SchemaName">
            <summary>
            Gets or sets the schema name.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.OracleSIDorService">
            <summary>
            Gets or sets the Oracle SID or Service Name.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.FilePath">
            <summary>
            Gets or sets the file path for file-based data sources.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.FileName">
            <summary>
            Gets or sets the file name for file-based data sources.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Ext">
            <summary>
            Gets or sets the file extension.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Delimiter">
            <summary>
            Gets or sets the delimiter character for delimited files.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Host">
            <summary>
            Gets or sets the host name or IP address.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Port">
            <summary>
            Gets or sets the port number.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Url">
            <summary>
            Gets or sets the URL for web-based services.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.UserID">
            <summary>
            Gets or sets the user ID for authentication.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Password">
            <summary>
            Gets or sets the password for authentication.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ApiKey">
            <summary>
            Gets or sets the API key for authentication.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.KeyToken">
            <summary>
            Gets or sets a key or token for authentication.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.CertificatePath">
            <summary>
            Gets or sets the path to a security certificate.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.DriverName">
            <summary>
            Gets or sets the name of the database driver.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.DriverVersion">
            <summary>
            Gets or sets the version of the database driver.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Parameters">
            <summary>
            Gets or sets additional connection parameters as a string.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ParameterList">
            <summary>
             Gets or sets additional connection parameters as a dictionary.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Entities">
            <summary>
            Gets or sets the list of entity structures (e.g., tables, views) in the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.DatasourceDefaults">
            <summary>
            Gets or sets default values for data source properties.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Headers">
            <summary>
            Gets or sets the list of headers for Web API requests.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ClientId">
            <summary>
            Gets or sets the Client ID for OAuth2 authentication.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ClientSecret">
            <summary>
            Gets or sets the Client Secret for OAuth2 authentication.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.AuthType">
            <summary>
            Gets or sets the authentication type for the Web API.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.AuthUrl">
            <summary>
            Gets or sets the authorization URL for OAuth2.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.TokenUrl">
            <summary>
            Gets or sets the token URL for OAuth2.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.Scope">
            <summary>
            Gets or sets the scope for OAuth2.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.GrantType">
            <summary>
            Gets or sets the grant type for OAuth2 (e.g., client_credentials).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ApiKeyHeader">
            <summary>
            Gets or sets the header name for the API key.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.RedirectUri">
            <summary>
            Gets or sets the redirect URI for OAuth2 authorization code flow.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.AuthCode">
            <summary>
            Gets or sets the authorization code from the OAuth2 flow.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.TimeoutMs">
            <summary>
            Gets or sets the request timeout in milliseconds.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.MaxRetries">
            <summary>
            Gets or sets the maximum number of retries for failed requests.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.RetryIntervalMs">
            <summary>
            Gets or sets the interval between retries in milliseconds.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.UseProxy">
            <summary>
            Gets or sets a value indicating whether to use a proxy.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ProxyUrl">
            <summary>
            Gets or sets the proxy URL.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ProxyPort">
            <summary>
            Gets or sets the proxy port.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ProxyUser">
            <summary>
            Gets or sets the proxy user name.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ProxyPassword">
            <summary>
            Gets or sets the proxy password.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.BypassProxyOnLocal">
            <summary>
            Gets or sets a value indicating whether to bypass the proxy for local addresses.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.UseDefaultProxyCredentials">
            <summary>
            Gets or sets a value indicating whether to use default proxy credentials.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.IgnoreSSLErrors">
            <summary>
            Gets or sets a value indicating whether to ignore SSL errors.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ValidateServerCertificate">
            <summary>
            Gets or sets a value indicating whether to validate the server certificate.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ClientCertificatePath">
            <summary>
            Gets or sets the path to the client certificate.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.ClientCertificatePassword">
            <summary>
            Gets or sets the password for the client certificate.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.RequiresAuthentication">
            <summary>
            Gets or sets a value indicating whether the API requires authentication.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.ConfigUtil.IConnectionProperties.RequiresTokenRefresh">
            <summary>
            Gets or sets a value indicating whether the token needs to be refreshed.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.DataView.DMDataView">
            <summary>
            Represents a view for displaying and interacting with DataView  data.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.BindingListExtensions">
            <summary>
            Enhanced extension methods for BindingList&lt;T&gt; providing performance optimizations,
            bulk operations, filtering, sorting, and utility methods.
            All methods are fully generic with appropriate constraints.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.AddRange``1(System.ComponentModel.BindingList{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Adds multiple items to a BindingList with optimized event handling
            </summary>
            <typeparam name="T">The type of elements in the BindingList</typeparam>
            <param name="bindingList">The target BindingList</param>
            <param name="items">Items to add</param>
            <param name="suppressEvents">Whether to suppress events during the operation</param>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.RemoveRange``1(System.ComponentModel.BindingList{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Removes multiple items from a BindingList with optimized event handling
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.RemoveWhere``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Removes items matching a predicate
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.ReplaceAll``1(System.ComponentModel.BindingList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clears and replaces all items in the BindingList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.First``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Returns the first element of the BindingList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.First``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element that satisfies a condition
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FirstOrDefault``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Returns the first element of the BindingList, or default if empty
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FirstOrDefault``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element that satisfies a condition, or default if none found
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Last``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Returns the last element of the BindingList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Last``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element that satisfies a condition
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.LastOrDefault``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Returns the last element of the BindingList, or default if empty
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.LastOrDefault``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element that satisfies a condition, or default if none found
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Single``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Returns the only element of the BindingList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Single``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element that satisfies a condition
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.SingleOrDefault``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Returns the only element of the BindingList, or default if empty
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.SingleOrDefault``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element that satisfies a condition, or default if none found
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.ElementAt``1(System.ComponentModel.BindingList{``0},System.Int32)">
            <summary>
            Returns the element at a specified index
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.ElementAtOrDefault``1(System.ComponentModel.BindingList{``0},System.Int32)">
            <summary>
            Returns the element at a specified index, or default if index is out of range
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Skip``1(System.ComponentModel.BindingList{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements and returns the remaining elements
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.SkipWhile``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses elements while a condition is true and returns the remaining elements
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Take``1(System.ComponentModel.BindingList{``0},System.Int32)">
            <summary>
            Returns a specified number of elements from the start
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.TakeWhile``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns elements while a condition is true
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Reverse``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Returns a new BindingList with elements in reverse order
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.All``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements satisfy a condition
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Any``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Determines whether any element exists or satisfies a condition
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Any``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether any element satisfies a condition
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Contains``1(System.ComponentModel.BindingList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the BindingList contains a specific value
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Count``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the number of elements that satisfy a condition
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FindIndex``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the first element that matches the predicate
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FindLastIndex``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the last element that matches the predicate
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.IndexOf``1(System.ComponentModel.BindingList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the index of the first occurrence of a specific value
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.LastIndexOf``1(System.ComponentModel.BindingList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the index of the last occurrence of a specific value
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Filter``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the BindingList and returns a new BindingList with matching items
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FilterByProperty``2(System.ComponentModel.BindingList{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Generic filter by property value using expression
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FilterByText``1(System.ComponentModel.BindingList{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String,System.Boolean)">
            <summary>
            Generic filter by string property with text search
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FindFirst``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the first item matching the predicate
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FindAll``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds all items matching the predicate
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FindByProperty``2(System.ComponentModel.BindingList{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Finds item by property value
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Sort``2(System.ComponentModel.BindingList{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            Sorts the BindingList using a key selector
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.SortByProperty``2(System.ComponentModel.BindingList{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Sorts the BindingList using an expression
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.SortBy``1(System.ComponentModel.BindingList{``0},System.ValueTuple{System.Func{``0,System.Object},System.Boolean}[])">
            <summary>
            Multi-level sorting with multiple key selectors
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.ToList``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Converts BindingList to a regular List
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.ToBindingList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts IEnumerable to BindingList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.DeepCopy``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Creates a deep copy of the BindingList (for ICloneable items)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.ShallowCopy``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Creates a shallow copy of the BindingList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.ValidateAll``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Validates all items in the BindingList using a predicate
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.GetInvalidItems``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets invalid items based on a validator predicate
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.RemoveDuplicates``2(System.ComponentModel.BindingList{``0},System.Func{``0,``1})">
            <summary>
            Removes duplicate items based on a key selector
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.RemoveDuplicates``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Removes duplicates using the default equality comparer
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.IsNullOrEmpty``1(System.ComponentModel.BindingList{``0})">
            <summary>
            Checks if the BindingList is null or empty
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.SafeGet``1(System.ComponentModel.BindingList{``0},System.Int32,``0)">
            <summary>
            Safely gets an item by index, returning default if index is out of range
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.CountWhere``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets count of items matching predicate
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.AnyMatch``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Checks if any item matches the predicate
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.AddRangeAsync``1(System.ComponentModel.BindingList{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Asynchronously adds items to the BindingList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FilterAsync``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Asynchronously filters the BindingList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.SortAsync``2(System.ComponentModel.BindingList{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            Asynchronously sorts the BindingList
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.RemoveDuplicatesAsync``2(System.ComponentModel.BindingList{``0},System.Func{``0,``1})">
            <summary>
            Asynchronously removes duplicates
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.Flatten``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.ComponentModel.BindingList{``0}},System.Boolean)">
            <summary>
            Flattens a hierarchical BindingList into a flat list.
            Works with any type that has a Children property of type BindingList&lt;T&gt;
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.FindByPath``1(System.ComponentModel.BindingList{``0},System.String,System.Func{``0,System.String},System.Func{``0,System.ComponentModel.BindingList{``0}},System.Char)">
            <summary>
            Finds items by path in a hierarchical structure
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.GetLeafNodes``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.ComponentModel.BindingList{``0}})">
            <summary>
            Gets all leaf nodes (items without children)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.GetMaxDepth``1(System.ComponentModel.BindingList{``0},System.Func{``0,System.ComponentModel.BindingList{``0}})">
            <summary>
            Gets the depth of the tree structure
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.BindingListExtensions.ExecuteWithPerformanceMonitoring``1(System.ComponentModel.BindingList{``0},System.Action{System.ComponentModel.BindingList{``0}},System.Boolean)">
            <summary>
            Executes an action with event suppression and performance monitoring
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ObservableBindingList`1.WhereContains(System.String,System.String,System.Boolean)">
            <summary>
            Finds items where a string property contains the search text
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ObservableBindingList`1.FirstOrDefault(System.Func{`0,System.Boolean})">
            <summary>
            Finds the first item matching the predicate
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ObservableBindingList`1.Any(System.Func{`0,System.Boolean})">
            <summary>
            Gets whether any item matches the predicate
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.Editor.ObservableBindingList`1.SearchCompleted">
            <summary>
            Event triggered when search or filter operations complete
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ObservableBindingList`1.SearchWithProgress(System.Func{`0,System.Boolean},System.IProgress{System.Int32})">
            <summary>
            Searches with progress reporting
            </summary>
            <param name="predicate">Search criteria</param>
            <param name="progress">Progress reporter</param>
            <returns>List of matching items</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Editor.ObservableBindingList`1.SearchCompletedEventArgs`1">
            <summary>
            Event arguments for search completion
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ObservableBindingList`1.SearchByProperties(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Searches for items matching multiple property conditions with a specific operator between conditions.
            </summary>
            <param name="propertyConditions">Dictionary of property names and their values to match</param>
            <param name="matchOperator">Logical operator to apply between conditions ("AND" or "OR")</param>
            <returns>List of matching items</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ObservableBindingList`1.SearchByText(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds all items with the specified property value matching the search string using 
            contains, starts with, or ends with matching.
            </summary>
            <param name="propertyName">Name of the property to search</param>
            <param name="searchText">Text to search for</param>
            <param name="matchType">Type of match: "Contains", "StartsWith", "EndsWith", or "Exact"</param>
            <param name="ignoreCase">Whether to ignore case when matching</param>
            <returns>List of matching items</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ObservableBindingList`1.SearchAllProperties(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Searches across multiple string properties for a search term
            </summary>
            <param name="searchText">Text to search for</param>
            <param name="propertyNames">Optional specific properties to search (searches all string properties if null)</param>
            <param name="ignoreCase">Whether to ignore case when matching</param>
            <returns>List of matching items</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ObservableBindingList`1.AdvancedSearch(System.String,System.Char,System.String)">
            <summary>
            Finds items based on a complex predicate that can include nested property paths
            </summary>
            <param name="filter">Filter string in format "Property[.NestedProperty] Operator Value"</param>
            <param name="separator">Character separating multiple filter conditions</param>
            <param name="logicalOperator">Logical operator to use between conditions ("AND" or "OR")</param>
            <returns>List of items matching the complex filter</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Editor.ObservableBindingList`1.FindAndFilter(System.Func{`0,System.Boolean})">
            <summary>
            Applies the search based on a predicate and updates the current view
            </summary>
            <param name="predicate">Search predicate function</param>
            <returns>Number of items found</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Enums.DynamicEnumEntry">
            <summary>
            Represents one entry in DynamicEnum.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Enums.DynamicEnum">
            <summary>
            A thread-safe, fully featured dynamic enum replacement with flag support, serialization, events, descriptions, and data binding.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Enums.DynamicEnum.Add(System.String,System.Int32,System.String)">
            <summary>
            Add or update entry by name and value.
            Throws if duplicate value for different name.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Enums.DynamicEnum.Remove(System.String)">
            <summary>
            Remove entry by name.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Enums.DynamicEnum.Clear">
            <summary>
            Clear all entries and reset default to None=0.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Enums.DynamicEnumJsonConverter">
            <summary>
            Custom JSON converter for DynamicEnum to handle serialization/deserialization properly.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Enums.EnumExtensions.ToEnum``1(TheTechIdea.Beep.Enums.DynamicEnum,System.String)">
            <summary>
            Converts a DynamicEnum value to an enum of type T.
            </summary>
            <typeparam name="T">The enum type to convert to</typeparam>
            <param name="dynamicEnum">The DynamicEnum instance</param>
            <param name="valueName">The name of the value to convert</param>
            <returns>The enum value of type T</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Enums.EnumExtensions.TryToEnum``1(TheTechIdea.Beep.Enums.DynamicEnum,System.String,``0@)">
            <summary>
            Attempts to convert a DynamicEnum value to an enum of type T.
            </summary>
            <typeparam name="T">The enum type to convert to</typeparam>
            <param name="dynamicEnum">The DynamicEnum instance</param>
            <param name="valueName">The name of the value to convert</param>
            <param name="result">When successful, contains the converted enum value</param>
            <returns>True if conversion succeeded, false otherwise</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Enums.EnumExtensions.CreateEnumMapping``1(TheTechIdea.Beep.Enums.DynamicEnum)">
            <summary>
            Creates a dictionary mapping between a standard enum and DynamicEnum.
            Useful when you need to maintain relationships between them.
            </summary>
            <typeparam name="T">The enum type</typeparam>
            <param name="dynamicEnum">The DynamicEnum instance</param>
            <returns>Dictionary mapping enum values to their dynamic counterparts</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Enums.EnumExtensions.ToValueDictionary``1(TheTechIdea.Beep.Enums.DynamicEnum,System.Func{TheTechIdea.Beep.Enums.DynamicEnumEntry,``0})">
            <summary>
            Adds DynamicEnum entries to a dictionary that can be used in switch statements
            or other places where enums are expected.
            </summary>
            <typeparam name="TResult">The result type of the dictionary values</typeparam>
            <param name="dynamicEnum">The DynamicEnum instance</param>
            <param name="valueFactory">Function to create a value for each entry</param>
            <returns>Dictionary mapping int values to results</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Enums.EnumExtensions.CreateDynamicSwitch(TheTechIdea.Beep.Enums.DynamicEnum)">
            <summary>
            Creates a switch-like function that maps DynamicEnum values to actions
            </summary>
            <param name="dynamicEnum">The DynamicEnum instance</param>
            <returns>A function that executes the appropriate action for a given enum value</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Utilities.CloudProviderType">
            <summary>
            Cloud provider types supported by the class creator
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Utilities.ArchitecturalPattern">
            <summary>
            Architectural patterns that can be applied to generated code
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Utilities.CodeSuggestion">
            <summary>
            Contains a code improvement suggestion
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Utilities.DefaultValueType">
            <summary>
            Enum representing various methods to apply default value rules within Beep DM.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Utilities.DefaultValueType.DisplayLookup">
            <summary>
            Retrieves a default value based on display lookup logic.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Utilities.DefaultValueType.ReplaceValue">
            <summary>
            Directly replaces a value with a predefined default.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Utilities.DefaultValueType.Rule">
            <summary>
            Applies a standard rule-based default value.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Utilities.DefaultValueType.Computed">
            <summary>
            Computes the default value using calculations or formulas.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Utilities.DefaultValueType.Mapping">
            <summary>
            Maps or translates a value from one format or system to another.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Utilities.DefaultValueType.Conditional">
            <summary>
            Provides a default based on specific conditions or context.
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Utilities.DefaultValueType.Custom">
            <summary>
            Allows for custom, user-defined logic to determine the default value.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.FileManager.RootFolder">
            <summary>
            Represents a root folder for a project, containing subfolders and metadata.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.FolderType">
            <summary>
            Gets or sets the type of project folder (e.g., Files, Project).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.Folders">
            <summary>
            Gets or sets the list of subfolders within the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.ID">
            <summary>
            Gets or sets the unique identifier for the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.GuidID">
            <summary>
            Gets the globally unique identifier for the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.Name">
            <summary>
            Gets or sets the name of the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.Ext">
            <summary>
            Gets or sets the file extension associated with the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.Tags">
            <summary>
            Gets or sets the tags associated with the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.Url">
            <summary>
            Gets or sets the URL or path of the project folder.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.Version">
            <summary>
            Gets or sets the version of the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.IsActive">
            <summary>
            Gets or sets a value indicating whether the project is active.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.Icon">
            <summary>
            Gets or sets the icon associated with the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.Description">
            <summary>
            Gets or sets the description of the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.VersionDescription">
            <summary>
            Gets or sets the description of the project version.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.AuthorDescription">
            <summary>
            Gets or sets the description of the project author.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.Author">
            <summary>
            Gets or sets the author of the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.AddedDate">
            <summary>
            Gets or sets the date the project was added.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.LastModifiedDate">
            <summary>
            Gets or sets the date the project was last modified.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.ModificationAuther">
            <summary>
            Gets or sets the author who last modified the project.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.FileManager.RootFolder.IsPrivate">
            <summary>
            Gets or sets a value indicating whether the project is private.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.RootFolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TheTechIdea.Beep.FileManager.RootFolder"/> class.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.RootFolder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TheTechIdea.Beep.FileManager.RootFolder"/> class with a specified URL.
            </summary>
            <param name="url">The URL or path of the project folder.</param>
            <exception cref="T:System.ArgumentException">Thrown if URL is null or empty.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.RootFolder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TheTechIdea.Beep.FileManager.RootFolder"/> class with a specified name and URL.
            </summary>
            <param name="name">The name of the project.</param>
            <param name="url">The URL or path of the project folder.</param>
            <exception cref="T:System.ArgumentException">Thrown if name or URL is null or empty.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.RootFolder.#ctor(System.String,System.String,System.Collections.Generic.List{TheTechIdea.Beep.FileManager.Folder},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TheTechIdea.Beep.FileManager.RootFolder"/> class with detailed properties.
            </summary>
            <param name="author">The author of the project.</param>
            <param name="description">The description of the project.</param>
            <param name="folders">The list of subfolders.</param>
            <param name="name">The name of the project.</param>
            <param name="tags">The tags associated with the project.</param>
            <param name="url">The URL or path of the project folder.</param>
            <param name="version">The version of the project.</param>
            <exception cref="T:System.ArgumentException">Thrown if name or URL is null or empty.</exception>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.RootFolder.Equals(TheTechIdea.Beep.FileManager.RootFolder)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:TheTechIdea.Beep.FileManager.RootFolder"/>.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.RootFolder.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:TheTechIdea.Beep.FileManager.RootFolder"/>.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.RootFolder.GetHashCode">
            <summary>
            Returns a hash code for the current <see cref="T:TheTechIdea.Beep.FileManager.RootFolder"/>.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.RootFolder.WithAuthor(System.String)">
            <summary>
            Sets the author of the project and returns the current instance.
            </summary>
            <param name="author">The author to set.</param>
            <returns>The current <see cref="T:TheTechIdea.Beep.FileManager.RootFolder"/> instance.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.FileManager.RootFolder.WithDescription(System.String)">
            <summary>
            Sets the description of the project and returns the current instance.
            </summary>
            <param name="description">The description to set.</param>
            <returns>The current <see cref="T:TheTechIdea.Beep.FileManager.RootFolder"/> instance.</returns>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.ColumnDelimiter">
            <summary>
            Gets or sets the delimiter used to separate columns in queries or data representations.
            This property is particularly useful for formatting data for certain types of data sources
            or for parsing query results.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.ParameterDelimiter">
            <summary>
            Gets or sets the delimiter used for parameters in SQL queries.
            This property allows for customization of the parameter syntax in queries,
            which can be essential for compatibility with different types of data sources.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.GuidID">
            <summary>
            Gets or sets the unique identifier for the data source.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.IDataSource.PassEvent">
            <summary>
            Occurs when a specific action or event is passed.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.DatasourceType">
            <summary>
            Gets or sets the type of the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.Category">
            <summary>
            Gets or sets the category of the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.Dataconnection">
            <summary>
            Gets or sets the data connection interface.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.DatasourceName">
            <summary>
            Gets or sets the name of the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.ErrorObject">
            <summary>
            Gets or sets the error handling object.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.Id">
            <summary>
            Gets or sets a secondary identifier for the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.Logger">
            <summary>
            Gets or sets the logger for data management activities.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.EntitiesNames">
            <summary>
            Gets or sets the list of entity names in the data source.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.Entities">
            <summary>
            Gets or sets the list of entity structures.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.DMEEditor">
            <summary>
            Gets or sets the data manipulation and exploration editor.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.IDataSource.ConnectionStatus">
            <summary>
            Gets or sets the current connection status.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetEntitesList">
            <summary>
            Retrieves a list of entity names from the data source.
            </summary>
            <returns>List of entity names.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.RunQuery(System.String)">
            <summary>
            Executes a query and returns the results.
            </summary>
            <param name="qrystr">The query string to be executed.</param>
            <returns>The result of the query execution.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.ExecuteSql(System.String)">
            <summary>
            Executes a SQL command and returns any errors encountered.
            </summary>
            <param name="sql">The SQL command to be executed.</param>
            <returns>Error information, if any.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.CreateEntityAs(TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Creates a new entity based on the provided structure.
            </summary>
            <param name="entity">The structure of the entity to be created.</param>
            <returns>True if creation is successful, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetEntityType(System.String)">
            <summary>
            Retrieves the type of the specified entity.
            </summary>
            <param name="EntityName">The name of the entity.</param>
            <returns>The type of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.CheckEntityExist(System.String)">
            <summary>
            Checks if the specified entity exists in the data source.
            </summary>
            <param name="EntityName">The name of the entity to check.</param>
            <returns>True if the entity exists, false otherwise.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetEntityIdx(System.String)">
            <summary>
            Retrieves the index of a given entity.
            </summary>
            <param name="entityName">The name of the entity.</param>
            <returns>The index of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetChildTablesList(System.String,System.String,System.String)">
            <summary>
            Gets a list of child tables related to a specified table.
            </summary>
            <param name="tablename">The name of the table.</param>
            <param name="SchemaName">The name of the schema.</param>
            <param name="Filterparamters">Filter parameters for the child tables.</param>
            <returns>List of child relations.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetEntityforeignkeys(System.String,System.String)">
            <summary>
            Retrieves foreign keys for a specified entity.
            </summary>
            <param name="entityname">The name of the entity.</param>
            <param name="SchemaName">The schema name.</param>
            <returns>List of relationship keys.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetEntityStructure(System.String,System.Boolean)">
            <summary>
            Obtains the structure of a specified entity.
            </summary>
            <param name="EntityName">The name of the entity.</param>
            <param name="refresh">Whether to refresh the entity structure.</param>
            <returns>The structure of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetEntityStructure(TheTechIdea.Beep.DataBase.EntityStructure,System.Boolean)">
            <summary>
            Overloaded method to get the structure of an entity.
            </summary>
            <param name="fnd">The entity structure to find.</param>
            <param name="refresh">Whether to refresh the entity structure.</param>
            <returns>The structure of the entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.RunScript(TheTechIdea.Beep.Editor.ETLScriptDet)">
            <summary>
            Executes a provided script and returns any errors.
            </summary>
            <param name="dDLScripts">The script to be executed.</param>
            <returns>Error information, if any.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetCreateEntityScript(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>
            Generates scripts for creating entities.
            </summary>
            <param name="entities">List of entities to generate scripts for.</param>
            <returns>List of ETL script details.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.CreateEntities(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure})">
            <summary>
            Creates multiple entities and returns any errors.
            </summary>
            <param name="entities">List of entities to be created.</param>
            <returns>Error information, if any.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.UpdateEntities(System.String,System.Object,System.IProgress{TheTechIdea.Beep.Addin.PassedArgs})">
            <summary>
            Updates specified entities with the provided data.
            </summary>
            <param name="EntityName">The name of the entity to update.</param>
            <param name="UploadData">The data to update the entity with.</param>
            <param name="progress">Progress reporting object.</param>
            <returns>Error information, if any.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.UpdateEntity(System.String,System.Object)">
            <summary>
            Updates a single entity with the provided data row.
            </summary>
            <param name="EntityName">The name of the entity to update.</param>
            <param name="UploadDataRow">The data row for the update.</param>
            <returns>Error information, if any.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.DeleteEntity(System.String,System.Object)">
            <summary>
            Deletes an entity based on the provided data row.
            </summary>
            <param name="EntityName">The name of the entity to delete.</param>
            <param name="UploadDataRow">The data row that specifies the entity to delete.</param>
            <returns>Error information, if any.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.InsertEntity(System.String,System.Object)">
            <summary>
            Inserts a new entity with the provided data.
            </summary>
            <param name="EntityName">The name of the entity to insert.</param>
            <param name="InsertedData">The data for the new entity.</param>
            <returns>Error information, if any.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.BeginTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Begins a database transaction.
            </summary>
            <param name="args">Arguments related to the transaction.</param>
            <returns>Error information, if any.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.EndTransaction(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Ends a database transaction.
            </summary>
            <param name="args">Arguments related to the transaction.</param>
            <returns>Error information, if any.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.Commit(TheTechIdea.Beep.Addin.PassedArgs)">
            <summary>
            Commits the current database transaction.
            </summary>
            <param name="args">Arguments related to the transaction.</param>
            <returns>Error information, if any.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Retrieves an entity based on the provided name and filters.
            </summary>
            <param name="EntityName">The name of the entity to retrieve.</param>
            <param name="filter">The filters to apply on the entity retrieval.</param>
            <returns>The requested entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetEntity(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter},System.Int32,System.Int32)">
            <summary>
            Retrieves an entity based on the provided name and filters.
            </summary>
            <param name="EntityName">The name of the entity to retrieve.</param>
            <param name="filter">The filters to apply on the entity retrieval.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The size of the page to retrieve.</param>
            <returns>The requested entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetEntityAsync(System.String,System.Collections.Generic.List{TheTechIdea.Beep.Report.AppFilter})">
            <summary>
            Asynchronously retrieves an entity based on the provided name and filters.
            </summary>
            <param name="EntityName">The name of the entity to retrieve.</param>
            <param name="Filter">The filters to apply on the entity retrieval.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the requested entity.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetScalarAsync(System.String)">
            <summary>
            Asynchronously retrieves a scalar value based on the provided query.
            </summary>
            <param name="query">The query to execute.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the scalar value.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.GetScalar(System.String)">
            <summary>
            Retrieves a scalar value based on the provided query.
            </summary>
            <param name="query">The query to execute.</param>
            <returns>The scalar value from the query.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.Openconnection">
            <summary>
            Opens a connection to the data source.
            </summary>
            <returns>The state of the connection after attempting to open it.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.IDataSource.Closeconnection">
            <summary>
            Closes the connection to the data source.
            </summary>
            <returns>The state of the connection after attempting to close it.</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Logger.IDMLogger">
            <summary>
            Provides a comprehensive logging interface for the application.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.Logger.IDMLogger.Onevent">
            <summary>
            Occurs when a log event is triggered.
            </summary>
        </member>
        <member name="E:TheTechIdea.Beep.Logger.IDMLogger.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.WriteLog(System.String)">
            <summary>
            Writes a general log message.
            </summary>
            <param name="info">The information to log.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.LogError(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="error">The error message to log.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.LogWarning(System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="warning">The warning message to log.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.LogInfo(System.String)">
            <summary>
            Logs an informational message.
            </summary>
            <param name="info">The informational message to log.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.LogCritical(System.String)">
            <summary>
            Logs a critical error message.
            </summary>
            <param name="error">The critical error message to log.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.LogDebug(System.String)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="message">The debug message to log.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.LogTrace(System.String)">
            <summary>
            Logs a trace message for fine-grained details.
            </summary>
            <param name="message">The trace message to log.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.LogWithContext(System.String,System.Object)">
            <summary>
            Logs a message with additional context information.
            </summary>
            <param name="message">The message to log.</param>
            <param name="context">The additional context information.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.LogStructured(System.String,System.Object)">
            <summary>
            Logs a message with structured properties.
            </summary>
            <param name="message">The message to log.</param>
            <param name="properties">The structured properties to include.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.StartLog">
            <summary>
            Starts logging.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.StopLog">
            <summary>
            Stops logging.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.PauseLog">
            <summary>
            Pauses logging.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.Flush">
            <summary>
            Flushes all pending log messages to the output.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.ConfigureLogger(System.Action{System.Object})">
            <summary>
            Configures the logger dynamically at runtime.
            </summary>
            <param name="configure">The configuration action.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Logger.IDMLogger.AddLogFilter(System.Func{System.String,System.Boolean})">
            <summary>
            Adds a filter to selectively log messages based on custom conditions.
            </summary>
            <param name="filter">The filter function.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.IGenericConsumer`1.GenericConsumer`1.#ctor(System.Func{`1,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
            Creates a generic consumer with a message handler.
            </summary>
            <param name="handler">Delegate to process messages.</param>
            <param name="errorHandler">Optional delegate to handle exceptions.</param>
        </member>
        <member name="T:TheTechIdea.Beep.Messaging.GenericMessage">
            <summary>
            Represents a generic message with dynamic payload and metadata.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.GenericMessage.DeliveryTag">
            <summary>
            RabbitMQ-specific delivery tag for acknowledging the message.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.GenericMessage.EntityName">
            <summary>
            The name of the entity/stream associated with the message.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.GenericMessage.Payload">
            <summary>
            The payload of the message. Can be any object or serialized data.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.GenericMessage.Metadata">
            <summary>
            Additional metadata for the message (e.g., headers, correlation IDs).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.GenericMessage.Timestamp">
            <summary>
            The timestamp when the message was created.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.GenericMessage.MessageId">
            <summary>
            A unique identifier for the message.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.GenericMessage.Priority">
            <summary>
            The priority of the message (optional).
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.GenericMessage.SerializePayload">
            <summary>
            Converts the payload to JSON for serialization.
            </summary>
            <returns>The JSON representation of the payload.</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.GenericMessage.DeserializePayload``1(System.String)">
            <summary>
            Deserializes JSON into the payload.
            </summary>
            <typeparam name="T">The target type for deserialization.</typeparam>
            <param name="json">The JSON string to deserialize.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.GenericMessage.Clone">
            <summary>
            Clones the current message to create a new instance with the same data.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.GenericProducer`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
            Creates a generic producer with a send action.
            </summary>
            <param name="sendAction">Delegate to send messages.</param>
            <param name="errorHandler">Optional delegate to handle exceptions.</param>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.IMessageDataSource`2.Initialize(`1)">
            <summary>
            Initializes the data source with the specified configuration.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.IMessageDataSource`2.SendMessageAsync(System.String,`0,System.Threading.CancellationToken)">
            <summary>
            Sends a message to the specified stream.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.IMessageDataSource`2.SubscribeAsync(System.String,System.Func{`0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Subscribes to a specific stream to receive messages.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.IMessageDataSource`2.AcknowledgeMessageAsync(System.String,`0,System.Threading.CancellationToken)">
            <summary>
            Acknowledges that a message has been successfully processed.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.IMessageDataSource`2.PeekMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a message without committing its acknowledgment (peek functionality).
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.IMessageDataSource`2.GetStreamMetadataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves metadata about a stream (e.g., queue depth, message count).
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Messaging.IMessageDataSource`2.Disconnect">
            <summary>
            Disconnects and cleans up resources.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Messaging.StreamConfig">
            <summary>
            Configuration settings for a message stream or queue.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.StreamConfig.EntityName">
            <summary>
            The name of the entity/stream.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.StreamConfig.ConsumerType">
            <summary>
            The type of consumer for this stream (e.g., subscriber, listener).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.StreamConfig.MessageCategory">
            <summary>
            The message category (Command, Event, Request, Response).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.StreamConfig.ExchangeType">
            <summary>
            The type of exchange (for systems like RabbitMQ).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.StreamConfig.PartitionKey">
            <summary>
            The partition key (for systems like Kafka).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.StreamConfig.RetentionPolicy">
            <summary>
            Retention policy for the stream (e.g., time-based, size-based).
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Messaging.StreamConfig.AdditionalOptions">
            <summary>
            Additional options specific to the messaging system.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Rules.IRule.RuleText">
            <summary>
            The textual expression that defines the rule's logic.
            For example: ":Entity1.LastName == 'Smith'" or other valid expressions.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Rules.IRule.SolveRule(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Solves the specified rule using the provided parameters and returns the outputs and the overall result.
            </summary>
            <param name="ruleName">The name of the rule to evaluate.</param>
            <param name="parameters">Parameters required for rule evaluation.</param>
            <returns>
            A tuple where:
            - <c>outputs</c> is a dictionary containing key/value pairs representing the rule outputs.
            - <c>result</c> is an object representing the overall result of the rule evaluation.
            </returns>
        </member>
        <member name="M:TheTechIdea.Beep.Rules.RuleEngine.RegisterRule(TheTechIdea.Beep.Rules.IRule)">
            <summary>
            Registers a rule with the engine.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Rules.RuleEngine.SolveRule(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluates a rule by its key, ensuring its structure is tokenized.
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Rules.RuleParser">
            <summary>
            Implementation of IRuleParser that tokenizes rule text and builds a corresponding RuleStructure.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Rules.RuleParser.ParseRule(System.String)">
            <summary>
            Parses the provided rule expression (as a string) into a RuleStructure.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Rules.RuleParser.ParseRule(TheTechIdea.Beep.Rules.IRule)">
            <summary>
            Parses the rule by reading its RuleText and extracting metadata from the rule’s attribute.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.CreateRecordClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Generates a class with C# record type for immutable data models
            </summary>
            <param name="recordName">Name of the record to create</param>
            <param name="entity">Entity structure to base the record on</param>
            <param name="outputPath">Output file path</param>
            <param name="namespaceName">Namespace to use</param>
            <param name="generateFile">Whether to generate physical file</param>
            <returns>The generated code as string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.CreateNullableAwareClass(System.String,TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Creates a class with support for nullable reference types
            </summary>
            <param name="className">Name of the class</param>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace name</param>
            <param name="generateNullableAnnotations">Whether to add nullable annotations</param>
            <returns>The generated code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.CreateDDDAggregateRoot(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Creates a domain-driven design style aggregate root class from entity
            </summary>
            <param name="entity">The entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>Generated code as string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.GenerateGraphQLSchema(System.Collections.Generic.List{TheTechIdea.Beep.DataBase.EntityStructure},System.String,System.String)">
            <summary>
            Generates GraphQL type definitions from entity structures
            </summary>
            <param name="entities">The entity structures to convert</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>The generated GraphQL schema</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.GenerateRepositoryImplementation(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String,System.Boolean)">
            <summary>
            Generates repository pattern implementation for an entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <param name="interfaceOnly">Whether to generate interface only</param>
            <returns>The generated repository code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.GenerateEntityDocumentation(TheTechIdea.Beep.DataBase.EntityStructure,System.String)">
            <summary>
            Generates XML documentation from entity structure
            </summary>
            <param name="entity">Entity structure to document</param>
            <param name="outputPath">Output path</param>
            <returns>The XML documentation string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.GenerateFluentValidators(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates FluentValidation validators for entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>The validator class code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.GenerateEFCoreMigration(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates Entity Framework Core migration code for entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>The migration code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.GenerateEntityDiffReport(TheTechIdea.Beep.DataBase.EntityStructure,TheTechIdea.Beep.DataBase.EntityStructure)">
            <summary>
            Generates a differenct report between two versions of an entity
            </summary>
            <param name="originalEntity">Original entity</param>
            <param name="newEntity">New entity</param>
            <returns>Difference report as string</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.GenerateServerlessFunctions(TheTechIdea.Beep.DataBase.EntityStructure,System.String,TheTechIdea.Beep.Utilities.CloudProviderType)">
            <summary>
            Generates serverless function code (Azure Functions/AWS Lambda) for entity operations
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="cloudProvider">Cloud provider type (Azure, AWS, etc)</param>
            <returns>The serverless function code</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.GenerateGrpcService(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates gRPC service definitions for entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Namespace</param>
            <returns>The generated proto file and service implementation</returns>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.IClassCreator.GenerateBlazorComponent(TheTechIdea.Beep.DataBase.EntityStructure,System.String,System.String)">
            <summary>
            Generates Blazor component for displaying and editing entity
            </summary>
            <param name="entity">Entity structure</param>
            <param name="outputPath">Output path</param>
            <param name="namespaceName">Component namespace</param>
            <returns>The Blazor component code</returns>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.NuggetInfo">
            <summary>
            Information about a loaded nugget in shared context
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.NuggetEventArgs">
            <summary>
            Event arguments for nugget operations
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.PluginHealthEventArgs">
            <summary>
            Event arguments for plugin health status changes
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.PluginResourceEventArgs">
            <summary>
            Event arguments for plugin resource violations
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.PluginState">
            <summary>
            Plugin states for modern plugin lifecycle management
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.PluginHealth">
            <summary>
            Plugin health status
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.PluginResolutionStrategy">
            <summary>
            Plugin assembly resolution strategy
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.PluginResolutionStrategy.RegularAssembliesOnly">
            <summary>
            Search regular assemblies only
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.PluginResolutionStrategy.IsolatedPluginsOnly">
            <summary>
            Search isolated plugins only
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.PluginResolutionStrategy.RegularFirst">
            <summary>
            Search regular assemblies first, then plugins
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.PluginResolutionStrategy.PluginsFirst">
            <summary>
            Search plugins first, then regular assemblies
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.PluginResolutionStrategy.Both">
            <summary>
            Search both simultaneously (parallel)
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.UnifiedPluginType">
            <summary>
            Unified plugin type - treats everything as a plugin
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.UnifiedPluginType.SharedAssembly">
            <summary>
            Regular assembly loaded in shared context
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.UnifiedPluginType.IsolatedPlugin">
            <summary>
            Isolated plugin with unload capability
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.UnifiedPluginType.NuggetPackage">
            <summary>
            Downloaded nugget package
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.UnifiedPluginType.BuiltinComponent">
            <summary>
            Built-in system component
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.UnifiedPluginType.DataSourceDriver">
            <summary>
            Data source driver
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.UnifiedPluginType.ConnectionDriver">
            <summary>
            Connection driver
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.UnifiedPluginType.WorkflowComponent">
            <summary>
            Workflow component
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.UnifiedPluginType.UIComponent">
            <summary>
            UI component/addon
            </summary>
        </member>
        <member name="F:TheTechIdea.Beep.Tools.UnifiedPluginType.ExtensionComponent">
            <summary>
            Extension/loader component
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.PluginInfo">
            <summary>
            Plugin information for unified plugin system - treats everything as a plugin
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.UnifiedPlugin">
            <summary>
            Unified plugin container - represents any loadable component as a plugin
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.UnifiedPlugin.CreateInstance(System.String,System.Object[])">
            <summary>
            Creates an instance of a type from this plugin
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.UnifiedPlugin.GetNamedInstance``1(System.String)">
            <summary>
            Gets an instance by name (for singleton-like behavior)
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.UnifiedPlugin.SetNamedInstance(System.String,System.Object)">
            <summary>
            Sets a named instance
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.UnifiedPlugin.HasType(System.String)">
            <summary>
            Checks if the plugin contains a specific type
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.UnifiedPlugin.GetTypesImplementing``1">
            <summary>
            Gets all types implementing a specific interface
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.Tools.UnifiedPlugin.ConvertToPluginInfo">
            <summary>
            Converts to legacy PluginInfo for compatibility
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.PluginInstanceResult">
            <summary>
            Plugin instance creation result
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.PluginTypeResult">
            <summary>
            Plugin type search result
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.IPluginContext">
            <summary>
            Plugin context for dependency injection and services
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.PluginEventArgs">
            <summary>
            Event arguments for plugin lifecycle events
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.IModernPlugin">
            <summary>
            Enhanced modern plugin interface - unified approach
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.IPluginMessageBus">
            <summary>
            Plugin messaging system for inter-plugin communication
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.IUnifiedPluginManager">
            <summary>
            Unified plugin manager interface - treats everything as plugins
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.PluginDiscoveryResult">
            <summary>
            Plugin discovery result
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Tools.UnifiedPluginFactory">
            <summary>
            Plugin factory for creating unified plugins from different sources
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Vis.AddinAttribute">
            <summary>
            Attribute class to define metadata for add-ins within the system.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.Url">
            <summary>
            Gets or sets URl of the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.Icon">
            <summary>
            Gets or sets the icon image of the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.GuidID">
            <summary>
            Gets or sets the unique identifier of the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.Name">
            <summary>
            Gets or sets the unique name of the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.Caption">
            <summary>
            Gets or sets the caption or title for the add-in, usually for display purposes.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.Hidden">
            <summary>
            Gets or sets a value indicating whether the add-in is hidden in the UI. Defaults to false.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.iconimage">
            <summary>
            Gets or sets the path or identifier for the icon image of the add-in. Defaults to null.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.ObjectType">
            <summary>
            Gets or sets the type of object the add-in is associated with.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.ClassType">
            <summary>
            Gets or sets the class type of the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.key">
            <summary>
            Gets or sets a unique integer key to identify the add-in. Defaults to -1.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.misc">
            <summary>
            Gets or sets additional miscellaneous data associated with the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.parentkey">
            <summary>
            Gets or sets an integer key identifying the parent of this add-in, if applicable. Defaults to -1.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.menu">
            <summary>
            Gets or sets the name of the menu or menu item the add-in is associated with.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.order">
            <summary>
            Gets or sets the display order of the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.displayType">
            <summary>
            Gets or sets the display type of the add-in, defined by the DisplayType enum.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.addinType">
            <summary>
            Gets or sets the add-in type, defined by the AddinType enum.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.Showin">
            <summary>
            Gets or sets where the add-in should be shown, defined by the ShowinType enum.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.Category">
            <summary>
            Gets or sets the data source category, defined by the DatasourceCategory enum. Defaults to NONE.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.DatasourceType">
            <summary>
            Gets or sets the data source type, defined by the DataSourceType enum. Defaults to NONE.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.FileType">
            <summary>
            Gets or sets the file type or data format the add-in is associated with.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.returndataTypename">
            <summary>
            Gets or sets the type name of the data returned by the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.DefaultCreate">
            <summary>
            Gets or sets a value indicating whether the add-in should be created by default.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.Description">
            <summary>
            Gets or sets a detailed description of the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.IsHomePage">
            <summary>
            Gets or sets a value indicating whether the add-in represents a home page or primary interface component.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.AddinAttribute.BranchType">
            <summary>
            
            </summary>
        </member>
        <member name="T:TheTechIdea.Beep.Vis.CommandAttribute">
            <summary>
            Attribute class to define metadata for commands within the system.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.Url">
            <summary>
            Gets or sets URl of the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.GuidID">
            <summary>
            Gets or sets the icon image of the add-in.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.Name">
            <summary>
            Gets or sets the unique name of the command.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.Caption">
            <summary>
            Gets or sets the caption or title for the command, usually for display purposes.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.Hidden">
            <summary>
            Gets or sets a value indicating whether the command is hidden in the UI. Defaults to false.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.Click">
            <summary>
            Gets or sets a value indicating whether the command is triggered on a single click. Defaults to false.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.DoubleClick">
            <summary>
            Gets or sets a value indicating whether the command is triggered on a double click. Defaults to false.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.iconimage">
            <summary>
            Gets or sets the path or identifier for the icon image of the command. Defaults to null.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.PointType">
            <summary>   
            Gets or sets the point type for the command, defined by the EnumPointType enum.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.ObjectType">
            <summary>
            Gets or sets the type of object the command is associated with.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.ClassType">
            <summary>
            Gets or sets the class type of the command.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.misc">
            <summary>
            Gets or sets additional miscellaneous data associated with the command.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.Category">
            <summary>
            Gets or sets the data source category, defined by the DatasourceCategory enum. Defaults to NONE.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.DatasourceType">
            <summary>
            Gets or sets the data source type, defined by the DataSourceType enum. Defaults to NONE.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.Showin">
            <summary>
            Gets or sets where the command should be shown, defined by the ShowinType enum. Defaults to Both.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.IsLeftAligned">
            <summary>
            Gets or sets a value indicating whether the command is left-aligned in the UI. Defaults to true.
            </summary>
        </member>
        <member name="P:TheTechIdea.Beep.Vis.CommandAttribute.Order">
            <summary>
            Gets or sets the display order of the command. Defaults to 0.
            </summary>
        </member>
        <member name="M:TheTechIdea.Beep.WebAPI.IWebAPIDataSource.GetAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Sends a GET request and deserializes the JSON response to type T.
            Returns default(T) if the request fails or content cannot be parsed.
            </summary>
        </member>
    </members>
</doc>
